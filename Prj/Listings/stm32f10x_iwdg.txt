; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f10x_iwdg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f10x_iwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Board\inc -I..\Chip\Hal_lib\inc -I..\Chip\Startup\inc -I..\coremark -I..\Chip\CMSIS -I.\RTE\_CoreMark -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F10X_MD --omf_browse=.\objects\stm32f10x_iwdg.crf ..\Chip\Hal_lib\stm32f10x_iwdg.c]
                          THUMB

                          AREA ||i.IWDG_Enable||, CODE, READONLY, ALIGN=2

                  IWDG_Enable PROC
;;;147      */
;;;148    void IWDG_Enable(void)
000000  f64c40cc          MOV      r0,#0xcccc
;;;149    {
;;;150      IWDG->KR = KR_KEY_Enable;
000004  4901              LDR      r1,|L1.12|
000006  6008              STR      r0,[r1,#0]
;;;151    }
000008  4770              BX       lr
;;;152    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x40003000

                          AREA ||i.IWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  IWDG_GetFlagStatus PROC
;;;160      */
;;;161    FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;162    {
000002  4604              MOV      r4,r0
;;;163      FlagStatus bitstatus = RESET;
000004  2500              MOVS     r5,#0
;;;164      /* Check the parameters */
;;;165      assert_param(IS_IWDG_FLAG(IWDG_FLAG));
000006  2c01              CMP      r4,#1
000008  d001              BEQ      |L2.14|
00000a  2c02              CMP      r4,#2
00000c  d101              BNE      |L2.18|
                  |L2.14|
00000e  2101              MOVS     r1,#1
000010  e000              B        |L2.20|
                  |L2.18|
000012  2100              MOVS     r1,#0
                  |L2.20|
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       assert_param
;;;166      if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
00001a  4804              LDR      r0,|L2.44|
00001c  68c0              LDR      r0,[r0,#0xc]
00001e  4020              ANDS     r0,r0,r4
000020  b108              CBZ      r0,|L2.38|
;;;167      {
;;;168        bitstatus = SET;
000022  2501              MOVS     r5,#1
000024  e000              B        |L2.40|
                  |L2.38|
;;;169      }
;;;170      else
;;;171      {
;;;172        bitstatus = RESET;
000026  2500              MOVS     r5,#0
                  |L2.40|
;;;173      }
;;;174      /* Return the flag status */
;;;175      return bitstatus;
000028  4628              MOV      r0,r5
;;;176    }
00002a  bd70              POP      {r4-r6,pc}
;;;177    
                          ENDP

                  |L2.44|
                          DCD      0x40003000

                          AREA ||i.IWDG_ReloadCounter||, CODE, READONLY, ALIGN=2

                  IWDG_ReloadCounter PROC
;;;137      */
;;;138    void IWDG_ReloadCounter(void)
000000  f64a20aa          MOV      r0,#0xaaaa
;;;139    {
;;;140      IWDG->KR = KR_KEY_Reload;
000004  4901              LDR      r1,|L3.12|
000006  6008              STR      r0,[r1,#0]
;;;141    }
000008  4770              BX       lr
;;;142    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40003000

                          AREA ||i.IWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  IWDG_SetPrescaler PROC
;;;111      */
;;;112    void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
000000  b510              PUSH     {r4,lr}
;;;113    {
000002  4604              MOV      r4,r0
;;;114      /* Check the parameters */
;;;115      assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
000004  b15c              CBZ      r4,|L4.30|
000006  2c01              CMP      r4,#1
000008  d009              BEQ      |L4.30|
00000a  2c02              CMP      r4,#2
00000c  d007              BEQ      |L4.30|
00000e  2c03              CMP      r4,#3
000010  d005              BEQ      |L4.30|
000012  2c04              CMP      r4,#4
000014  d003              BEQ      |L4.30|
000016  2c05              CMP      r4,#5
000018  d001              BEQ      |L4.30|
00001a  2c06              CMP      r4,#6
00001c  d101              BNE      |L4.34|
                  |L4.30|
00001e  2101              MOVS     r1,#1
000020  e000              B        |L4.36|
                  |L4.34|
000022  2100              MOVS     r1,#0
                  |L4.36|
000024  4608              MOV      r0,r1
000026  f7fffffe          BL       assert_param
;;;116      IWDG->PR = IWDG_Prescaler;
00002a  4801              LDR      r0,|L4.48|
00002c  6044              STR      r4,[r0,#4]
;;;117    }
00002e  bd10              POP      {r4,pc}
;;;118    
                          ENDP

                  |L4.48|
                          DCD      0x40003000

                          AREA ||i.IWDG_SetReload||, CODE, READONLY, ALIGN=2

                  IWDG_SetReload PROC
;;;124      */
;;;125    void IWDG_SetReload(uint16_t Reload)
000000  b510              PUSH     {r4,lr}
;;;126    {
000002  4604              MOV      r4,r0
;;;127      /* Check the parameters */
;;;128      assert_param(IS_IWDG_RELOAD(Reload));
000004  f5b45f80          CMP      r4,#0x1000
000008  da01              BGE      |L5.14|
00000a  2101              MOVS     r1,#1
00000c  e000              B        |L5.16|
                  |L5.14|
00000e  2100              MOVS     r1,#0
                  |L5.16|
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       assert_param
;;;129      IWDG->RLR = Reload;
000016  4801              LDR      r0,|L5.28|
000018  6084              STR      r4,[r0,#8]
;;;130    }
00001a  bd10              POP      {r4,pc}
;;;131    
                          ENDP

                  |L5.28|
                          DCD      0x40003000

                          AREA ||i.IWDG_WriteAccessCmd||, CODE, READONLY, ALIGN=2

                  IWDG_WriteAccessCmd PROC
;;;91       */
;;;92     void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
000000  b510              PUSH     {r4,lr}
;;;93     {
000002  4604              MOV      r4,r0
;;;94       /* Check the parameters */
;;;95       assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
000004  f2455155          MOV      r1,#0x5555
000008  428c              CMP      r4,r1
00000a  d000              BEQ      |L6.14|
00000c  b90c              CBNZ     r4,|L6.18|
                  |L6.14|
00000e  2101              MOVS     r1,#1
000010  e000              B        |L6.20|
                  |L6.18|
000012  2100              MOVS     r1,#0
                  |L6.20|
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       assert_param
;;;96       IWDG->KR = IWDG_WriteAccess;
00001a  4801              LDR      r0,|L6.32|
00001c  6004              STR      r4,[r0,#0]
;;;97     }
00001e  bd10              POP      {r4,pc}
;;;98     
                          ENDP

                  |L6.32|
                          DCD      0x40003000
