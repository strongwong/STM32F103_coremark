; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f10x_dma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Board\inc -I..\Chip\Hal_lib\inc -I..\Chip\Startup\inc -I..\coremark -I..\Chip\CMSIS -I.\RTE\_CoreMark -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F10X_MD --omf_browse=.\objects\stm32f10x_dma.crf ..\Chip\Hal_lib\stm32f10x_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;522      */
;;;523    void DMA_ClearFlag(uint32_t DMAy_FLAG)
000000  b510              PUSH     {r4,lr}
;;;524    {
000002  4604              MOV      r4,r0
;;;525      /* Check the parameters */
;;;526      assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
000004  f0044170          AND      r1,r4,#0xf0000000
000008  b111              CBZ      r1,|L1.16|
00000a  4909              LDR      r1,|L1.48|
00000c  4021              ANDS     r1,r1,r4
00000e  b911              CBNZ     r1,|L1.22|
                  |L1.16|
000010  b10c              CBZ      r4,|L1.22|
000012  2101              MOVS     r1,#1
000014  e000              B        |L1.24|
                  |L1.22|
000016  2100              MOVS     r1,#0
                  |L1.24|
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       assert_param
;;;527    
;;;528      /* Calculate the used DMAy */
;;;529      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
00001e  f0045080          AND      r0,r4,#0x10000000
000022  b110              CBZ      r0,|L1.42|
;;;530      {
;;;531        /* Clear the selected DMAy flags */
;;;532        DMA2->IFCR = DMAy_FLAG;
000024  4803              LDR      r0,|L1.52|
000026  6004              STR      r4,[r0,#0]
000028  e001              B        |L1.46|
                  |L1.42|
;;;533      }
;;;534      else
;;;535      {
;;;536        /* Clear the selected DMAy flags */
;;;537        DMA1->IFCR = DMAy_FLAG;
00002a  4803              LDR      r0,|L1.56|
00002c  6044              STR      r4,[r0,#4]
                  |L1.46|
;;;538      }
;;;539    }
00002e  bd10              POP      {r4,pc}
;;;540    
                          ENDP

                  |L1.48|
                          DCD      0xeff00000
                  |L1.52|
                          DCD      0x40020404
                  |L1.56|
                          DCD      0x40020000

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;683      */
;;;684    void DMA_ClearITPendingBit(uint32_t DMAy_IT)
000000  b510              PUSH     {r4,lr}
;;;685    {
000002  4604              MOV      r4,r0
;;;686      /* Check the parameters */
;;;687      assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
000004  f0044170          AND      r1,r4,#0xf0000000
000008  b111              CBZ      r1,|L2.16|
00000a  4909              LDR      r1,|L2.48|
00000c  4021              ANDS     r1,r1,r4
00000e  b911              CBNZ     r1,|L2.22|
                  |L2.16|
000010  b10c              CBZ      r4,|L2.22|
000012  2101              MOVS     r1,#1
000014  e000              B        |L2.24|
                  |L2.22|
000016  2100              MOVS     r1,#0
                  |L2.24|
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       assert_param
;;;688    
;;;689      /* Calculate the used DMAy */
;;;690      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
00001e  f0045080          AND      r0,r4,#0x10000000
000022  b110              CBZ      r0,|L2.42|
;;;691      {
;;;692        /* Clear the selected DMAy interrupt pending bits */
;;;693        DMA2->IFCR = DMAy_IT;
000024  4803              LDR      r0,|L2.52|
000026  6004              STR      r4,[r0,#0]
000028  e001              B        |L2.46|
                  |L2.42|
;;;694      }
;;;695      else
;;;696      {
;;;697        /* Clear the selected DMAy interrupt pending bits */
;;;698        DMA1->IFCR = DMAy_IT;
00002a  4803              LDR      r0,|L2.56|
00002c  6044              STR      r4,[r0,#4]
                  |L2.46|
;;;699      }
;;;700    }
00002e  bd10              POP      {r4,pc}
;;;701    
                          ENDP

                  |L2.48|
                          DCD      0xeff00000
                  |L2.52|
                          DCD      0x40020404
                  |L2.56|
                          DCD      0x40020000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=2

                  DMA_Cmd PROC
;;;293      */
;;;294    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;295    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;296      /* Check the parameters */
;;;297      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000006  4924              LDR      r1,|L3.152|
000008  428c              CMP      r4,r1
00000a  d02a              BEQ      |L3.98|
00000c  4922              LDR      r1,|L3.152|
00000e  3114              ADDS     r1,r1,#0x14
000010  428c              CMP      r4,r1
000012  d026              BEQ      |L3.98|
000014  4920              LDR      r1,|L3.152|
000016  3128              ADDS     r1,r1,#0x28
000018  428c              CMP      r4,r1
00001a  d022              BEQ      |L3.98|
00001c  491e              LDR      r1,|L3.152|
00001e  313c              ADDS     r1,r1,#0x3c
000020  428c              CMP      r4,r1
000022  d01e              BEQ      |L3.98|
000024  491c              LDR      r1,|L3.152|
000026  3150              ADDS     r1,r1,#0x50
000028  428c              CMP      r4,r1
00002a  d01a              BEQ      |L3.98|
00002c  491a              LDR      r1,|L3.152|
00002e  3164              ADDS     r1,r1,#0x64
000030  428c              CMP      r4,r1
000032  d016              BEQ      |L3.98|
000034  4918              LDR      r1,|L3.152|
000036  3178              ADDS     r1,r1,#0x78
000038  428c              CMP      r4,r1
00003a  d012              BEQ      |L3.98|
00003c  4917              LDR      r1,|L3.156|
00003e  428c              CMP      r4,r1
000040  d00f              BEQ      |L3.98|
000042  4916              LDR      r1,|L3.156|
000044  3114              ADDS     r1,r1,#0x14
000046  428c              CMP      r4,r1
000048  d00b              BEQ      |L3.98|
00004a  4914              LDR      r1,|L3.156|
00004c  3128              ADDS     r1,r1,#0x28
00004e  428c              CMP      r4,r1
000050  d007              BEQ      |L3.98|
000052  4912              LDR      r1,|L3.156|
000054  313c              ADDS     r1,r1,#0x3c
000056  428c              CMP      r4,r1
000058  d003              BEQ      |L3.98|
00005a  4910              LDR      r1,|L3.156|
00005c  3150              ADDS     r1,r1,#0x50
00005e  428c              CMP      r4,r1
000060  d101              BNE      |L3.102|
                  |L3.98|
000062  2101              MOVS     r1,#1
000064  e000              B        |L3.104|
                  |L3.102|
000066  2100              MOVS     r1,#0
                  |L3.104|
000068  4608              MOV      r0,r1
00006a  f7fffffe          BL       assert_param
;;;298      assert_param(IS_FUNCTIONAL_STATE(NewState));
00006e  b10d              CBZ      r5,|L3.116|
000070  2d01              CMP      r5,#1
000072  d101              BNE      |L3.120|
                  |L3.116|
000074  2101              MOVS     r1,#1
000076  e000              B        |L3.122|
                  |L3.120|
000078  2100              MOVS     r1,#0
                  |L3.122|
00007a  4608              MOV      r0,r1
00007c  f7fffffe          BL       assert_param
;;;299    
;;;300      if (NewState != DISABLE)
000080  b125              CBZ      r5,|L3.140|
;;;301      {
;;;302        /* Enable the selected DMAy Channelx */
;;;303        DMAy_Channelx->CCR |= DMA_CCR1_EN;
000082  6820              LDR      r0,[r4,#0]
000084  f0400001          ORR      r0,r0,#1
000088  6020              STR      r0,[r4,#0]
00008a  e004              B        |L3.150|
                  |L3.140|
;;;304      }
;;;305      else
;;;306      {
;;;307        /* Disable the selected DMAy Channelx */
;;;308        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
00008c  6820              LDR      r0,[r4,#0]
00008e  f64f71fe          MOV      r1,#0xfffe
000092  4008              ANDS     r0,r0,r1
000094  6020              STR      r0,[r4,#0]
                  |L3.150|
;;;309      }
;;;310    }
000096  bd70              POP      {r4-r6,pc}
;;;311    
                          ENDP

                  |L3.152|
                          DCD      0x40020008
                  |L3.156|
                          DCD      0x40020408

                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;107      */
;;;108    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  b510              PUSH     {r4,lr}
;;;109    {
000002  4604              MOV      r4,r0
;;;110      /* Check the parameters */
;;;111      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000004  496a              LDR      r1,|L4.432|
000006  428c              CMP      r4,r1
000008  d02a              BEQ      |L4.96|
00000a  4969              LDR      r1,|L4.432|
00000c  3114              ADDS     r1,r1,#0x14
00000e  428c              CMP      r4,r1
000010  d026              BEQ      |L4.96|
000012  4967              LDR      r1,|L4.432|
000014  3128              ADDS     r1,r1,#0x28
000016  428c              CMP      r4,r1
000018  d022              BEQ      |L4.96|
00001a  4965              LDR      r1,|L4.432|
00001c  313c              ADDS     r1,r1,#0x3c
00001e  428c              CMP      r4,r1
000020  d01e              BEQ      |L4.96|
000022  4963              LDR      r1,|L4.432|
000024  3150              ADDS     r1,r1,#0x50
000026  428c              CMP      r4,r1
000028  d01a              BEQ      |L4.96|
00002a  4961              LDR      r1,|L4.432|
00002c  3164              ADDS     r1,r1,#0x64
00002e  428c              CMP      r4,r1
000030  d016              BEQ      |L4.96|
000032  495f              LDR      r1,|L4.432|
000034  3178              ADDS     r1,r1,#0x78
000036  428c              CMP      r4,r1
000038  d012              BEQ      |L4.96|
00003a  495e              LDR      r1,|L4.436|
00003c  428c              CMP      r4,r1
00003e  d00f              BEQ      |L4.96|
000040  495c              LDR      r1,|L4.436|
000042  3114              ADDS     r1,r1,#0x14
000044  428c              CMP      r4,r1
000046  d00b              BEQ      |L4.96|
000048  495a              LDR      r1,|L4.436|
00004a  3128              ADDS     r1,r1,#0x28
00004c  428c              CMP      r4,r1
00004e  d007              BEQ      |L4.96|
000050  4958              LDR      r1,|L4.436|
000052  313c              ADDS     r1,r1,#0x3c
000054  428c              CMP      r4,r1
000056  d003              BEQ      |L4.96|
000058  4956              LDR      r1,|L4.436|
00005a  3150              ADDS     r1,r1,#0x50
00005c  428c              CMP      r4,r1
00005e  d101              BNE      |L4.100|
                  |L4.96|
000060  2101              MOVS     r1,#1
000062  e000              B        |L4.102|
                  |L4.100|
000064  2100              MOVS     r1,#0
                  |L4.102|
000066  4608              MOV      r0,r1
000068  f7fffffe          BL       assert_param
;;;112      
;;;113      /* Disable the selected DMAy Channelx */
;;;114      DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
00006c  6820              LDR      r0,[r4,#0]
00006e  f64f71fe          MOV      r1,#0xfffe
000072  4008              ANDS     r0,r0,r1
000074  6020              STR      r0,[r4,#0]
;;;115      
;;;116      /* Reset DMAy Channelx control register */
;;;117      DMAy_Channelx->CCR  = 0;
000076  2000              MOVS     r0,#0
000078  6020              STR      r0,[r4,#0]
;;;118      
;;;119      /* Reset DMAy Channelx remaining bytes register */
;;;120      DMAy_Channelx->CNDTR = 0;
00007a  6060              STR      r0,[r4,#4]
;;;121      
;;;122      /* Reset DMAy Channelx peripheral address register */
;;;123      DMAy_Channelx->CPAR  = 0;
00007c  60a0              STR      r0,[r4,#8]
;;;124      
;;;125      /* Reset DMAy Channelx memory address register */
;;;126      DMAy_Channelx->CMAR = 0;
00007e  60e0              STR      r0,[r4,#0xc]
;;;127      
;;;128      if (DMAy_Channelx == DMA1_Channel1)
000080  484b              LDR      r0,|L4.432|
000082  4284              CMP      r4,r0
000084  d108              BNE      |L4.152|
;;;129      {
;;;130        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;131        DMA1->IFCR |= DMA1_Channel1_IT_Mask;
000086  484a              LDR      r0,|L4.432|
000088  3808              SUBS     r0,r0,#8
00008a  6840              LDR      r0,[r0,#4]
00008c  f040000f          ORR      r0,r0,#0xf
000090  4947              LDR      r1,|L4.432|
000092  3908              SUBS     r1,r1,#8
000094  6048              STR      r0,[r1,#4]
000096  e08a              B        |L4.430|
                  |L4.152|
;;;132      }
;;;133      else if (DMAy_Channelx == DMA1_Channel2)
000098  4845              LDR      r0,|L4.432|
00009a  3014              ADDS     r0,r0,#0x14
00009c  4284              CMP      r4,r0
00009e  d108              BNE      |L4.178|
;;;134      {
;;;135        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;136        DMA1->IFCR |= DMA1_Channel2_IT_Mask;
0000a0  4843              LDR      r0,|L4.432|
0000a2  3808              SUBS     r0,r0,#8
0000a4  6840              LDR      r0,[r0,#4]
0000a6  f04000f0          ORR      r0,r0,#0xf0
0000aa  4941              LDR      r1,|L4.432|
0000ac  3908              SUBS     r1,r1,#8
0000ae  6048              STR      r0,[r1,#4]
0000b0  e07d              B        |L4.430|
                  |L4.178|
;;;137      }
;;;138      else if (DMAy_Channelx == DMA1_Channel3)
0000b2  483f              LDR      r0,|L4.432|
0000b4  3028              ADDS     r0,r0,#0x28
0000b6  4284              CMP      r4,r0
0000b8  d108              BNE      |L4.204|
;;;139      {
;;;140        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;141        DMA1->IFCR |= DMA1_Channel3_IT_Mask;
0000ba  483d              LDR      r0,|L4.432|
0000bc  3808              SUBS     r0,r0,#8
0000be  6840              LDR      r0,[r0,#4]
0000c0  f4406070          ORR      r0,r0,#0xf00
0000c4  493a              LDR      r1,|L4.432|
0000c6  3908              SUBS     r1,r1,#8
0000c8  6048              STR      r0,[r1,#4]
0000ca  e070              B        |L4.430|
                  |L4.204|
;;;142      }
;;;143      else if (DMAy_Channelx == DMA1_Channel4)
0000cc  4838              LDR      r0,|L4.432|
0000ce  303c              ADDS     r0,r0,#0x3c
0000d0  4284              CMP      r4,r0
0000d2  d108              BNE      |L4.230|
;;;144      {
;;;145        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;146        DMA1->IFCR |= DMA1_Channel4_IT_Mask;
0000d4  4836              LDR      r0,|L4.432|
0000d6  3808              SUBS     r0,r0,#8
0000d8  6840              LDR      r0,[r0,#4]
0000da  f4404070          ORR      r0,r0,#0xf000
0000de  4934              LDR      r1,|L4.432|
0000e0  3908              SUBS     r1,r1,#8
0000e2  6048              STR      r0,[r1,#4]
0000e4  e063              B        |L4.430|
                  |L4.230|
;;;147      }
;;;148      else if (DMAy_Channelx == DMA1_Channel5)
0000e6  4832              LDR      r0,|L4.432|
0000e8  3050              ADDS     r0,r0,#0x50
0000ea  4284              CMP      r4,r0
0000ec  d108              BNE      |L4.256|
;;;149      {
;;;150        /* Reset interrupt pending bits for DMA1 Channel5 */
;;;151        DMA1->IFCR |= DMA1_Channel5_IT_Mask;
0000ee  4830              LDR      r0,|L4.432|
0000f0  3808              SUBS     r0,r0,#8
0000f2  6840              LDR      r0,[r0,#4]
0000f4  f4402070          ORR      r0,r0,#0xf0000
0000f8  492d              LDR      r1,|L4.432|
0000fa  3908              SUBS     r1,r1,#8
0000fc  6048              STR      r0,[r1,#4]
0000fe  e056              B        |L4.430|
                  |L4.256|
;;;152      }
;;;153      else if (DMAy_Channelx == DMA1_Channel6)
000100  482b              LDR      r0,|L4.432|
000102  3064              ADDS     r0,r0,#0x64
000104  4284              CMP      r4,r0
000106  d108              BNE      |L4.282|
;;;154      {
;;;155        /* Reset interrupt pending bits for DMA1 Channel6 */
;;;156        DMA1->IFCR |= DMA1_Channel6_IT_Mask;
000108  4829              LDR      r0,|L4.432|
00010a  3808              SUBS     r0,r0,#8
00010c  6840              LDR      r0,[r0,#4]
00010e  f4400070          ORR      r0,r0,#0xf00000
000112  4927              LDR      r1,|L4.432|
000114  3908              SUBS     r1,r1,#8
000116  6048              STR      r0,[r1,#4]
000118  e049              B        |L4.430|
                  |L4.282|
;;;157      }
;;;158      else if (DMAy_Channelx == DMA1_Channel7)
00011a  4825              LDR      r0,|L4.432|
00011c  3078              ADDS     r0,r0,#0x78
00011e  4284              CMP      r4,r0
000120  d108              BNE      |L4.308|
;;;159      {
;;;160        /* Reset interrupt pending bits for DMA1 Channel7 */
;;;161        DMA1->IFCR |= DMA1_Channel7_IT_Mask;
000122  4823              LDR      r0,|L4.432|
000124  3808              SUBS     r0,r0,#8
000126  6840              LDR      r0,[r0,#4]
000128  f0406070          ORR      r0,r0,#0xf000000
00012c  4920              LDR      r1,|L4.432|
00012e  3908              SUBS     r1,r1,#8
000130  6048              STR      r0,[r1,#4]
000132  e03c              B        |L4.430|
                  |L4.308|
;;;162      }
;;;163      else if (DMAy_Channelx == DMA2_Channel1)
000134  481f              LDR      r0,|L4.436|
000136  4284              CMP      r4,r0
000138  d106              BNE      |L4.328|
;;;164      {
;;;165        /* Reset interrupt pending bits for DMA2 Channel1 */
;;;166        DMA2->IFCR |= DMA2_Channel1_IT_Mask;
00013a  1f00              SUBS     r0,r0,#4
00013c  6800              LDR      r0,[r0,#0]
00013e  f040000f          ORR      r0,r0,#0xf
000142  1f21              SUBS     r1,r4,#4
000144  6008              STR      r0,[r1,#0]
000146  e032              B        |L4.430|
                  |L4.328|
;;;167      }
;;;168      else if (DMAy_Channelx == DMA2_Channel2)
000148  481a              LDR      r0,|L4.436|
00014a  3014              ADDS     r0,r0,#0x14
00014c  4284              CMP      r4,r0
00014e  d108              BNE      |L4.354|
;;;169      {
;;;170        /* Reset interrupt pending bits for DMA2 Channel2 */
;;;171        DMA2->IFCR |= DMA2_Channel2_IT_Mask;
000150  4818              LDR      r0,|L4.436|
000152  1f00              SUBS     r0,r0,#4
000154  6800              LDR      r0,[r0,#0]
000156  f04000f0          ORR      r0,r0,#0xf0
00015a  4916              LDR      r1,|L4.436|
00015c  1f09              SUBS     r1,r1,#4
00015e  6008              STR      r0,[r1,#0]
000160  e025              B        |L4.430|
                  |L4.354|
;;;172      }
;;;173      else if (DMAy_Channelx == DMA2_Channel3)
000162  4814              LDR      r0,|L4.436|
000164  3028              ADDS     r0,r0,#0x28
000166  4284              CMP      r4,r0
000168  d108              BNE      |L4.380|
;;;174      {
;;;175        /* Reset interrupt pending bits for DMA2 Channel3 */
;;;176        DMA2->IFCR |= DMA2_Channel3_IT_Mask;
00016a  4812              LDR      r0,|L4.436|
00016c  1f00              SUBS     r0,r0,#4
00016e  6800              LDR      r0,[r0,#0]
000170  f4406070          ORR      r0,r0,#0xf00
000174  490f              LDR      r1,|L4.436|
000176  1f09              SUBS     r1,r1,#4
000178  6008              STR      r0,[r1,#0]
00017a  e018              B        |L4.430|
                  |L4.380|
;;;177      }
;;;178      else if (DMAy_Channelx == DMA2_Channel4)
00017c  480d              LDR      r0,|L4.436|
00017e  303c              ADDS     r0,r0,#0x3c
000180  4284              CMP      r4,r0
000182  d108              BNE      |L4.406|
;;;179      {
;;;180        /* Reset interrupt pending bits for DMA2 Channel4 */
;;;181        DMA2->IFCR |= DMA2_Channel4_IT_Mask;
000184  480b              LDR      r0,|L4.436|
000186  1f00              SUBS     r0,r0,#4
000188  6800              LDR      r0,[r0,#0]
00018a  f4404070          ORR      r0,r0,#0xf000
00018e  4909              LDR      r1,|L4.436|
000190  1f09              SUBS     r1,r1,#4
000192  6008              STR      r0,[r1,#0]
000194  e00b              B        |L4.430|
                  |L4.406|
;;;182      }
;;;183      else
;;;184      { 
;;;185        if (DMAy_Channelx == DMA2_Channel5)
000196  4807              LDR      r0,|L4.436|
000198  3050              ADDS     r0,r0,#0x50
00019a  4284              CMP      r4,r0
00019c  d107              BNE      |L4.430|
;;;186        {
;;;187          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;188          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
00019e  4805              LDR      r0,|L4.436|
0001a0  1f00              SUBS     r0,r0,#4
0001a2  6800              LDR      r0,[r0,#0]
0001a4  f4402070          ORR      r0,r0,#0xf0000
0001a8  4902              LDR      r1,|L4.436|
0001aa  1f09              SUBS     r1,r1,#4
0001ac  6008              STR      r0,[r1,#0]
                  |L4.430|
;;;189        }
;;;190      }
;;;191    }
0001ae  bd10              POP      {r4,pc}
;;;192    
                          ENDP

                  |L4.432|
                          DCD      0x40020008
                  |L4.436|
                          DCD      0x40020408

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=2

                  DMA_GetCurrDataCounter PROC
;;;370      */
;;;371    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  b510              PUSH     {r4,lr}
;;;372    {
000002  4604              MOV      r4,r0
;;;373      /* Check the parameters */
;;;374      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000004  491b              LDR      r1,|L5.116|
000006  428c              CMP      r4,r1
000008  d02a              BEQ      |L5.96|
00000a  491a              LDR      r1,|L5.116|
00000c  3114              ADDS     r1,r1,#0x14
00000e  428c              CMP      r4,r1
000010  d026              BEQ      |L5.96|
000012  4918              LDR      r1,|L5.116|
000014  3128              ADDS     r1,r1,#0x28
000016  428c              CMP      r4,r1
000018  d022              BEQ      |L5.96|
00001a  4916              LDR      r1,|L5.116|
00001c  313c              ADDS     r1,r1,#0x3c
00001e  428c              CMP      r4,r1
000020  d01e              BEQ      |L5.96|
000022  4914              LDR      r1,|L5.116|
000024  3150              ADDS     r1,r1,#0x50
000026  428c              CMP      r4,r1
000028  d01a              BEQ      |L5.96|
00002a  4912              LDR      r1,|L5.116|
00002c  3164              ADDS     r1,r1,#0x64
00002e  428c              CMP      r4,r1
000030  d016              BEQ      |L5.96|
000032  4910              LDR      r1,|L5.116|
000034  3178              ADDS     r1,r1,#0x78
000036  428c              CMP      r4,r1
000038  d012              BEQ      |L5.96|
00003a  490f              LDR      r1,|L5.120|
00003c  428c              CMP      r4,r1
00003e  d00f              BEQ      |L5.96|
000040  490d              LDR      r1,|L5.120|
000042  3114              ADDS     r1,r1,#0x14
000044  428c              CMP      r4,r1
000046  d00b              BEQ      |L5.96|
000048  490b              LDR      r1,|L5.120|
00004a  3128              ADDS     r1,r1,#0x28
00004c  428c              CMP      r4,r1
00004e  d007              BEQ      |L5.96|
000050  4909              LDR      r1,|L5.120|
000052  313c              ADDS     r1,r1,#0x3c
000054  428c              CMP      r4,r1
000056  d003              BEQ      |L5.96|
000058  4907              LDR      r1,|L5.120|
00005a  3150              ADDS     r1,r1,#0x50
00005c  428c              CMP      r4,r1
00005e  d101              BNE      |L5.100|
                  |L5.96|
000060  2101              MOVS     r1,#1
000062  e000              B        |L5.102|
                  |L5.100|
000064  2100              MOVS     r1,#0
                  |L5.102|
000066  4608              MOV      r0,r1
000068  f7fffffe          BL       assert_param
;;;375      /* Return the number of remaining data units for DMAy Channelx */
;;;376      return ((uint16_t)(DMAy_Channelx->CNDTR));
00006c  6860              LDR      r0,[r4,#4]
00006e  b280              UXTH     r0,r0
;;;377    }
000070  bd10              POP      {r4,pc}
;;;378    
                          ENDP

000072  0000              DCW      0x0000
                  |L5.116|
                          DCD      0x40020008
                  |L5.120|
                          DCD      0x40020408

                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;432      */
;;;433    FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;434    {
000002  4604              MOV      r4,r0
;;;435      FlagStatus bitstatus = RESET;
000004  2500              MOVS     r5,#0
;;;436      uint32_t tmpreg = 0;
000006  2600              MOVS     r6,#0
;;;437      
;;;438      /* Check the parameters */
;;;439      assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
000008  2c01              CMP      r4,#1
00000a  d07d              BEQ      |L6.264|
00000c  2c02              CMP      r4,#2
00000e  d07b              BEQ      |L6.264|
000010  2c04              CMP      r4,#4
000012  d079              BEQ      |L6.264|
000014  2c08              CMP      r4,#8
000016  d077              BEQ      |L6.264|
000018  2c10              CMP      r4,#0x10
00001a  d075              BEQ      |L6.264|
00001c  2c20              CMP      r4,#0x20
00001e  d073              BEQ      |L6.264|
000020  2c40              CMP      r4,#0x40
000022  d071              BEQ      |L6.264|
000024  2c80              CMP      r4,#0x80
000026  d07f              BEQ      |L6.296|
000028  f5b47f80          CMP      r4,#0x100
00002c  d07c              BEQ      |L6.296|
00002e  f5b47f00          CMP      r4,#0x200
000032  d079              BEQ      |L6.296|
000034  f5b46f80          CMP      r4,#0x400
000038  d076              BEQ      |L6.296|
00003a  f5b46f00          CMP      r4,#0x800
00003e  d073              BEQ      |L6.296|
000040  f5b45f80          CMP      r4,#0x1000
000044  d070              BEQ      |L6.296|
000046  f5b45f00          CMP      r4,#0x2000
00004a  d06d              BEQ      |L6.296|
00004c  f5b44f80          CMP      r4,#0x4000
000050  d06a              BEQ      |L6.296|
000052  f5b44f00          CMP      r4,#0x8000
000056  d067              BEQ      |L6.296|
000058  f5b43f80          CMP      r4,#0x10000
00005c  d064              BEQ      |L6.296|
00005e  f5b43f00          CMP      r4,#0x20000
000062  d061              BEQ      |L6.296|
000064  f5b42f80          CMP      r4,#0x40000
000068  d05e              BEQ      |L6.296|
00006a  f5b42f00          CMP      r4,#0x80000
00006e  d05b              BEQ      |L6.296|
000070  f5b41f80          CMP      r4,#0x100000
000074  d058              BEQ      |L6.296|
000076  f5b41f00          CMP      r4,#0x200000
00007a  d055              BEQ      |L6.296|
00007c  f5b40f80          CMP      r4,#0x400000
000080  d052              BEQ      |L6.296|
000082  f5b40f00          CMP      r4,#0x800000
000086  d04f              BEQ      |L6.296|
000088  f1b47f80          CMP      r4,#0x1000000
00008c  d04c              BEQ      |L6.296|
00008e  f1b47f00          CMP      r4,#0x2000000
000092  d049              BEQ      |L6.296|
000094  f1b46f80          CMP      r4,#0x4000000
000098  d046              BEQ      |L6.296|
00009a  f1b46f00          CMP      r4,#0x8000000
00009e  d043              BEQ      |L6.296|
0000a0  492c              LDR      r1,|L6.340|
0000a2  428c              CMP      r4,r1
0000a4  d040              BEQ      |L6.296|
0000a6  1c49              ADDS     r1,r1,#1
0000a8  428c              CMP      r4,r1
0000aa  d03d              BEQ      |L6.296|
0000ac  1c89              ADDS     r1,r1,#2
0000ae  428c              CMP      r4,r1
0000b0  d03a              BEQ      |L6.296|
0000b2  1d09              ADDS     r1,r1,#4
0000b4  428c              CMP      r4,r1
0000b6  d037              BEQ      |L6.296|
0000b8  4926              LDR      r1,|L6.340|
0000ba  310f              ADDS     r1,r1,#0xf
0000bc  428c              CMP      r4,r1
0000be  d033              BEQ      |L6.296|
0000c0  4924              LDR      r1,|L6.340|
0000c2  311f              ADDS     r1,r1,#0x1f
0000c4  428c              CMP      r4,r1
0000c6  d02f              BEQ      |L6.296|
0000c8  4922              LDR      r1,|L6.340|
0000ca  313f              ADDS     r1,r1,#0x3f
0000cc  428c              CMP      r4,r1
0000ce  d02b              BEQ      |L6.296|
0000d0  4920              LDR      r1,|L6.340|
0000d2  317f              ADDS     r1,r1,#0x7f
0000d4  428c              CMP      r4,r1
0000d6  d027              BEQ      |L6.296|
0000d8  491e              LDR      r1,|L6.340|
0000da  31ff              ADDS     r1,r1,#0xff
0000dc  428c              CMP      r4,r1
0000de  d023              BEQ      |L6.296|
0000e0  491d              LDR      r1,|L6.344|
0000e2  428c              CMP      r4,r1
0000e4  d020              BEQ      |L6.296|
0000e6  491d              LDR      r1,|L6.348|
0000e8  428c              CMP      r4,r1
0000ea  d01d              BEQ      |L6.296|
0000ec  491c              LDR      r1,|L6.352|
0000ee  428c              CMP      r4,r1
0000f0  d01a              BEQ      |L6.296|
0000f2  f1b42f10          CMP      r4,#0x10001000
0000f6  d017              BEQ      |L6.296|
0000f8  ea4f31f1          ROR      r1,r1,#15
0000fc  428c              CMP      r4,r1
0000fe  d013              BEQ      |L6.296|
000100  4918              LDR      r1,|L6.356|
000102  428c              CMP      r4,r1
000104  d010              BEQ      |L6.296|
000106  e000              B        |L6.266|
                  |L6.264|
000108  e00e              B        |L6.296|
                  |L6.266|
00010a  4917              LDR      r1,|L6.360|
00010c  428c              CMP      r4,r1
00010e  d00b              BEQ      |L6.296|
000110  4916              LDR      r1,|L6.364|
000112  428c              CMP      r4,r1
000114  d008              BEQ      |L6.296|
000116  4916              LDR      r1,|L6.368|
000118  428c              CMP      r4,r1
00011a  d005              BEQ      |L6.296|
00011c  4915              LDR      r1,|L6.372|
00011e  428c              CMP      r4,r1
000120  d002              BEQ      |L6.296|
000122  4915              LDR      r1,|L6.376|
000124  428c              CMP      r4,r1
000126  d101              BNE      |L6.300|
                  |L6.296|
000128  2101              MOVS     r1,#1
00012a  e000              B        |L6.302|
                  |L6.300|
00012c  2100              MOVS     r1,#0
                  |L6.302|
00012e  4608              MOV      r0,r1
000130  f7fffffe          BL       assert_param
;;;440    
;;;441      /* Calculate the used DMAy */
;;;442      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
000134  f0045080          AND      r0,r4,#0x10000000
000138  b110              CBZ      r0,|L6.320|
;;;443      {
;;;444        /* Get DMA2 ISR register value */
;;;445        tmpreg = DMA2->ISR ;
00013a  4810              LDR      r0,|L6.380|
00013c  6806              LDR      r6,[r0,#0]
00013e  e001              B        |L6.324|
                  |L6.320|
;;;446      }
;;;447      else
;;;448      {
;;;449        /* Get DMA1 ISR register value */
;;;450        tmpreg = DMA1->ISR ;
000140  480f              LDR      r0,|L6.384|
000142  6806              LDR      r6,[r0,#0]
                  |L6.324|
;;;451      }
;;;452    
;;;453      /* Check the status of the specified DMAy flag */
;;;454      if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
000144  ea060004          AND      r0,r6,r4
000148  b108              CBZ      r0,|L6.334|
;;;455      {
;;;456        /* DMAy_FLAG is set */
;;;457        bitstatus = SET;
00014a  2501              MOVS     r5,#1
00014c  e000              B        |L6.336|
                  |L6.334|
;;;458      }
;;;459      else
;;;460      {
;;;461        /* DMAy_FLAG is reset */
;;;462        bitstatus = RESET;
00014e  2500              MOVS     r5,#0
                  |L6.336|
;;;463      }
;;;464      
;;;465      /* Return the DMAy_FLAG status */
;;;466      return  bitstatus;
000150  4628              MOV      r0,r5
;;;467    }
000152  bd70              POP      {r4-r6,pc}
;;;468    
                          ENDP

                  |L6.340|
                          DCD      0x10000001
                  |L6.344|
                          DCD      0x10000200
                  |L6.348|
                          DCD      0x10000400
                  |L6.352|
                          DCD      0x10000800
                  |L6.356|
                          DCD      0x10004000
                  |L6.360|
                          DCD      0x10008000
                  |L6.364|
                          DCD      0x10010000
                  |L6.368|
                          DCD      0x10020000
                  |L6.372|
                          DCD      0x10040000
                  |L6.376|
                          DCD      0x10080000
                  |L6.380|
                          DCD      0x40020400
                  |L6.384|
                          DCD      0x40020000

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;594      */
;;;595    ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;596    {
000002  4604              MOV      r4,r0
;;;597      ITStatus bitstatus = RESET;
000004  2500              MOVS     r5,#0
;;;598      uint32_t tmpreg = 0;
000006  2600              MOVS     r6,#0
;;;599    
;;;600      /* Check the parameters */
;;;601      assert_param(IS_DMA_GET_IT(DMAy_IT));
000008  2c01              CMP      r4,#1
00000a  d07d              BEQ      |L7.264|
00000c  2c02              CMP      r4,#2
00000e  d07b              BEQ      |L7.264|
000010  2c04              CMP      r4,#4
000012  d079              BEQ      |L7.264|
000014  2c08              CMP      r4,#8
000016  d077              BEQ      |L7.264|
000018  2c10              CMP      r4,#0x10
00001a  d075              BEQ      |L7.264|
00001c  2c20              CMP      r4,#0x20
00001e  d073              BEQ      |L7.264|
000020  2c40              CMP      r4,#0x40
000022  d071              BEQ      |L7.264|
000024  2c80              CMP      r4,#0x80
000026  d07f              BEQ      |L7.296|
000028  f5b47f80          CMP      r4,#0x100
00002c  d07c              BEQ      |L7.296|
00002e  f5b47f00          CMP      r4,#0x200
000032  d079              BEQ      |L7.296|
000034  f5b46f80          CMP      r4,#0x400
000038  d076              BEQ      |L7.296|
00003a  f5b46f00          CMP      r4,#0x800
00003e  d073              BEQ      |L7.296|
000040  f5b45f80          CMP      r4,#0x1000
000044  d070              BEQ      |L7.296|
000046  f5b45f00          CMP      r4,#0x2000
00004a  d06d              BEQ      |L7.296|
00004c  f5b44f80          CMP      r4,#0x4000
000050  d06a              BEQ      |L7.296|
000052  f5b44f00          CMP      r4,#0x8000
000056  d067              BEQ      |L7.296|
000058  f5b43f80          CMP      r4,#0x10000
00005c  d064              BEQ      |L7.296|
00005e  f5b43f00          CMP      r4,#0x20000
000062  d061              BEQ      |L7.296|
000064  f5b42f80          CMP      r4,#0x40000
000068  d05e              BEQ      |L7.296|
00006a  f5b42f00          CMP      r4,#0x80000
00006e  d05b              BEQ      |L7.296|
000070  f5b41f80          CMP      r4,#0x100000
000074  d058              BEQ      |L7.296|
000076  f5b41f00          CMP      r4,#0x200000
00007a  d055              BEQ      |L7.296|
00007c  f5b40f80          CMP      r4,#0x400000
000080  d052              BEQ      |L7.296|
000082  f5b40f00          CMP      r4,#0x800000
000086  d04f              BEQ      |L7.296|
000088  f1b47f80          CMP      r4,#0x1000000
00008c  d04c              BEQ      |L7.296|
00008e  f1b47f00          CMP      r4,#0x2000000
000092  d049              BEQ      |L7.296|
000094  f1b46f80          CMP      r4,#0x4000000
000098  d046              BEQ      |L7.296|
00009a  f1b46f00          CMP      r4,#0x8000000
00009e  d043              BEQ      |L7.296|
0000a0  492c              LDR      r1,|L7.340|
0000a2  428c              CMP      r4,r1
0000a4  d040              BEQ      |L7.296|
0000a6  1c49              ADDS     r1,r1,#1
0000a8  428c              CMP      r4,r1
0000aa  d03d              BEQ      |L7.296|
0000ac  1c89              ADDS     r1,r1,#2
0000ae  428c              CMP      r4,r1
0000b0  d03a              BEQ      |L7.296|
0000b2  1d09              ADDS     r1,r1,#4
0000b4  428c              CMP      r4,r1
0000b6  d037              BEQ      |L7.296|
0000b8  4926              LDR      r1,|L7.340|
0000ba  310f              ADDS     r1,r1,#0xf
0000bc  428c              CMP      r4,r1
0000be  d033              BEQ      |L7.296|
0000c0  4924              LDR      r1,|L7.340|
0000c2  311f              ADDS     r1,r1,#0x1f
0000c4  428c              CMP      r4,r1
0000c6  d02f              BEQ      |L7.296|
0000c8  4922              LDR      r1,|L7.340|
0000ca  313f              ADDS     r1,r1,#0x3f
0000cc  428c              CMP      r4,r1
0000ce  d02b              BEQ      |L7.296|
0000d0  4920              LDR      r1,|L7.340|
0000d2  317f              ADDS     r1,r1,#0x7f
0000d4  428c              CMP      r4,r1
0000d6  d027              BEQ      |L7.296|
0000d8  491e              LDR      r1,|L7.340|
0000da  31ff              ADDS     r1,r1,#0xff
0000dc  428c              CMP      r4,r1
0000de  d023              BEQ      |L7.296|
0000e0  491d              LDR      r1,|L7.344|
0000e2  428c              CMP      r4,r1
0000e4  d020              BEQ      |L7.296|
0000e6  491d              LDR      r1,|L7.348|
0000e8  428c              CMP      r4,r1
0000ea  d01d              BEQ      |L7.296|
0000ec  491c              LDR      r1,|L7.352|
0000ee  428c              CMP      r4,r1
0000f0  d01a              BEQ      |L7.296|
0000f2  f1b42f10          CMP      r4,#0x10001000
0000f6  d017              BEQ      |L7.296|
0000f8  ea4f31f1          ROR      r1,r1,#15
0000fc  428c              CMP      r4,r1
0000fe  d013              BEQ      |L7.296|
000100  4918              LDR      r1,|L7.356|
000102  428c              CMP      r4,r1
000104  d010              BEQ      |L7.296|
000106  e000              B        |L7.266|
                  |L7.264|
000108  e00e              B        |L7.296|
                  |L7.266|
00010a  4917              LDR      r1,|L7.360|
00010c  428c              CMP      r4,r1
00010e  d00b              BEQ      |L7.296|
000110  4916              LDR      r1,|L7.364|
000112  428c              CMP      r4,r1
000114  d008              BEQ      |L7.296|
000116  4916              LDR      r1,|L7.368|
000118  428c              CMP      r4,r1
00011a  d005              BEQ      |L7.296|
00011c  4915              LDR      r1,|L7.372|
00011e  428c              CMP      r4,r1
000120  d002              BEQ      |L7.296|
000122  4915              LDR      r1,|L7.376|
000124  428c              CMP      r4,r1
000126  d101              BNE      |L7.300|
                  |L7.296|
000128  2101              MOVS     r1,#1
00012a  e000              B        |L7.302|
                  |L7.300|
00012c  2100              MOVS     r1,#0
                  |L7.302|
00012e  4608              MOV      r0,r1
000130  f7fffffe          BL       assert_param
;;;602    
;;;603      /* Calculate the used DMA */
;;;604      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
000134  f0045080          AND      r0,r4,#0x10000000
000138  b110              CBZ      r0,|L7.320|
;;;605      {
;;;606        /* Get DMA2 ISR register value */
;;;607        tmpreg = DMA2->ISR;
00013a  4810              LDR      r0,|L7.380|
00013c  6806              LDR      r6,[r0,#0]
00013e  e001              B        |L7.324|
                  |L7.320|
;;;608      }
;;;609      else
;;;610      {
;;;611        /* Get DMA1 ISR register value */
;;;612        tmpreg = DMA1->ISR;
000140  480f              LDR      r0,|L7.384|
000142  6806              LDR      r6,[r0,#0]
                  |L7.324|
;;;613      }
;;;614    
;;;615      /* Check the status of the specified DMAy interrupt */
;;;616      if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
000144  ea060004          AND      r0,r6,r4
000148  b108              CBZ      r0,|L7.334|
;;;617      {
;;;618        /* DMAy_IT is set */
;;;619        bitstatus = SET;
00014a  2501              MOVS     r5,#1
00014c  e000              B        |L7.336|
                  |L7.334|
;;;620      }
;;;621      else
;;;622      {
;;;623        /* DMAy_IT is reset */
;;;624        bitstatus = RESET;
00014e  2500              MOVS     r5,#0
                  |L7.336|
;;;625      }
;;;626      /* Return the DMA_IT status */
;;;627      return  bitstatus;
000150  4628              MOV      r0,r5
;;;628    }
000152  bd70              POP      {r4-r6,pc}
;;;629    
                          ENDP

                  |L7.340|
                          DCD      0x10000001
                  |L7.344|
                          DCD      0x10000200
                  |L7.348|
                          DCD      0x10000400
                  |L7.352|
                          DCD      0x10000800
                  |L7.356|
                          DCD      0x10004000
                  |L7.360|
                          DCD      0x10008000
                  |L7.364|
                          DCD      0x10010000
                  |L7.368|
                          DCD      0x10020000
                  |L7.372|
                          DCD      0x10040000
                  |L7.376|
                          DCD      0x10080000
                  |L7.380|
                          DCD      0x40020400
                  |L7.384|
                          DCD      0x40020000

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=2

                  DMA_ITConfig PROC
;;;325      */
;;;326    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;327    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;328      /* Check the parameters */
;;;329      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000008  4927              LDR      r1,|L8.168|
00000a  428c              CMP      r4,r1
00000c  d02a              BEQ      |L8.100|
00000e  4926              LDR      r1,|L8.168|
000010  3114              ADDS     r1,r1,#0x14
000012  428c              CMP      r4,r1
000014  d026              BEQ      |L8.100|
000016  4924              LDR      r1,|L8.168|
000018  3128              ADDS     r1,r1,#0x28
00001a  428c              CMP      r4,r1
00001c  d022              BEQ      |L8.100|
00001e  4922              LDR      r1,|L8.168|
000020  313c              ADDS     r1,r1,#0x3c
000022  428c              CMP      r4,r1
000024  d01e              BEQ      |L8.100|
000026  4920              LDR      r1,|L8.168|
000028  3150              ADDS     r1,r1,#0x50
00002a  428c              CMP      r4,r1
00002c  d01a              BEQ      |L8.100|
00002e  491e              LDR      r1,|L8.168|
000030  3164              ADDS     r1,r1,#0x64
000032  428c              CMP      r4,r1
000034  d016              BEQ      |L8.100|
000036  491c              LDR      r1,|L8.168|
000038  3178              ADDS     r1,r1,#0x78
00003a  428c              CMP      r4,r1
00003c  d012              BEQ      |L8.100|
00003e  491b              LDR      r1,|L8.172|
000040  428c              CMP      r4,r1
000042  d00f              BEQ      |L8.100|
000044  4919              LDR      r1,|L8.172|
000046  3114              ADDS     r1,r1,#0x14
000048  428c              CMP      r4,r1
00004a  d00b              BEQ      |L8.100|
00004c  4917              LDR      r1,|L8.172|
00004e  3128              ADDS     r1,r1,#0x28
000050  428c              CMP      r4,r1
000052  d007              BEQ      |L8.100|
000054  4915              LDR      r1,|L8.172|
000056  313c              ADDS     r1,r1,#0x3c
000058  428c              CMP      r4,r1
00005a  d003              BEQ      |L8.100|
00005c  4913              LDR      r1,|L8.172|
00005e  3150              ADDS     r1,r1,#0x50
000060  428c              CMP      r4,r1
000062  d101              BNE      |L8.104|
                  |L8.100|
000064  2101              MOVS     r1,#1
000066  e000              B        |L8.106|
                  |L8.104|
000068  2100              MOVS     r1,#0
                  |L8.106|
00006a  4608              MOV      r0,r1
00006c  f7fffffe          BL       assert_param
;;;330      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
000070  f025010e          BIC      r1,r5,#0xe
000074  b911              CBNZ     r1,|L8.124|
000076  b10d              CBZ      r5,|L8.124|
000078  2101              MOVS     r1,#1
00007a  e000              B        |L8.126|
                  |L8.124|
00007c  2100              MOVS     r1,#0
                  |L8.126|
00007e  4608              MOV      r0,r1
000080  f7fffffe          BL       assert_param
;;;331      assert_param(IS_FUNCTIONAL_STATE(NewState));
000084  b10e              CBZ      r6,|L8.138|
000086  2e01              CMP      r6,#1
000088  d101              BNE      |L8.142|
                  |L8.138|
00008a  2101              MOVS     r1,#1
00008c  e000              B        |L8.144|
                  |L8.142|
00008e  2100              MOVS     r1,#0
                  |L8.144|
000090  4608              MOV      r0,r1
000092  f7fffffe          BL       assert_param
;;;332      if (NewState != DISABLE)
000096  b11e              CBZ      r6,|L8.160|
;;;333      {
;;;334        /* Enable the selected DMA interrupts */
;;;335        DMAy_Channelx->CCR |= DMA_IT;
000098  6820              LDR      r0,[r4,#0]
00009a  4328              ORRS     r0,r0,r5
00009c  6020              STR      r0,[r4,#0]
00009e  e002              B        |L8.166|
                  |L8.160|
;;;336      }
;;;337      else
;;;338      {
;;;339        /* Disable the selected DMA interrupts */
;;;340        DMAy_Channelx->CCR &= ~DMA_IT;
0000a0  6820              LDR      r0,[r4,#0]
0000a2  43a8              BICS     r0,r0,r5
0000a4  6020              STR      r0,[r4,#0]
                  |L8.166|
;;;341      }
;;;342    }
0000a6  bd70              POP      {r4-r6,pc}
;;;343    
                          ENDP

                  |L8.168|
                          DCD      0x40020008
                  |L8.172|
                          DCD      0x40020408

                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=2

                  DMA_Init PROC
;;;201      */
;;;202    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;203    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;204      uint32_t tmpreg = 0;
000006  2600              MOVS     r6,#0
;;;205    
;;;206      /* Check the parameters */
;;;207      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000008  4963              LDR      r1,|L9.408|
00000a  428d              CMP      r5,r1
00000c  d02a              BEQ      |L9.100|
00000e  4962              LDR      r1,|L9.408|
000010  3114              ADDS     r1,r1,#0x14
000012  428d              CMP      r5,r1
000014  d026              BEQ      |L9.100|
000016  4960              LDR      r1,|L9.408|
000018  3128              ADDS     r1,r1,#0x28
00001a  428d              CMP      r5,r1
00001c  d022              BEQ      |L9.100|
00001e  495e              LDR      r1,|L9.408|
000020  313c              ADDS     r1,r1,#0x3c
000022  428d              CMP      r5,r1
000024  d01e              BEQ      |L9.100|
000026  495c              LDR      r1,|L9.408|
000028  3150              ADDS     r1,r1,#0x50
00002a  428d              CMP      r5,r1
00002c  d01a              BEQ      |L9.100|
00002e  495a              LDR      r1,|L9.408|
000030  3164              ADDS     r1,r1,#0x64
000032  428d              CMP      r5,r1
000034  d016              BEQ      |L9.100|
000036  4958              LDR      r1,|L9.408|
000038  3178              ADDS     r1,r1,#0x78
00003a  428d              CMP      r5,r1
00003c  d012              BEQ      |L9.100|
00003e  4957              LDR      r1,|L9.412|
000040  428d              CMP      r5,r1
000042  d00f              BEQ      |L9.100|
000044  4955              LDR      r1,|L9.412|
000046  3114              ADDS     r1,r1,#0x14
000048  428d              CMP      r5,r1
00004a  d00b              BEQ      |L9.100|
00004c  4953              LDR      r1,|L9.412|
00004e  3128              ADDS     r1,r1,#0x28
000050  428d              CMP      r5,r1
000052  d007              BEQ      |L9.100|
000054  4951              LDR      r1,|L9.412|
000056  313c              ADDS     r1,r1,#0x3c
000058  428d              CMP      r5,r1
00005a  d003              BEQ      |L9.100|
00005c  494f              LDR      r1,|L9.412|
00005e  3150              ADDS     r1,r1,#0x50
000060  428d              CMP      r5,r1
000062  d101              BNE      |L9.104|
                  |L9.100|
000064  2101              MOVS     r1,#1
000066  e000              B        |L9.106|
                  |L9.104|
000068  2100              MOVS     r1,#0
                  |L9.106|
00006a  4608              MOV      r0,r1
00006c  f7fffffe          BL       assert_param
;;;208      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
000070  68a1              LDR      r1,[r4,#8]
000072  2910              CMP      r1,#0x10
000074  d001              BEQ      |L9.122|
000076  68a1              LDR      r1,[r4,#8]
000078  b909              CBNZ     r1,|L9.126|
                  |L9.122|
00007a  2101              MOVS     r1,#1
00007c  e000              B        |L9.128|
                  |L9.126|
00007e  2100              MOVS     r1,#0
                  |L9.128|
000080  4608              MOV      r0,r1
000082  f7fffffe          BL       assert_param
;;;209      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
000086  68e1              LDR      r1,[r4,#0xc]
000088  b129              CBZ      r1,|L9.150|
00008a  68e1              LDR      r1,[r4,#0xc]
00008c  f5b13f80          CMP      r1,#0x10000
000090  d201              BCS      |L9.150|
000092  2101              MOVS     r1,#1
000094  e000              B        |L9.152|
                  |L9.150|
000096  2100              MOVS     r1,#0
                  |L9.152|
000098  4608              MOV      r0,r1
00009a  f7fffffe          BL       assert_param
;;;210      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
00009e  6921              LDR      r1,[r4,#0x10]
0000a0  2940              CMP      r1,#0x40
0000a2  d001              BEQ      |L9.168|
0000a4  6921              LDR      r1,[r4,#0x10]
0000a6  b909              CBNZ     r1,|L9.172|
                  |L9.168|
0000a8  2101              MOVS     r1,#1
0000aa  e000              B        |L9.174|
                  |L9.172|
0000ac  2100              MOVS     r1,#0
                  |L9.174|
0000ae  4608              MOV      r0,r1
0000b0  f7fffffe          BL       assert_param
;;;211      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
0000b4  6961              LDR      r1,[r4,#0x14]
0000b6  2980              CMP      r1,#0x80
0000b8  d001              BEQ      |L9.190|
0000ba  6961              LDR      r1,[r4,#0x14]
0000bc  b909              CBNZ     r1,|L9.194|
                  |L9.190|
0000be  2101              MOVS     r1,#1
0000c0  e000              B        |L9.196|
                  |L9.194|
0000c2  2100              MOVS     r1,#0
                  |L9.196|
0000c4  4608              MOV      r0,r1
0000c6  f7fffffe          BL       assert_param
;;;212      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
0000ca  69a1              LDR      r1,[r4,#0x18]
0000cc  b139              CBZ      r1,|L9.222|
0000ce  69a1              LDR      r1,[r4,#0x18]
0000d0  f5b17f80          CMP      r1,#0x100
0000d4  d003              BEQ      |L9.222|
0000d6  69a1              LDR      r1,[r4,#0x18]
0000d8  f5b17f00          CMP      r1,#0x200
0000dc  d101              BNE      |L9.226|
                  |L9.222|
0000de  2101              MOVS     r1,#1
0000e0  e000              B        |L9.228|
                  |L9.226|
0000e2  2100              MOVS     r1,#0
                  |L9.228|
0000e4  4608              MOV      r0,r1
0000e6  f7fffffe          BL       assert_param
;;;213      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
0000ea  69e1              LDR      r1,[r4,#0x1c]
0000ec  b139              CBZ      r1,|L9.254|
0000ee  69e1              LDR      r1,[r4,#0x1c]
0000f0  f5b16f80          CMP      r1,#0x400
0000f4  d003              BEQ      |L9.254|
0000f6  69e1              LDR      r1,[r4,#0x1c]
0000f8  f5b16f00          CMP      r1,#0x800
0000fc  d101              BNE      |L9.258|
                  |L9.254|
0000fe  2101              MOVS     r1,#1
000100  e000              B        |L9.260|
                  |L9.258|
000102  2100              MOVS     r1,#0
                  |L9.260|
000104  4608              MOV      r0,r1
000106  f7fffffe          BL       assert_param
;;;214      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
00010a  6a21              LDR      r1,[r4,#0x20]
00010c  2920              CMP      r1,#0x20
00010e  d001              BEQ      |L9.276|
000110  6a21              LDR      r1,[r4,#0x20]
000112  b909              CBNZ     r1,|L9.280|
                  |L9.276|
000114  2101              MOVS     r1,#1
000116  e000              B        |L9.282|
                  |L9.280|
000118  2100              MOVS     r1,#0
                  |L9.282|
00011a  4608              MOV      r0,r1
00011c  f7fffffe          BL       assert_param
;;;215      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
000120  6a61              LDR      r1,[r4,#0x24]
000122  f5b15f40          CMP      r1,#0x3000
000126  d009              BEQ      |L9.316|
000128  6a61              LDR      r1,[r4,#0x24]
00012a  f5b15f00          CMP      r1,#0x2000
00012e  d005              BEQ      |L9.316|
000130  6a61              LDR      r1,[r4,#0x24]
000132  f5b15f80          CMP      r1,#0x1000
000136  d001              BEQ      |L9.316|
000138  6a61              LDR      r1,[r4,#0x24]
00013a  b909              CBNZ     r1,|L9.320|
                  |L9.316|
00013c  2101              MOVS     r1,#1
00013e  e000              B        |L9.322|
                  |L9.320|
000140  2100              MOVS     r1,#0
                  |L9.322|
000142  4608              MOV      r0,r1
000144  f7fffffe          BL       assert_param
;;;216      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
000148  6aa1              LDR      r1,[r4,#0x28]
00014a  f5b14f80          CMP      r1,#0x4000
00014e  d001              BEQ      |L9.340|
000150  6aa1              LDR      r1,[r4,#0x28]
000152  b909              CBNZ     r1,|L9.344|
                  |L9.340|
000154  2101              MOVS     r1,#1
000156  e000              B        |L9.346|
                  |L9.344|
000158  2100              MOVS     r1,#0
                  |L9.346|
00015a  4608              MOV      r0,r1
00015c  f7fffffe          BL       assert_param
;;;217    
;;;218    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;219      /* Get the DMAy_Channelx CCR value */
;;;220      tmpreg = DMAy_Channelx->CCR;
000160  682e              LDR      r6,[r5,#0]
;;;221      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;222      tmpreg &= CCR_CLEAR_Mask;
000162  f64770f0          MOV      r0,#0x7ff0
000166  4386              BICS     r6,r6,r0
;;;223      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;224      /* Set DIR bit according to DMA_DIR value */
;;;225      /* Set CIRC bit according to DMA_Mode value */
;;;226      /* Set PINC bit according to DMA_PeripheralInc value */
;;;227      /* Set MINC bit according to DMA_MemoryInc value */
;;;228      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;229      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;230      /* Set PL bits according to DMA_Priority value */
;;;231      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;232      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
000168  6a21              LDR      r1,[r4,#0x20]
00016a  68a0              LDR      r0,[r4,#8]
00016c  4308              ORRS     r0,r0,r1
00016e  6921              LDR      r1,[r4,#0x10]
000170  4308              ORRS     r0,r0,r1
000172  6961              LDR      r1,[r4,#0x14]
000174  4308              ORRS     r0,r0,r1
000176  69a1              LDR      r1,[r4,#0x18]
000178  4308              ORRS     r0,r0,r1
00017a  69e1              LDR      r1,[r4,#0x1c]
00017c  4308              ORRS     r0,r0,r1
00017e  6a61              LDR      r1,[r4,#0x24]
000180  4308              ORRS     r0,r0,r1
000182  6aa1              LDR      r1,[r4,#0x28]
000184  4308              ORRS     r0,r0,r1
000186  4306              ORRS     r6,r6,r0
;;;233                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;234                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;235                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;236    
;;;237      /* Write to DMAy Channelx CCR */
;;;238      DMAy_Channelx->CCR = tmpreg;
000188  602e              STR      r6,[r5,#0]
;;;239    
;;;240    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;241      /* Write to DMAy Channelx CNDTR */
;;;242      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00018a  68e0              LDR      r0,[r4,#0xc]
00018c  6068              STR      r0,[r5,#4]
;;;243    
;;;244    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;245      /* Write to DMAy Channelx CPAR */
;;;246      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
00018e  6820              LDR      r0,[r4,#0]
000190  60a8              STR      r0,[r5,#8]
;;;247    
;;;248    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;249      /* Write to DMAy Channelx CMAR */
;;;250      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000192  6860              LDR      r0,[r4,#4]
000194  60e8              STR      r0,[r5,#0xc]
;;;251    }
000196  bd70              POP      {r4-r6,pc}
;;;252    
                          ENDP

                  |L9.408|
                          DCD      0x40020008
                  |L9.412|
                          DCD      0x40020408

                          AREA ||i.DMA_SetCurrDataCounter||, CODE, READONLY, ALIGN=2

                  DMA_SetCurrDataCounter PROC
;;;352      */
;;;353    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
000000  b570              PUSH     {r4-r6,lr}
;;;354    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;355      /* Check the parameters */
;;;356      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000006  491b              LDR      r1,|L10.116|
000008  428c              CMP      r4,r1
00000a  d02a              BEQ      |L10.98|
00000c  4919              LDR      r1,|L10.116|
00000e  3114              ADDS     r1,r1,#0x14
000010  428c              CMP      r4,r1
000012  d026              BEQ      |L10.98|
000014  4917              LDR      r1,|L10.116|
000016  3128              ADDS     r1,r1,#0x28
000018  428c              CMP      r4,r1
00001a  d022              BEQ      |L10.98|
00001c  4915              LDR      r1,|L10.116|
00001e  313c              ADDS     r1,r1,#0x3c
000020  428c              CMP      r4,r1
000022  d01e              BEQ      |L10.98|
000024  4913              LDR      r1,|L10.116|
000026  3150              ADDS     r1,r1,#0x50
000028  428c              CMP      r4,r1
00002a  d01a              BEQ      |L10.98|
00002c  4911              LDR      r1,|L10.116|
00002e  3164              ADDS     r1,r1,#0x64
000030  428c              CMP      r4,r1
000032  d016              BEQ      |L10.98|
000034  490f              LDR      r1,|L10.116|
000036  3178              ADDS     r1,r1,#0x78
000038  428c              CMP      r4,r1
00003a  d012              BEQ      |L10.98|
00003c  490e              LDR      r1,|L10.120|
00003e  428c              CMP      r4,r1
000040  d00f              BEQ      |L10.98|
000042  490d              LDR      r1,|L10.120|
000044  3114              ADDS     r1,r1,#0x14
000046  428c              CMP      r4,r1
000048  d00b              BEQ      |L10.98|
00004a  490b              LDR      r1,|L10.120|
00004c  3128              ADDS     r1,r1,#0x28
00004e  428c              CMP      r4,r1
000050  d007              BEQ      |L10.98|
000052  4909              LDR      r1,|L10.120|
000054  313c              ADDS     r1,r1,#0x3c
000056  428c              CMP      r4,r1
000058  d003              BEQ      |L10.98|
00005a  4907              LDR      r1,|L10.120|
00005c  3150              ADDS     r1,r1,#0x50
00005e  428c              CMP      r4,r1
000060  d101              BNE      |L10.102|
                  |L10.98|
000062  2101              MOVS     r1,#1
000064  e000              B        |L10.104|
                  |L10.102|
000066  2100              MOVS     r1,#0
                  |L10.104|
000068  4608              MOV      r0,r1
00006a  f7fffffe          BL       assert_param
;;;357      
;;;358    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;359      /* Write to DMAy Channelx CNDTR */
;;;360      DMAy_Channelx->CNDTR = DataNumber;  
00006e  6065              STR      r5,[r4,#4]
;;;361    }
000070  bd70              POP      {r4-r6,pc}
;;;362    
                          ENDP

000072  0000              DCW      0x0000
                  |L10.116|
                          DCD      0x40020008
                  |L10.120|
                          DCD      0x40020408

                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;258      */
;;;259    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;260    {
;;;261    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;262      /* Initialize the DMA_PeripheralBaseAddr member */
;;;263      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;264      /* Initialize the DMA_MemoryBaseAddr member */
;;;265      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000004  6041              STR      r1,[r0,#4]
;;;266      /* Initialize the DMA_DIR member */
;;;267      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000006  6081              STR      r1,[r0,#8]
;;;268      /* Initialize the DMA_BufferSize member */
;;;269      DMA_InitStruct->DMA_BufferSize = 0;
000008  60c1              STR      r1,[r0,#0xc]
;;;270      /* Initialize the DMA_PeripheralInc member */
;;;271      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;272      /* Initialize the DMA_MemoryInc member */
;;;273      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000c  6141              STR      r1,[r0,#0x14]
;;;274      /* Initialize the DMA_PeripheralDataSize member */
;;;275      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;276      /* Initialize the DMA_MemoryDataSize member */
;;;277      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000010  61c1              STR      r1,[r0,#0x1c]
;;;278      /* Initialize the DMA_Mode member */
;;;279      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000012  6201              STR      r1,[r0,#0x20]
;;;280      /* Initialize the DMA_Priority member */
;;;281      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000014  6241              STR      r1,[r0,#0x24]
;;;282      /* Initialize the DMA_M2M member */
;;;283      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000016  6281              STR      r1,[r0,#0x28]
;;;284    }
000018  4770              BX       lr
;;;285    
                          ENDP

