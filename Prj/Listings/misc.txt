; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\misc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\misc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Board\inc -I..\Chip\Hal_lib\inc -I..\Chip\Startup\inc -I..\coremark -I..\Chip\CMSIS -I.\RTE\_CoreMark -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F10X_MD --omf_browse=.\objects\misc.crf ..\Chip\Hal_lib\misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;111      */
;;;112    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;113    {
000004  4604              MOV      r4,r0
;;;114      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
000006  2500              MOVS     r5,#0
000008  2700              MOVS     r7,#0
00000a  260f              MOVS     r6,#0xf
;;;115      
;;;116      /* Check the parameters */
;;;117      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
00000c  78e1              LDRB     r1,[r4,#3]
00000e  b111              CBZ      r1,|L1.22|
000010  78e1              LDRB     r1,[r4,#3]
000012  2901              CMP      r1,#1
000014  d101              BNE      |L1.26|
                  |L1.22|
000016  2101              MOVS     r1,#1
000018  e000              B        |L1.28|
                  |L1.26|
00001a  2100              MOVS     r1,#0
                  |L1.28|
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       assert_param
;;;118      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
000022  7861              LDRB     r1,[r4,#1]
000024  2910              CMP      r1,#0x10
000026  da01              BGE      |L1.44|
000028  2101              MOVS     r1,#1
00002a  e000              B        |L1.46|
                  |L1.44|
00002c  2100              MOVS     r1,#0
                  |L1.46|
00002e  4608              MOV      r0,r1
000030  f7fffffe          BL       assert_param
;;;119      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
000034  78a1              LDRB     r1,[r4,#2]
000036  2910              CMP      r1,#0x10
000038  da01              BGE      |L1.62|
00003a  2101              MOVS     r1,#1
00003c  e000              B        |L1.64|
                  |L1.62|
00003e  2100              MOVS     r1,#0
                  |L1.64|
000040  4608              MOV      r0,r1
000042  f7fffffe          BL       assert_param
;;;120        
;;;121      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000046  78e0              LDRB     r0,[r4,#3]
000048  b300              CBZ      r0,|L1.140|
;;;122      {
;;;123        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;124        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
00004a  4816              LDR      r0,|L1.164|
00004c  6800              LDR      r0,[r0,#0]
00004e  f40060e0          AND      r0,r0,#0x700
000052  f5c060e0          RSB      r0,r0,#0x700
000056  0a05              LSRS     r5,r0,#8
;;;125        tmppre = (0x4 - tmppriority);
000058  f1c50704          RSB      r7,r5,#4
;;;126        tmpsub = tmpsub >> tmppriority;
00005c  40ee              LSRS     r6,r6,r5
;;;127    
;;;128        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
00005e  7860              LDRB     r0,[r4,#1]
000060  fa00f507          LSL      r5,r0,r7
;;;129        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
000064  78a0              LDRB     r0,[r4,#2]
000066  4030              ANDS     r0,r0,r6
000068  4305              ORRS     r5,r5,r0
;;;130        tmppriority = tmppriority << 0x04;
00006a  012d              LSLS     r5,r5,#4
;;;131            
;;;132        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
00006c  480e              LDR      r0,|L1.168|
00006e  7822              LDRB     r2,[r4,#0]
000070  5485              STRB     r5,[r0,r2]
;;;133        
;;;134        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;135        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000072  7820              LDRB     r0,[r4,#0]
000074  f000011f          AND      r1,r0,#0x1f
000078  2001              MOVS     r0,#1
00007a  4088              LSLS     r0,r0,r1
00007c  7821              LDRB     r1,[r4,#0]
00007e  1149              ASRS     r1,r1,#5
000080  0089              LSLS     r1,r1,#2
000082  f10121e0          ADD      r1,r1,#0xe000e000
000086  f8c10100          STR      r0,[r1,#0x100]
00008a  e009              B        |L1.160|
                  |L1.140|
;;;136          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;137      }
;;;138      else
;;;139      {
;;;140        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;141        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
00008c  7820              LDRB     r0,[r4,#0]
00008e  f000011f          AND      r1,r0,#0x1f
000092  2001              MOVS     r0,#1
000094  4088              LSLS     r0,r0,r1
000096  4905              LDR      r1,|L1.172|
000098  7822              LDRB     r2,[r4,#0]
00009a  1152              ASRS     r2,r2,#5
00009c  f8410022          STR      r0,[r1,r2,LSL #2]
                  |L1.160|
;;;142          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;143      }
;;;144    }
0000a0  e8bd81f0          POP      {r4-r8,pc}
;;;145    
                          ENDP

                  |L1.164|
                          DCD      0xe000ed0c
                  |L1.168|
                          DCD      0xe000e400
                  |L1.172|
                          DCD      0xe000e180

                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;95       */
;;;96     void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  b510              PUSH     {r4,lr}
;;;97     {
000002  4604              MOV      r4,r0
;;;98       /* Check the parameters */
;;;99       assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
000004  f5b46fe0          CMP      r4,#0x700
000008  d00b              BEQ      |L2.34|
00000a  f5b46fc0          CMP      r4,#0x600
00000e  d008              BEQ      |L2.34|
000010  f5b46fa0          CMP      r4,#0x500
000014  d005              BEQ      |L2.34|
000016  f5b46f80          CMP      r4,#0x400
00001a  d002              BEQ      |L2.34|
00001c  f5b47f40          CMP      r4,#0x300
000020  d101              BNE      |L2.38|
                  |L2.34|
000022  2101              MOVS     r1,#1
000024  e000              B        |L2.40|
                  |L2.38|
000026  2100              MOVS     r1,#0
                  |L2.40|
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       assert_param
;;;100      
;;;101      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;102      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
00002e  4802              LDR      r0,|L2.56|
000030  4320              ORRS     r0,r0,r4
000032  4902              LDR      r1,|L2.60|
000034  6008              STR      r0,[r1,#0]
;;;103    }
000036  bd10              POP      {r4,pc}
;;;104    
                          ENDP

                  |L2.56|
                          DCD      0x05fa0000
                  |L2.60|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;155      */
;;;156    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000000  b570              PUSH     {r4-r6,lr}
;;;157    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;158      /* Check the parameters */
;;;159      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
000006  f1b45f00          CMP      r4,#0x20000000
00000a  d002              BEQ      |L3.18|
00000c  f1b46f00          CMP      r4,#0x8000000
000010  d101              BNE      |L3.22|
                  |L3.18|
000012  2101              MOVS     r1,#1
000014  e000              B        |L3.24|
                  |L3.22|
000016  2100              MOVS     r1,#0
                  |L3.24|
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       assert_param
;;;160      assert_param(IS_NVIC_OFFSET(Offset));  
00001e  4908              LDR      r1,|L3.64|
000020  428d              CMP      r5,r1
000022  d201              BCS      |L3.40|
000024  2101              MOVS     r1,#1
000026  e000              B        |L3.42|
                  |L3.40|
000028  2100              MOVS     r1,#0
                  |L3.42|
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       assert_param
;;;161       
;;;162      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000030  4904              LDR      r1,|L3.68|
000032  ea050001          AND      r0,r5,r1
000036  4320              ORRS     r0,r0,r4
000038  4903              LDR      r1,|L3.72|
00003a  6008              STR      r0,[r1,#0]
;;;163    }
00003c  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
                          DCD      0x000fffff
                  |L3.68|
                          DCD      0x1fffff80
                  |L3.72|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemLPConfig PROC
;;;174      */
;;;175    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;176    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;177      /* Check the parameters */
;;;178      assert_param(IS_NVIC_LP(LowPowerMode));
000006  2c10              CMP      r4,#0x10
000008  d003              BEQ      |L4.18|
00000a  2c04              CMP      r4,#4
00000c  d001              BEQ      |L4.18|
00000e  2c02              CMP      r4,#2
000010  d101              BNE      |L4.22|
                  |L4.18|
000012  2101              MOVS     r1,#1
000014  e000              B        |L4.24|
                  |L4.22|
000016  2100              MOVS     r1,#0
                  |L4.24|
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       assert_param
;;;179      assert_param(IS_FUNCTIONAL_STATE(NewState));  
00001e  b10d              CBZ      r5,|L4.36|
000020  2d01              CMP      r5,#1
000022  d101              BNE      |L4.40|
                  |L4.36|
000024  2101              MOVS     r1,#1
000026  e000              B        |L4.42|
                  |L4.40|
000028  2100              MOVS     r1,#0
                  |L4.42|
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       assert_param
;;;180      
;;;181      if (NewState != DISABLE)
000030  b12d              CBZ      r5,|L4.62|
;;;182      {
;;;183        SCB->SCR |= LowPowerMode;
000032  4806              LDR      r0,|L4.76|
000034  6800              LDR      r0,[r0,#0]
000036  4320              ORRS     r0,r0,r4
000038  4904              LDR      r1,|L4.76|
00003a  6008              STR      r0,[r1,#0]
00003c  e004              B        |L4.72|
                  |L4.62|
;;;184      }
;;;185      else
;;;186      {
;;;187        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
00003e  4803              LDR      r0,|L4.76|
000040  6800              LDR      r0,[r0,#0]
000042  43a0              BICS     r0,r0,r4
000044  4901              LDR      r1,|L4.76|
000046  6008              STR      r0,[r1,#0]
                  |L4.72|
;;;188      }
;;;189    }
000048  bd70              POP      {r4-r6,pc}
;;;190    
                          ENDP

00004a  0000              DCW      0x0000
                  |L4.76|
                          DCD      0xe000ed10

                          AREA ||i.SysTick_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  SysTick_CLKSourceConfig PROC
;;;198      */
;;;199    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  b510              PUSH     {r4,lr}
;;;200    {
000002  4604              MOV      r4,r0
;;;201      /* Check the parameters */
;;;202      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
000004  2c04              CMP      r4,#4
000006  d001              BEQ      |L5.12|
000008  1d61              ADDS     r1,r4,#5
00000a  b909              CBNZ     r1,|L5.16|
                  |L5.12|
00000c  2101              MOVS     r1,#1
00000e  e000              B        |L5.18|
                  |L5.16|
000010  2100              MOVS     r1,#0
                  |L5.18|
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       assert_param
;;;203      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000018  2c04              CMP      r4,#4
00001a  d108              BNE      |L5.46|
;;;204      {
;;;205        SysTick->CTRL |= SysTick_CLKSource_HCLK;
00001c  f04f20e0          MOV      r0,#0xe000e000
000020  6900              LDR      r0,[r0,#0x10]
000022  f0400004          ORR      r0,r0,#4
000026  f04f21e0          MOV      r1,#0xe000e000
00002a  6108              STR      r0,[r1,#0x10]
00002c  e007              B        |L5.62|
                  |L5.46|
;;;206      }
;;;207      else
;;;208      {
;;;209        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
00002e  f04f20e0          MOV      r0,#0xe000e000
000032  6900              LDR      r0,[r0,#0x10]
000034  f0200004          BIC      r0,r0,#4
000038  f04f21e0          MOV      r1,#0xe000e000
00003c  6108              STR      r0,[r1,#0x10]
                  |L5.62|
;;;210      }
;;;211    }
00003e  bd10              POP      {r4,pc}
;;;212    
                          ENDP

