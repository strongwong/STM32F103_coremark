; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f10x_gpio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Board\inc -I..\Chip\Hal_lib\inc -I..\Chip\Startup\inc -I..\coremark -I..\Chip\CMSIS -I.\RTE\_CoreMark -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F10X_MD --omf_browse=.\objects\stm32f10x_gpio.crf ..\Chip\Hal_lib\stm32f10x_gpio.c]
                          THUMB

                          AREA ||i.GPIO_AFIODeInit||, CODE, READONLY, ALIGN=1

                  GPIO_AFIODeInit PROC
;;;158      */
;;;159    void GPIO_AFIODeInit(void)
000000  b510              PUSH     {r4,lr}
;;;160    {
;;;161      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;162      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;163    }
000012  bd10              POP      {r4,pc}
;;;164    
                          ENDP


                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;107      */
;;;108    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;109    {
000002  4604              MOV      r4,r0
;;;110      /* Check the parameters */
;;;111      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000004  4937              LDR      r1,|L2.228|
000006  428c              CMP      r4,r1
000008  d011              BEQ      |L2.46|
00000a  4937              LDR      r1,|L2.232|
00000c  428c              CMP      r4,r1
00000e  d00e              BEQ      |L2.46|
000010  4936              LDR      r1,|L2.236|
000012  428c              CMP      r4,r1
000014  d00b              BEQ      |L2.46|
000016  4936              LDR      r1,|L2.240|
000018  428c              CMP      r4,r1
00001a  d008              BEQ      |L2.46|
00001c  4935              LDR      r1,|L2.244|
00001e  428c              CMP      r4,r1
000020  d005              BEQ      |L2.46|
000022  4935              LDR      r1,|L2.248|
000024  428c              CMP      r4,r1
000026  d002              BEQ      |L2.46|
000028  4934              LDR      r1,|L2.252|
00002a  428c              CMP      r4,r1
00002c  d101              BNE      |L2.50|
                  |L2.46|
00002e  2101              MOVS     r1,#1
000030  e000              B        |L2.52|
                  |L2.50|
000032  2100              MOVS     r1,#0
                  |L2.52|
000034  4608              MOV      r0,r1
000036  f7fffffe          BL       assert_param
;;;112      
;;;113      if (GPIOx == GPIOA)
00003a  482a              LDR      r0,|L2.228|
00003c  4284              CMP      r4,r0
00003e  d108              BNE      |L2.82|
;;;114      {
;;;115        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
000040  2101              MOVS     r1,#1
000042  2004              MOVS     r0,#4
000044  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;116        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
000048  2100              MOVS     r1,#0
00004a  2004              MOVS     r0,#4
00004c  f7fffffe          BL       RCC_APB2PeriphResetCmd
000050  e046              B        |L2.224|
                  |L2.82|
;;;117      }
;;;118      else if (GPIOx == GPIOB)
000052  4825              LDR      r0,|L2.232|
000054  4284              CMP      r4,r0
000056  d108              BNE      |L2.106|
;;;119      {
;;;120        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
000058  2101              MOVS     r1,#1
00005a  2008              MOVS     r0,#8
00005c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;121        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
000060  2100              MOVS     r1,#0
000062  2008              MOVS     r0,#8
000064  f7fffffe          BL       RCC_APB2PeriphResetCmd
000068  e03a              B        |L2.224|
                  |L2.106|
;;;122      }
;;;123      else if (GPIOx == GPIOC)
00006a  4820              LDR      r0,|L2.236|
00006c  4284              CMP      r4,r0
00006e  d108              BNE      |L2.130|
;;;124      {
;;;125        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
000070  2101              MOVS     r1,#1
000072  2010              MOVS     r0,#0x10
000074  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;126        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000078  2100              MOVS     r1,#0
00007a  2010              MOVS     r0,#0x10
00007c  f7fffffe          BL       RCC_APB2PeriphResetCmd
000080  e02e              B        |L2.224|
                  |L2.130|
;;;127      }
;;;128      else if (GPIOx == GPIOD)
000082  481b              LDR      r0,|L2.240|
000084  4284              CMP      r4,r0
000086  d108              BNE      |L2.154|
;;;129      {
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
000088  2101              MOVS     r1,#1
00008a  2020              MOVS     r0,#0x20
00008c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;131        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
000090  2100              MOVS     r1,#0
000092  2020              MOVS     r0,#0x20
000094  f7fffffe          BL       RCC_APB2PeriphResetCmd
000098  e022              B        |L2.224|
                  |L2.154|
;;;132      }    
;;;133      else if (GPIOx == GPIOE)
00009a  4816              LDR      r0,|L2.244|
00009c  4284              CMP      r4,r0
00009e  d108              BNE      |L2.178|
;;;134      {
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
0000a0  2101              MOVS     r1,#1
0000a2  2040              MOVS     r0,#0x40
0000a4  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;136        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
0000a8  2100              MOVS     r1,#0
0000aa  2040              MOVS     r0,#0x40
0000ac  f7fffffe          BL       RCC_APB2PeriphResetCmd
0000b0  e016              B        |L2.224|
                  |L2.178|
;;;137      } 
;;;138      else if (GPIOx == GPIOF)
0000b2  4811              LDR      r0,|L2.248|
0000b4  4284              CMP      r4,r0
0000b6  d108              BNE      |L2.202|
;;;139      {
;;;140        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
0000b8  2101              MOVS     r1,#1
0000ba  2080              MOVS     r0,#0x80
0000bc  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;141        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
0000c0  2100              MOVS     r1,#0
0000c2  2080              MOVS     r0,#0x80
0000c4  f7fffffe          BL       RCC_APB2PeriphResetCmd
0000c8  e00a              B        |L2.224|
                  |L2.202|
;;;142      }
;;;143      else
;;;144      {
;;;145        if (GPIOx == GPIOG)
0000ca  480c              LDR      r0,|L2.252|
0000cc  4284              CMP      r4,r0
0000ce  d107              BNE      |L2.224|
;;;146        {
;;;147          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
0000d0  2101              MOVS     r1,#1
0000d2  1580              ASRS     r0,r0,#22
0000d4  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;148          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
0000d8  2100              MOVS     r1,#0
0000da  15a0              ASRS     r0,r4,#22
0000dc  f7fffffe          BL       RCC_APB2PeriphResetCmd
                  |L2.224|
;;;149        }
;;;150      }
;;;151    }
0000e0  bd10              POP      {r4,pc}
;;;152    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L2.228|
                          DCD      0x40010800
                  |L2.232|
                          DCD      0x40010c00
                  |L2.236|
                          DCD      0x40011000
                  |L2.240|
                          DCD      0x40011400
                  |L2.244|
                          DCD      0x40011800
                  |L2.248|
                          DCD      0x40011c00
                  |L2.252|
                          DCD      0x40012000

                          AREA ||i.GPIO_ETH_MediaInterfaceConfig||, CODE, READONLY, ALIGN=2

                  GPIO_ETH_MediaInterfaceConfig PROC
;;;629      */
;;;630    void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
000000  b510              PUSH     {r4,lr}
;;;631    { 
000002  4604              MOV      r4,r0
;;;632      assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 
000004  b10c              CBZ      r4,|L3.10|
000006  2c01              CMP      r4,#1
000008  d101              BNE      |L3.14|
                  |L3.10|
00000a  2101              MOVS     r1,#1
00000c  e000              B        |L3.16|
                  |L3.14|
00000e  2100              MOVS     r1,#0
                  |L3.16|
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       assert_param
;;;633    
;;;634      /* Configure MII_RMII selection bit */ 
;;;635      *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
000016  4801              LDR      r0,|L3.28|
000018  6004              STR      r4,[r0,#0]
;;;636    }
00001a  bd10              POP      {r4,pc}
;;;637      
                          ENDP

                  |L3.28|
                          DCD      0x422000dc

                          AREA ||i.GPIO_EXTILineConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EXTILineConfig PROC
;;;608      */
;;;609    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  b570              PUSH     {r4-r6,lr}
;;;610    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;611      uint32_t tmp = 0x00;
000006  2600              MOVS     r6,#0
;;;612      /* Check the parameters */
;;;613      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
000008  b15d              CBZ      r5,|L4.34|
00000a  2d01              CMP      r5,#1
00000c  d009              BEQ      |L4.34|
00000e  2d02              CMP      r5,#2
000010  d007              BEQ      |L4.34|
000012  2d03              CMP      r5,#3
000014  d005              BEQ      |L4.34|
000016  2d04              CMP      r5,#4
000018  d003              BEQ      |L4.34|
00001a  2d05              CMP      r5,#5
00001c  d001              BEQ      |L4.34|
00001e  2d06              CMP      r5,#6
000020  d101              BNE      |L4.38|
                  |L4.34|
000022  2101              MOVS     r1,#1
000024  e000              B        |L4.40|
                  |L4.38|
000026  2100              MOVS     r1,#0
                  |L4.40|
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       assert_param
;;;614      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
00002e  b1ec              CBZ      r4,|L4.108|
000030  2c01              CMP      r4,#1
000032  d01b              BEQ      |L4.108|
000034  2c02              CMP      r4,#2
000036  d019              BEQ      |L4.108|
000038  2c03              CMP      r4,#3
00003a  d017              BEQ      |L4.108|
00003c  2c04              CMP      r4,#4
00003e  d015              BEQ      |L4.108|
000040  2c05              CMP      r4,#5
000042  d013              BEQ      |L4.108|
000044  2c06              CMP      r4,#6
000046  d011              BEQ      |L4.108|
000048  2c07              CMP      r4,#7
00004a  d00f              BEQ      |L4.108|
00004c  2c08              CMP      r4,#8
00004e  d00d              BEQ      |L4.108|
000050  2c09              CMP      r4,#9
000052  d00b              BEQ      |L4.108|
000054  2c0a              CMP      r4,#0xa
000056  d009              BEQ      |L4.108|
000058  2c0b              CMP      r4,#0xb
00005a  d007              BEQ      |L4.108|
00005c  2c0c              CMP      r4,#0xc
00005e  d005              BEQ      |L4.108|
000060  2c0d              CMP      r4,#0xd
000062  d003              BEQ      |L4.108|
000064  2c0e              CMP      r4,#0xe
000066  d001              BEQ      |L4.108|
000068  2c0f              CMP      r4,#0xf
00006a  d101              BNE      |L4.112|
                  |L4.108|
00006c  2101              MOVS     r1,#1
00006e  e000              B        |L4.114|
                  |L4.112|
000070  2100              MOVS     r1,#0
                  |L4.114|
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       assert_param
;;;615      
;;;616      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
000078  07a0              LSLS     r0,r4,#30
00007a  0f01              LSRS     r1,r0,#28
00007c  200f              MOVS     r0,#0xf
00007e  fa00f601          LSL      r6,r0,r1
;;;617      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
000082  480b              LDR      r0,|L4.176|
000084  10a1              ASRS     r1,r4,#2
000086  f8500021          LDR      r0,[r0,r1,LSL #2]
00008a  43b0              BICS     r0,r0,r6
00008c  4908              LDR      r1,|L4.176|
00008e  10a2              ASRS     r2,r4,#2
000090  f8410022          STR      r0,[r1,r2,LSL #2]
;;;618      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
000094  4608              MOV      r0,r1
000096  10a1              ASRS     r1,r4,#2
000098  f8500021          LDR      r0,[r0,r1,LSL #2]
00009c  07a1              LSLS     r1,r4,#30
00009e  0f09              LSRS     r1,r1,#28
0000a0  fa05f101          LSL      r1,r5,r1
0000a4  4308              ORRS     r0,r0,r1
0000a6  4902              LDR      r1,|L4.176|
0000a8  10a2              ASRS     r2,r4,#2
0000aa  f8410022          STR      r0,[r1,r2,LSL #2]
;;;619    }
0000ae  bd70              POP      {r4-r6,pc}
;;;620    
                          ENDP

                  |L4.176|
                          DCD      0x40010008

                          AREA ||i.GPIO_EventOutputCmd||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputCmd PROC
;;;482      */
;;;483    void GPIO_EventOutputCmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;484    {
000002  4604              MOV      r4,r0
;;;485      /* Check the parameters */
;;;486      assert_param(IS_FUNCTIONAL_STATE(NewState));
000004  b10c              CBZ      r4,|L5.10|
000006  2c01              CMP      r4,#1
000008  d101              BNE      |L5.14|
                  |L5.10|
00000a  2101              MOVS     r1,#1
00000c  e000              B        |L5.16|
                  |L5.14|
00000e  2100              MOVS     r1,#0
                  |L5.16|
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       assert_param
;;;487      
;;;488      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
000016  4801              LDR      r0,|L5.28|
000018  61c4              STR      r4,[r0,#0x1c]
;;;489    }
00001a  bd10              POP      {r4,pc}
;;;490    
                          ENDP

                  |L5.28|
                          DCD      0x42200000

                          AREA ||i.GPIO_EventOutputConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputConfig PROC
;;;461      */
;;;462    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  b570              PUSH     {r4-r6,lr}
;;;463    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;464      uint32_t tmpreg = 0x00;
000006  2600              MOVS     r6,#0
;;;465      /* Check the parameters */
;;;466      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
000008  b13d              CBZ      r5,|L6.26|
00000a  2d01              CMP      r5,#1
00000c  d005              BEQ      |L6.26|
00000e  2d02              CMP      r5,#2
000010  d003              BEQ      |L6.26|
000012  2d03              CMP      r5,#3
000014  d001              BEQ      |L6.26|
000016  2d04              CMP      r5,#4
000018  d101              BNE      |L6.30|
                  |L6.26|
00001a  2101              MOVS     r1,#1
00001c  e000              B        |L6.32|
                  |L6.30|
00001e  2100              MOVS     r1,#0
                  |L6.32|
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       assert_param
;;;467      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
000026  b1ec              CBZ      r4,|L6.100|
000028  2c01              CMP      r4,#1
00002a  d01b              BEQ      |L6.100|
00002c  2c02              CMP      r4,#2
00002e  d019              BEQ      |L6.100|
000030  2c03              CMP      r4,#3
000032  d017              BEQ      |L6.100|
000034  2c04              CMP      r4,#4
000036  d015              BEQ      |L6.100|
000038  2c05              CMP      r4,#5
00003a  d013              BEQ      |L6.100|
00003c  2c06              CMP      r4,#6
00003e  d011              BEQ      |L6.100|
000040  2c07              CMP      r4,#7
000042  d00f              BEQ      |L6.100|
000044  2c08              CMP      r4,#8
000046  d00d              BEQ      |L6.100|
000048  2c09              CMP      r4,#9
00004a  d00b              BEQ      |L6.100|
00004c  2c0a              CMP      r4,#0xa
00004e  d009              BEQ      |L6.100|
000050  2c0b              CMP      r4,#0xb
000052  d007              BEQ      |L6.100|
000054  2c0c              CMP      r4,#0xc
000056  d005              BEQ      |L6.100|
000058  2c0d              CMP      r4,#0xd
00005a  d003              BEQ      |L6.100|
00005c  2c0e              CMP      r4,#0xe
00005e  d001              BEQ      |L6.100|
000060  2c0f              CMP      r4,#0xf
000062  d101              BNE      |L6.104|
                  |L6.100|
000064  2101              MOVS     r1,#1
000066  e000              B        |L6.106|
                  |L6.104|
000068  2100              MOVS     r1,#0
                  |L6.106|
00006a  4608              MOV      r0,r1
00006c  f7fffffe          BL       assert_param
;;;468        
;;;469      tmpreg = AFIO->EVCR;
000070  4805              LDR      r0,|L6.136|
000072  6806              LDR      r6,[r0,#0]
;;;470      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;471      tmpreg &= EVCR_PORTPINCONFIG_MASK;
000074  f64f7080          MOV      r0,#0xff80
000078  4006              ANDS     r6,r6,r0
;;;472      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
00007a  ea461605          ORR      r6,r6,r5,LSL #4
;;;473      tmpreg |= GPIO_PinSource;
00007e  4326              ORRS     r6,r6,r4
;;;474      AFIO->EVCR = tmpreg;
000080  4801              LDR      r0,|L6.136|
000082  6006              STR      r6,[r0,#0]
;;;475    }
000084  bd70              POP      {r4-r6,pc}
;;;476    
                          ENDP

000086  0000              DCW      0x0000
                  |L6.136|
                          DCD      0x40010000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;172      */
;;;173    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;174    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;175      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
000008  f04f0900          MOV      r9,#0
00000c  46ca              MOV      r10,r9
00000e  2600              MOVS     r6,#0
000010  2700              MOVS     r7,#0
;;;176      uint32_t tmpreg = 0x00, pinmask = 0x00;
000012  46b0              MOV      r8,r6
000014  46b3              MOV      r11,r6
;;;177      /* Check the parameters */
;;;178      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000016  495b              LDR      r1,|L7.388|
000018  428d              CMP      r5,r1
00001a  d011              BEQ      |L7.64|
00001c  495a              LDR      r1,|L7.392|
00001e  428d              CMP      r5,r1
000020  d00e              BEQ      |L7.64|
000022  495a              LDR      r1,|L7.396|
000024  428d              CMP      r5,r1
000026  d00b              BEQ      |L7.64|
000028  4959              LDR      r1,|L7.400|
00002a  428d              CMP      r5,r1
00002c  d008              BEQ      |L7.64|
00002e  4959              LDR      r1,|L7.404|
000030  428d              CMP      r5,r1
000032  d005              BEQ      |L7.64|
000034  4958              LDR      r1,|L7.408|
000036  428d              CMP      r5,r1
000038  d002              BEQ      |L7.64|
00003a  4958              LDR      r1,|L7.412|
00003c  428d              CMP      r5,r1
00003e  d101              BNE      |L7.68|
                  |L7.64|
000040  2101              MOVS     r1,#1
000042  e000              B        |L7.70|
                  |L7.68|
000044  2100              MOVS     r1,#0
                  |L7.70|
000046  4608              MOV      r0,r1
000048  f7fffffe          BL       assert_param
;;;179      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
00004c  78e1              LDRB     r1,[r4,#3]
00004e  b1a1              CBZ      r1,|L7.122|
000050  78e1              LDRB     r1,[r4,#3]
000052  2904              CMP      r1,#4
000054  d011              BEQ      |L7.122|
000056  78e1              LDRB     r1,[r4,#3]
000058  2928              CMP      r1,#0x28
00005a  d00e              BEQ      |L7.122|
00005c  78e1              LDRB     r1,[r4,#3]
00005e  2948              CMP      r1,#0x48
000060  d00b              BEQ      |L7.122|
000062  78e1              LDRB     r1,[r4,#3]
000064  2914              CMP      r1,#0x14
000066  d008              BEQ      |L7.122|
000068  78e1              LDRB     r1,[r4,#3]
00006a  2910              CMP      r1,#0x10
00006c  d005              BEQ      |L7.122|
00006e  78e1              LDRB     r1,[r4,#3]
000070  291c              CMP      r1,#0x1c
000072  d002              BEQ      |L7.122|
000074  78e1              LDRB     r1,[r4,#3]
000076  2918              CMP      r1,#0x18
000078  d101              BNE      |L7.126|
                  |L7.122|
00007a  2101              MOVS     r1,#1
00007c  e000              B        |L7.128|
                  |L7.126|
00007e  2100              MOVS     r1,#0
                  |L7.128|
000080  4608              MOV      r0,r1
000082  f7fffffe          BL       assert_param
;;;180      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
000086  2100              MOVS     r1,#0
000088  b919              CBNZ     r1,|L7.146|
00008a  8821              LDRH     r1,[r4,#0]
00008c  b109              CBZ      r1,|L7.146|
00008e  2101              MOVS     r1,#1
000090  e000              B        |L7.148|
                  |L7.146|
000092  2100              MOVS     r1,#0
                  |L7.148|
000094  4608              MOV      r0,r1
000096  f7fffffe          BL       assert_param
;;;181      
;;;182    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;183      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
00009a  78e0              LDRB     r0,[r4,#3]
00009c  f000090f          AND      r9,r0,#0xf
;;;184      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
0000a0  78e0              LDRB     r0,[r4,#3]
0000a2  f0000010          AND      r0,r0,#0x10
0000a6  b188              CBZ      r0,|L7.204|
;;;185      { 
;;;186        /* Check the parameters */
;;;187        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
0000a8  78a1              LDRB     r1,[r4,#2]
0000aa  2901              CMP      r1,#1
0000ac  d005              BEQ      |L7.186|
0000ae  78a1              LDRB     r1,[r4,#2]
0000b0  2902              CMP      r1,#2
0000b2  d002              BEQ      |L7.186|
0000b4  78a1              LDRB     r1,[r4,#2]
0000b6  2903              CMP      r1,#3
0000b8  d101              BNE      |L7.190|
                  |L7.186|
0000ba  2101              MOVS     r1,#1
0000bc  e000              B        |L7.192|
                  |L7.190|
0000be  2100              MOVS     r1,#0
                  |L7.192|
0000c0  4608              MOV      r0,r1
0000c2  f7fffffe          BL       assert_param
;;;188        /* Output mode */
;;;189        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
0000c6  78a0              LDRB     r0,[r4,#2]
0000c8  ea400909          ORR      r9,r0,r9
                  |L7.204|
;;;190      }
;;;191    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;192      /* Configure the eight low port pins */
;;;193      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
0000cc  7820              LDRB     r0,[r4,#0]
0000ce  b338              CBZ      r0,|L7.288|
;;;194      {
;;;195        tmpreg = GPIOx->CRL;
0000d0  f8d58000          LDR      r8,[r5,#0]
;;;196        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
0000d4  2600              MOVS     r6,#0
0000d6  e01f              B        |L7.280|
                  |L7.216|
;;;197        {
;;;198          pos = ((uint32_t)0x01) << pinpos;
0000d8  2001              MOVS     r0,#1
0000da  fa00f706          LSL      r7,r0,r6
;;;199          /* Get the port pins position */
;;;200          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
0000de  8820              LDRH     r0,[r4,#0]
0000e0  ea000a07          AND      r10,r0,r7
;;;201          if (currentpin == pos)
0000e4  45ba              CMP      r10,r7
0000e6  d116              BNE      |L7.278|
;;;202          {
;;;203            pos = pinpos << 2;
0000e8  00b7              LSLS     r7,r6,#2
;;;204            /* Clear the corresponding low control register bits */
;;;205            pinmask = ((uint32_t)0x0F) << pos;
0000ea  200f              MOVS     r0,#0xf
0000ec  fa00fb07          LSL      r11,r0,r7
;;;206            tmpreg &= ~pinmask;
0000f0  ea28080b          BIC      r8,r8,r11
;;;207            /* Write the mode configuration in the corresponding bits */
;;;208            tmpreg |= (currentmode << pos);
0000f4  fa09f007          LSL      r0,r9,r7
0000f8  ea400808          ORR      r8,r0,r8
;;;209            /* Reset the corresponding ODR bit */
;;;210            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
0000fc  78e0              LDRB     r0,[r4,#3]
0000fe  2828              CMP      r0,#0x28
000100  d103              BNE      |L7.266|
;;;211            {
;;;212              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
000102  2001              MOVS     r0,#1
000104  40b0              LSLS     r0,r0,r6
000106  6168              STR      r0,[r5,#0x14]
000108  e005              B        |L7.278|
                  |L7.266|
;;;213            }
;;;214            else
;;;215            {
;;;216              /* Set the corresponding ODR bit */
;;;217              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
00010a  78e0              LDRB     r0,[r4,#3]
00010c  2848              CMP      r0,#0x48
00010e  d102              BNE      |L7.278|
;;;218              {
;;;219                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
000110  2001              MOVS     r0,#1
000112  40b0              LSLS     r0,r0,r6
000114  6128              STR      r0,[r5,#0x10]
                  |L7.278|
000116  1c76              ADDS     r6,r6,#1              ;196
                  |L7.280|
000118  2e08              CMP      r6,#8                 ;196
00011a  d3dd              BCC      |L7.216|
;;;220              }
;;;221            }
;;;222          }
;;;223        }
;;;224        GPIOx->CRL = tmpreg;
00011c  f8c58000          STR      r8,[r5,#0]
                  |L7.288|
;;;225      }
;;;226    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;227      /* Configure the eight high port pins */
;;;228      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
000120  8820              LDRH     r0,[r4,#0]
000122  28ff              CMP      r0,#0xff
000124  dd2b              BLE      |L7.382|
;;;229      {
;;;230        tmpreg = GPIOx->CRH;
000126  f8d58004          LDR      r8,[r5,#4]
;;;231        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
00012a  2600              MOVS     r6,#0
00012c  e023              B        |L7.374|
                  |L7.302|
;;;232        {
;;;233          pos = (((uint32_t)0x01) << (pinpos + 0x08));
00012e  f1060008          ADD      r0,r6,#8
000132  2101              MOVS     r1,#1
000134  fa01f700          LSL      r7,r1,r0
;;;234          /* Get the port pins position */
;;;235          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
000138  8820              LDRH     r0,[r4,#0]
00013a  ea000a07          AND      r10,r0,r7
;;;236          if (currentpin == pos)
00013e  45ba              CMP      r10,r7
000140  d118              BNE      |L7.372|
;;;237          {
;;;238            pos = pinpos << 2;
000142  00b7              LSLS     r7,r6,#2
;;;239            /* Clear the corresponding high control register bits */
;;;240            pinmask = ((uint32_t)0x0F) << pos;
000144  200f              MOVS     r0,#0xf
000146  fa00fb07          LSL      r11,r0,r7
;;;241            tmpreg &= ~pinmask;
00014a  ea28080b          BIC      r8,r8,r11
;;;242            /* Write the mode configuration in the corresponding bits */
;;;243            tmpreg |= (currentmode << pos);
00014e  fa09f007          LSL      r0,r9,r7
000152  ea400808          ORR      r8,r0,r8
;;;244            /* Reset the corresponding ODR bit */
;;;245            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000156  78e0              LDRB     r0,[r4,#3]
000158  2828              CMP      r0,#0x28
00015a  d103              BNE      |L7.356|
;;;246            {
;;;247              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
00015c  f1060008          ADD      r0,r6,#8
000160  4081              LSLS     r1,r1,r0
000162  6169              STR      r1,[r5,#0x14]
                  |L7.356|
;;;248            }
;;;249            /* Set the corresponding ODR bit */
;;;250            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000164  78e0              LDRB     r0,[r4,#3]
000166  2848              CMP      r0,#0x48
000168  d104              BNE      |L7.372|
;;;251            {
;;;252              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
00016a  f1060008          ADD      r0,r6,#8
00016e  2101              MOVS     r1,#1
000170  4081              LSLS     r1,r1,r0
000172  6129              STR      r1,[r5,#0x10]
                  |L7.372|
000174  1c76              ADDS     r6,r6,#1              ;231
                  |L7.374|
000176  2e08              CMP      r6,#8                 ;231
000178  d3d9              BCC      |L7.302|
;;;253            }
;;;254          }
;;;255        }
;;;256        GPIOx->CRH = tmpreg;
00017a  f8c58004          STR      r8,[r5,#4]
                  |L7.382|
;;;257      }
;;;258    }
00017e  e8bd9ff0          POP      {r4-r12,pc}
;;;259    
                          ENDP

000182  0000              DCW      0x0000
                  |L7.388|
                          DCD      0x40010800
                  |L7.392|
                          DCD      0x40010c00
                  |L7.396|
                          DCD      0x40011000
                  |L7.400|
                          DCD      0x40011400
                  |L7.404|
                          DCD      0x40011800
                  |L7.408|
                          DCD      0x40011c00
                  |L7.412|
                          DCD      0x40012000

                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=2

                  GPIO_PinLockConfig PROC
;;;431      */
;;;432    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b570              PUSH     {r4-r6,lr}
;;;433    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;434      uint32_t tmp = 0x00010000;
000006  f44f3680          MOV      r6,#0x10000
;;;435      
;;;436      /* Check the parameters */
;;;437      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
00000a  4915              LDR      r1,|L8.96|
00000c  428c              CMP      r4,r1
00000e  d011              BEQ      |L8.52|
000010  4914              LDR      r1,|L8.100|
000012  428c              CMP      r4,r1
000014  d00e              BEQ      |L8.52|
000016  4914              LDR      r1,|L8.104|
000018  428c              CMP      r4,r1
00001a  d00b              BEQ      |L8.52|
00001c  4913              LDR      r1,|L8.108|
00001e  428c              CMP      r4,r1
000020  d008              BEQ      |L8.52|
000022  4913              LDR      r1,|L8.112|
000024  428c              CMP      r4,r1
000026  d005              BEQ      |L8.52|
000028  4912              LDR      r1,|L8.116|
00002a  428c              CMP      r4,r1
00002c  d002              BEQ      |L8.52|
00002e  4912              LDR      r1,|L8.120|
000030  428c              CMP      r4,r1
000032  d101              BNE      |L8.56|
                  |L8.52|
000034  2101              MOVS     r1,#1
000036  e000              B        |L8.58|
                  |L8.56|
000038  2100              MOVS     r1,#0
                  |L8.58|
00003a  4608              MOV      r0,r1
00003c  f7fffffe          BL       assert_param
;;;438      assert_param(IS_GPIO_PIN(GPIO_Pin));
000040  2100              MOVS     r1,#0
000042  b911              CBNZ     r1,|L8.74|
000044  b10d              CBZ      r5,|L8.74|
000046  2101              MOVS     r1,#1
000048  e000              B        |L8.76|
                  |L8.74|
00004a  2100              MOVS     r1,#0
                  |L8.76|
00004c  4608              MOV      r0,r1
00004e  f7fffffe          BL       assert_param
;;;439      
;;;440      tmp |= GPIO_Pin;
000052  432e              ORRS     r6,r6,r5
;;;441      /* Set LCKK bit */
;;;442      GPIOx->LCKR = tmp;
000054  61a6              STR      r6,[r4,#0x18]
;;;443      /* Reset LCKK bit */
;;;444      GPIOx->LCKR =  GPIO_Pin;
000056  61a5              STR      r5,[r4,#0x18]
;;;445      /* Set LCKK bit */
;;;446      GPIOx->LCKR = tmp;
000058  61a6              STR      r6,[r4,#0x18]
;;;447      /* Read LCKK bit*/
;;;448      tmp = GPIOx->LCKR;
00005a  69a6              LDR      r6,[r4,#0x18]
;;;449      /* Read LCKK bit*/
;;;450      tmp = GPIOx->LCKR;
00005c  69a6              LDR      r6,[r4,#0x18]
;;;451    }
00005e  bd70              POP      {r4-r6,pc}
;;;452    
                          ENDP

                  |L8.96|
                          DCD      0x40010800
                  |L8.100|
                          DCD      0x40010c00
                  |L8.104|
                          DCD      0x40011000
                  |L8.108|
                          DCD      0x40011400
                  |L8.112|
                          DCD      0x40011800
                  |L8.116|
                          DCD      0x40011c00
                  |L8.120|
                          DCD      0x40012000

                          AREA ||i.GPIO_PinRemapConfig||, CODE, READONLY, ALIGN=2

                  GPIO_PinRemapConfig PROC
;;;548      */
;;;549    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;550    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;551      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
000008  2700              MOVS     r7,#0
00000a  46b8              MOV      r8,r7
00000c  2500              MOVS     r5,#0
00000e  46a9              MOV      r9,r5
;;;552    
;;;553      /* Check the parameters */
;;;554      assert_param(IS_GPIO_REMAP(GPIO_Remap));
000010  2c01              CMP      r4,#1
000012  d07d              BEQ      |L9.272|
000014  2c02              CMP      r4,#2
000016  d07b              BEQ      |L9.272|
000018  2c04              CMP      r4,#4
00001a  d079              BEQ      |L9.272|
00001c  2c08              CMP      r4,#8
00001e  d077              BEQ      |L9.272|
000020  4969              LDR      r1,|L9.456|
000022  428c              CMP      r4,r1
000024  d07f              BEQ      |L9.294|
000026  4968              LDR      r1,|L9.456|
000028  3120              ADDS     r1,r1,#0x20
00002a  428c              CMP      r4,r1
00002c  d07b              BEQ      |L9.294|
00002e  4967              LDR      r1,|L9.460|
000030  428c              CMP      r4,r1
000032  d078              BEQ      |L9.294|
000034  4965              LDR      r1,|L9.460|
000036  3180              ADDS     r1,r1,#0x80
000038  428c              CMP      r4,r1
00003a  d074              BEQ      |L9.294|
00003c  4964              LDR      r1,|L9.464|
00003e  428c              CMP      r4,r1
000040  d071              BEQ      |L9.294|
000042  4964              LDR      r1,|L9.468|
000044  428c              CMP      r4,r1
000046  d06e              BEQ      |L9.294|
000048  4963              LDR      r1,|L9.472|
00004a  428c              CMP      r4,r1
00004c  d06b              BEQ      |L9.294|
00004e  4963              LDR      r1,|L9.476|
000050  428c              CMP      r4,r1
000052  d068              BEQ      |L9.294|
000054  4962              LDR      r1,|L9.480|
000056  428c              CMP      r4,r1
000058  d065              BEQ      |L9.294|
00005a  f5b45f80          CMP      r4,#0x1000
00005e  d062              BEQ      |L9.294|
000060  f5b41fea          CMP      r4,#0x1d4000
000064  d05f              BEQ      |L9.294|
000066  f5b41feb          CMP      r4,#0x1d6000
00006a  d05c              BEQ      |L9.294|
00006c  f5b44f00          CMP      r4,#0x8000
000070  d059              BEQ      |L9.294|
000072  495c              LDR      r1,|L9.484|
000074  428c              CMP      r4,r1
000076  d056              BEQ      |L9.294|
000078  1c49              ADDS     r1,r1,#1
00007a  428c              CMP      r4,r1
00007c  d053              BEQ      |L9.294|
00007e  1c89              ADDS     r1,r1,#2
000080  428c              CMP      r4,r1
000082  d050              BEQ      |L9.294|
000084  1d09              ADDS     r1,r1,#4
000086  428c              CMP      r4,r1
000088  d04d              BEQ      |L9.294|
00008a  4956              LDR      r1,|L9.484|
00008c  310f              ADDS     r1,r1,#0xf
00008e  428c              CMP      r4,r1
000090  d049              BEQ      |L9.294|
000092  f1b41f20          CMP      r4,#0x200020
000096  d046              BEQ      |L9.294|
000098  ea4f31f1          ROR      r1,r1,#15
00009c  428c              CMP      r4,r1
00009e  d042              BEQ      |L9.294|
0000a0  4951              LDR      r1,|L9.488|
0000a2  428c              CMP      r4,r1
0000a4  d03f              BEQ      |L9.294|
0000a6  4951              LDR      r1,|L9.492|
0000a8  428c              CMP      r4,r1
0000aa  d03c              BEQ      |L9.294|
0000ac  4950              LDR      r1,|L9.496|
0000ae  428c              CMP      r4,r1
0000b0  d039              BEQ      |L9.294|
0000b2  4950              LDR      r1,|L9.500|
0000b4  428c              CMP      r4,r1
0000b6  d036              BEQ      |L9.294|
0000b8  494f              LDR      r1,|L9.504|
0000ba  428c              CMP      r4,r1
0000bc  d033              BEQ      |L9.294|
0000be  f5b41f01          CMP      r4,#0x204000
0000c2  d030              BEQ      |L9.294|
0000c4  494d              LDR      r1,|L9.508|
0000c6  428c              CMP      r4,r1
0000c8  d02d              BEQ      |L9.294|
0000ca  1c49              ADDS     r1,r1,#1
0000cc  428c              CMP      r4,r1
0000ce  d02a              BEQ      |L9.294|
0000d0  1c89              ADDS     r1,r1,#2
0000d2  428c              CMP      r4,r1
0000d4  d027              BEQ      |L9.294|
0000d6  1d09              ADDS     r1,r1,#4
0000d8  428c              CMP      r4,r1
0000da  d024              BEQ      |L9.294|
0000dc  4947              LDR      r1,|L9.508|
0000de  310f              ADDS     r1,r1,#0xf
0000e0  428c              CMP      r4,r1
0000e2  d020              BEQ      |L9.294|
0000e4  4945              LDR      r1,|L9.508|
0000e6  311f              ADDS     r1,r1,#0x1f
0000e8  428c              CMP      r4,r1
0000ea  d01c              BEQ      |L9.294|
0000ec  4943              LDR      r1,|L9.508|
0000ee  313f              ADDS     r1,r1,#0x3f
0000f0  428c              CMP      r4,r1
0000f2  d018              BEQ      |L9.294|
0000f4  4941              LDR      r1,|L9.508|
0000f6  317f              ADDS     r1,r1,#0x7f
0000f8  428c              CMP      r4,r1
0000fa  d014              BEQ      |L9.294|
0000fc  493f              LDR      r1,|L9.508|
0000fe  31ff              ADDS     r1,r1,#0xff
000100  428c              CMP      r4,r1
000102  d010              BEQ      |L9.294|
000104  493e              LDR      r1,|L9.512|
000106  428c              CMP      r4,r1
000108  d00d              BEQ      |L9.294|
00010a  493e              LDR      r1,|L9.516|
00010c  428c              CMP      r4,r1
00010e  e000              B        |L9.274|
                  |L9.272|
000110  e009              B        |L9.294|
                  |L9.274|
000112  d008              BEQ      |L9.294|
000114  493c              LDR      r1,|L9.520|
000116  428c              CMP      r4,r1
000118  d005              BEQ      |L9.294|
00011a  493c              LDR      r1,|L9.524|
00011c  428c              CMP      r4,r1
00011e  d002              BEQ      |L9.294|
000120  493b              LDR      r1,|L9.528|
000122  428c              CMP      r4,r1
000124  d101              BNE      |L9.298|
                  |L9.294|
000126  2101              MOVS     r1,#1
000128  e000              B        |L9.300|
                  |L9.298|
00012a  2100              MOVS     r1,#0
                  |L9.300|
00012c  4608              MOV      r0,r1
00012e  f7fffffe          BL       assert_param
;;;555      assert_param(IS_FUNCTIONAL_STATE(NewState));  
000132  b10e              CBZ      r6,|L9.312|
000134  2e01              CMP      r6,#1
000136  d101              BNE      |L9.316|
                  |L9.312|
000138  2101              MOVS     r1,#1
00013a  e000              B        |L9.318|
                  |L9.316|
00013c  2100              MOVS     r1,#0
                  |L9.318|
00013e  4608              MOV      r0,r1
000140  f7fffffe          BL       assert_param
;;;556      
;;;557      if((GPIO_Remap & 0x80000000) == 0x80000000)
000144  f0044000          AND      r0,r4,#0x80000000
000148  f1b04f00          CMP      r0,#0x80000000
00014c  d102              BNE      |L9.340|
;;;558      {
;;;559        tmpreg = AFIO->MAPR2;
00014e  4831              LDR      r0,|L9.532|
000150  69c5              LDR      r5,[r0,#0x1c]
000152  e001              B        |L9.344|
                  |L9.340|
;;;560      }
;;;561      else
;;;562      {
;;;563        tmpreg = AFIO->MAPR;
000154  482f              LDR      r0,|L9.532|
000156  6845              LDR      r5,[r0,#4]
                  |L9.344|
;;;564      }
;;;565    
;;;566      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
000158  f3c44903          UBFX     r9,r4,#16,#4
;;;567      tmp = GPIO_Remap & LSB_MASK;
00015c  b2a7              UXTH     r7,r4
;;;568    
;;;569      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
00015e  f4041040          AND      r0,r4,#0x300000
000162  f5b01f40          CMP      r0,#0x300000
000166  d108              BNE      |L9.378|
;;;570      {
;;;571        tmpreg &= DBGAFR_SWJCFG_MASK;
000168  f0256570          BIC      r5,r5,#0xf000000
;;;572        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
00016c  4829              LDR      r0,|L9.532|
00016e  6840              LDR      r0,[r0,#4]
000170  f0206070          BIC      r0,r0,#0xf000000
000174  4927              LDR      r1,|L9.532|
000176  6048              STR      r0,[r1,#4]
000178  e013              B        |L9.418|
                  |L9.378|
;;;573      }
;;;574      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
00017a  f4041080          AND      r0,r4,#0x100000
00017e  f5b01f80          CMP      r0,#0x100000
000182  d107              BNE      |L9.404|
;;;575      {
;;;576        tmp1 = ((uint32_t)0x03) << tmpmask;
000184  2003              MOVS     r0,#3
000186  fa00f809          LSL      r8,r0,r9
;;;577        tmpreg &= ~tmp1;
00018a  ea250508          BIC      r5,r5,r8
;;;578        tmpreg |= ~DBGAFR_SWJCFG_MASK;
00018e  f0456570          ORR      r5,r5,#0xf000000
000192  e006              B        |L9.418|
                  |L9.404|
;;;579      }
;;;580      else
;;;581      {
;;;582        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
000194  0d60              LSRS     r0,r4,#21
000196  0100              LSLS     r0,r0,#4
000198  fa07f000          LSL      r0,r7,r0
00019c  4385              BICS     r5,r5,r0
;;;583        tmpreg |= ~DBGAFR_SWJCFG_MASK;
00019e  f0456570          ORR      r5,r5,#0xf000000
                  |L9.418|
;;;584      }
;;;585    
;;;586      if (NewState != DISABLE)
0001a2  b126              CBZ      r6,|L9.430|
;;;587      {
;;;588        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
0001a4  0d60              LSRS     r0,r4,#21
0001a6  0101              LSLS     r1,r0,#4
0001a8  fa07f001          LSL      r0,r7,r1
0001ac  4305              ORRS     r5,r5,r0
                  |L9.430|
;;;589      }
;;;590    
;;;591      if((GPIO_Remap & 0x80000000) == 0x80000000)
0001ae  f0044000          AND      r0,r4,#0x80000000
0001b2  f1b04f00          CMP      r0,#0x80000000
0001b6  d102              BNE      |L9.446|
;;;592      {
;;;593        AFIO->MAPR2 = tmpreg;
0001b8  4816              LDR      r0,|L9.532|
0001ba  61c5              STR      r5,[r0,#0x1c]
0001bc  e001              B        |L9.450|
                  |L9.446|
;;;594      }
;;;595      else
;;;596      {
;;;597        AFIO->MAPR = tmpreg;
0001be  4815              LDR      r0,|L9.532|
0001c0  6045              STR      r5,[r0,#4]
                  |L9.450|
;;;598      }  
;;;599    }
0001c2  e8bd87f0          POP      {r4-r10,pc}
;;;600    
                          ENDP

0001c6  0000              DCW      0x0000
                  |L9.456|
                          DCD      0x00140010
                  |L9.460|
                          DCD      0x00160040
                  |L9.464|
                          DCD      0x00180100
                  |L9.468|
                          DCD      0x00180200
                  |L9.472|
                          DCD      0x00180300
                  |L9.476|
                          DCD      0x001a0800
                  |L9.480|
                          DCD      0x001a0c00
                  |L9.484|
                          DCD      0x00200001
                  |L9.488|
                          DCD      0x00300100
                  |L9.492|
                          DCD      0x00300200
                  |L9.496|
                          DCD      0x00300400
                  |L9.500|
                          DCD      0x00201100
                  |L9.504|
                          DCD      0x00202000
                  |L9.508|
                          DCD      0x80000001
                  |L9.512|
                          DCD      0x80000200
                  |L9.516|
                          DCD      0x80000400
                  |L9.520|
                          DCD      0x80000800
                  |L9.524|
                          DCD      0x80001000
                  |L9.528|
                          DCD      0x80002000
                  |L9.532|
                          DCD      0x40010000

                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=2

                  GPIO_ReadInputData PROC
;;;304      */
;;;305    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;306    {
000002  4604              MOV      r4,r0
;;;307      /* Check the parameters */
;;;308      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000004  490e              LDR      r1,|L10.64|
000006  428c              CMP      r4,r1
000008  d011              BEQ      |L10.46|
00000a  490e              LDR      r1,|L10.68|
00000c  428c              CMP      r4,r1
00000e  d00e              BEQ      |L10.46|
000010  490d              LDR      r1,|L10.72|
000012  428c              CMP      r4,r1
000014  d00b              BEQ      |L10.46|
000016  490d              LDR      r1,|L10.76|
000018  428c              CMP      r4,r1
00001a  d008              BEQ      |L10.46|
00001c  490c              LDR      r1,|L10.80|
00001e  428c              CMP      r4,r1
000020  d005              BEQ      |L10.46|
000022  490c              LDR      r1,|L10.84|
000024  428c              CMP      r4,r1
000026  d002              BEQ      |L10.46|
000028  490b              LDR      r1,|L10.88|
00002a  428c              CMP      r4,r1
00002c  d101              BNE      |L10.50|
                  |L10.46|
00002e  2101              MOVS     r1,#1
000030  e000              B        |L10.52|
                  |L10.50|
000032  2100              MOVS     r1,#0
                  |L10.52|
000034  4608              MOV      r0,r1
000036  f7fffffe          BL       assert_param
;;;309      
;;;310      return ((uint16_t)GPIOx->IDR);
00003a  68a0              LDR      r0,[r4,#8]
00003c  b280              UXTH     r0,r0
;;;311    }
00003e  bd10              POP      {r4,pc}
;;;312    
                          ENDP

                  |L10.64|
                          DCD      0x40010800
                  |L10.68|
                          DCD      0x40010c00
                  |L10.72|
                          DCD      0x40011000
                  |L10.76|
                          DCD      0x40011400
                  |L10.80|
                          DCD      0x40011800
                  |L10.84|
                          DCD      0x40011c00
                  |L10.88|
                          DCD      0x40012000

                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=2

                  GPIO_ReadInputDataBit PROC
;;;280      */
;;;281    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b570              PUSH     {r4-r6,lr}
;;;282    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;283      uint8_t bitstatus = 0x00;
000006  2600              MOVS     r6,#0
;;;284      
;;;285      /* Check the parameters */
;;;286      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000008  4928              LDR      r1,|L11.172|
00000a  428d              CMP      r5,r1
00000c  d011              BEQ      |L11.50|
00000e  4928              LDR      r1,|L11.176|
000010  428d              CMP      r5,r1
000012  d00e              BEQ      |L11.50|
000014  4927              LDR      r1,|L11.180|
000016  428d              CMP      r5,r1
000018  d00b              BEQ      |L11.50|
00001a  4927              LDR      r1,|L11.184|
00001c  428d              CMP      r5,r1
00001e  d008              BEQ      |L11.50|
000020  4926              LDR      r1,|L11.188|
000022  428d              CMP      r5,r1
000024  d005              BEQ      |L11.50|
000026  4926              LDR      r1,|L11.192|
000028  428d              CMP      r5,r1
00002a  d002              BEQ      |L11.50|
00002c  4925              LDR      r1,|L11.196|
00002e  428d              CMP      r5,r1
000030  d101              BNE      |L11.54|
                  |L11.50|
000032  2101              MOVS     r1,#1
000034  e000              B        |L11.56|
                  |L11.54|
000036  2100              MOVS     r1,#0
                  |L11.56|
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       assert_param
;;;287      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
00003e  2c01              CMP      r4,#1
000040  d025              BEQ      |L11.142|
000042  2c02              CMP      r4,#2
000044  d023              BEQ      |L11.142|
000046  2c04              CMP      r4,#4
000048  d021              BEQ      |L11.142|
00004a  2c08              CMP      r4,#8
00004c  d01f              BEQ      |L11.142|
00004e  2c10              CMP      r4,#0x10
000050  d01d              BEQ      |L11.142|
000052  2c20              CMP      r4,#0x20
000054  d01b              BEQ      |L11.142|
000056  2c40              CMP      r4,#0x40
000058  d019              BEQ      |L11.142|
00005a  2c80              CMP      r4,#0x80
00005c  d017              BEQ      |L11.142|
00005e  f5b47f80          CMP      r4,#0x100
000062  d014              BEQ      |L11.142|
000064  f5b47f00          CMP      r4,#0x200
000068  d011              BEQ      |L11.142|
00006a  f5b46f80          CMP      r4,#0x400
00006e  d00e              BEQ      |L11.142|
000070  f5b46f00          CMP      r4,#0x800
000074  d00b              BEQ      |L11.142|
000076  f5b45f80          CMP      r4,#0x1000
00007a  d008              BEQ      |L11.142|
00007c  f5b45f00          CMP      r4,#0x2000
000080  d005              BEQ      |L11.142|
000082  f5b44f80          CMP      r4,#0x4000
000086  d002              BEQ      |L11.142|
000088  f5b44f00          CMP      r4,#0x8000
00008c  d101              BNE      |L11.146|
                  |L11.142|
00008e  2101              MOVS     r1,#1
000090  e000              B        |L11.148|
                  |L11.146|
000092  2100              MOVS     r1,#0
                  |L11.148|
000094  4608              MOV      r0,r1
000096  f7fffffe          BL       assert_param
;;;288      
;;;289      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
00009a  68a8              LDR      r0,[r5,#8]
00009c  4020              ANDS     r0,r0,r4
00009e  b108              CBZ      r0,|L11.164|
;;;290      {
;;;291        bitstatus = (uint8_t)Bit_SET;
0000a0  2601              MOVS     r6,#1
0000a2  e000              B        |L11.166|
                  |L11.164|
;;;292      }
;;;293      else
;;;294      {
;;;295        bitstatus = (uint8_t)Bit_RESET;
0000a4  2600              MOVS     r6,#0
                  |L11.166|
;;;296      }
;;;297      return bitstatus;
0000a6  4630              MOV      r0,r6
;;;298    }
0000a8  bd70              POP      {r4-r6,pc}
;;;299    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L11.172|
                          DCD      0x40010800
                  |L11.176|
                          DCD      0x40010c00
                  |L11.180|
                          DCD      0x40011000
                  |L11.184|
                          DCD      0x40011400
                  |L11.188|
                          DCD      0x40011800
                  |L11.192|
                          DCD      0x40011c00
                  |L11.196|
                          DCD      0x40012000

                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=2

                  GPIO_ReadOutputData PROC
;;;342      */
;;;343    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;344    {
000002  4604              MOV      r4,r0
;;;345      /* Check the parameters */
;;;346      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000004  490e              LDR      r1,|L12.64|
000006  428c              CMP      r4,r1
000008  d011              BEQ      |L12.46|
00000a  490e              LDR      r1,|L12.68|
00000c  428c              CMP      r4,r1
00000e  d00e              BEQ      |L12.46|
000010  490d              LDR      r1,|L12.72|
000012  428c              CMP      r4,r1
000014  d00b              BEQ      |L12.46|
000016  490d              LDR      r1,|L12.76|
000018  428c              CMP      r4,r1
00001a  d008              BEQ      |L12.46|
00001c  490c              LDR      r1,|L12.80|
00001e  428c              CMP      r4,r1
000020  d005              BEQ      |L12.46|
000022  490c              LDR      r1,|L12.84|
000024  428c              CMP      r4,r1
000026  d002              BEQ      |L12.46|
000028  490b              LDR      r1,|L12.88|
00002a  428c              CMP      r4,r1
00002c  d101              BNE      |L12.50|
                  |L12.46|
00002e  2101              MOVS     r1,#1
000030  e000              B        |L12.52|
                  |L12.50|
000032  2100              MOVS     r1,#0
                  |L12.52|
000034  4608              MOV      r0,r1
000036  f7fffffe          BL       assert_param
;;;347        
;;;348      return ((uint16_t)GPIOx->ODR);
00003a  68e0              LDR      r0,[r4,#0xc]
00003c  b280              UXTH     r0,r0
;;;349    }
00003e  bd10              POP      {r4,pc}
;;;350    
                          ENDP

                  |L12.64|
                          DCD      0x40010800
                  |L12.68|
                          DCD      0x40010c00
                  |L12.72|
                          DCD      0x40011000
                  |L12.76|
                          DCD      0x40011400
                  |L12.80|
                          DCD      0x40011800
                  |L12.84|
                          DCD      0x40011c00
                  |L12.88|
                          DCD      0x40012000

                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=2

                  GPIO_ReadOutputDataBit PROC
;;;319      */
;;;320    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b570              PUSH     {r4-r6,lr}
;;;321    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;322      uint8_t bitstatus = 0x00;
000006  2600              MOVS     r6,#0
;;;323      /* Check the parameters */
;;;324      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000008  4928              LDR      r1,|L13.172|
00000a  428d              CMP      r5,r1
00000c  d011              BEQ      |L13.50|
00000e  4928              LDR      r1,|L13.176|
000010  428d              CMP      r5,r1
000012  d00e              BEQ      |L13.50|
000014  4927              LDR      r1,|L13.180|
000016  428d              CMP      r5,r1
000018  d00b              BEQ      |L13.50|
00001a  4927              LDR      r1,|L13.184|
00001c  428d              CMP      r5,r1
00001e  d008              BEQ      |L13.50|
000020  4926              LDR      r1,|L13.188|
000022  428d              CMP      r5,r1
000024  d005              BEQ      |L13.50|
000026  4926              LDR      r1,|L13.192|
000028  428d              CMP      r5,r1
00002a  d002              BEQ      |L13.50|
00002c  4925              LDR      r1,|L13.196|
00002e  428d              CMP      r5,r1
000030  d101              BNE      |L13.54|
                  |L13.50|
000032  2101              MOVS     r1,#1
000034  e000              B        |L13.56|
                  |L13.54|
000036  2100              MOVS     r1,#0
                  |L13.56|
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       assert_param
;;;325      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
00003e  2c01              CMP      r4,#1
000040  d025              BEQ      |L13.142|
000042  2c02              CMP      r4,#2
000044  d023              BEQ      |L13.142|
000046  2c04              CMP      r4,#4
000048  d021              BEQ      |L13.142|
00004a  2c08              CMP      r4,#8
00004c  d01f              BEQ      |L13.142|
00004e  2c10              CMP      r4,#0x10
000050  d01d              BEQ      |L13.142|
000052  2c20              CMP      r4,#0x20
000054  d01b              BEQ      |L13.142|
000056  2c40              CMP      r4,#0x40
000058  d019              BEQ      |L13.142|
00005a  2c80              CMP      r4,#0x80
00005c  d017              BEQ      |L13.142|
00005e  f5b47f80          CMP      r4,#0x100
000062  d014              BEQ      |L13.142|
000064  f5b47f00          CMP      r4,#0x200
000068  d011              BEQ      |L13.142|
00006a  f5b46f80          CMP      r4,#0x400
00006e  d00e              BEQ      |L13.142|
000070  f5b46f00          CMP      r4,#0x800
000074  d00b              BEQ      |L13.142|
000076  f5b45f80          CMP      r4,#0x1000
00007a  d008              BEQ      |L13.142|
00007c  f5b45f00          CMP      r4,#0x2000
000080  d005              BEQ      |L13.142|
000082  f5b44f80          CMP      r4,#0x4000
000086  d002              BEQ      |L13.142|
000088  f5b44f00          CMP      r4,#0x8000
00008c  d101              BNE      |L13.146|
                  |L13.142|
00008e  2101              MOVS     r1,#1
000090  e000              B        |L13.148|
                  |L13.146|
000092  2100              MOVS     r1,#0
                  |L13.148|
000094  4608              MOV      r0,r1
000096  f7fffffe          BL       assert_param
;;;326      
;;;327      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
00009a  68e8              LDR      r0,[r5,#0xc]
00009c  4020              ANDS     r0,r0,r4
00009e  b108              CBZ      r0,|L13.164|
;;;328      {
;;;329        bitstatus = (uint8_t)Bit_SET;
0000a0  2601              MOVS     r6,#1
0000a2  e000              B        |L13.166|
                  |L13.164|
;;;330      }
;;;331      else
;;;332      {
;;;333        bitstatus = (uint8_t)Bit_RESET;
0000a4  2600              MOVS     r6,#0
                  |L13.166|
;;;334      }
;;;335      return bitstatus;
0000a6  4630              MOV      r0,r6
;;;336    }
0000a8  bd70              POP      {r4-r6,pc}
;;;337    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L13.172|
                          DCD      0x40010800
                  |L13.176|
                          DCD      0x40010c00
                  |L13.180|
                          DCD      0x40011000
                  |L13.184|
                          DCD      0x40011400
                  |L13.188|
                          DCD      0x40011800
                  |L13.192|
                          DCD      0x40011c00
                  |L13.196|
                          DCD      0x40012000

                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=2

                  GPIO_ResetBits PROC
;;;373      */
;;;374    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b570              PUSH     {r4-r6,lr}
;;;375    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;376      /* Check the parameters */
;;;377      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000006  4913              LDR      r1,|L14.84|
000008  428c              CMP      r4,r1
00000a  d011              BEQ      |L14.48|
00000c  4912              LDR      r1,|L14.88|
00000e  428c              CMP      r4,r1
000010  d00e              BEQ      |L14.48|
000012  4912              LDR      r1,|L14.92|
000014  428c              CMP      r4,r1
000016  d00b              BEQ      |L14.48|
000018  4911              LDR      r1,|L14.96|
00001a  428c              CMP      r4,r1
00001c  d008              BEQ      |L14.48|
00001e  4911              LDR      r1,|L14.100|
000020  428c              CMP      r4,r1
000022  d005              BEQ      |L14.48|
000024  4910              LDR      r1,|L14.104|
000026  428c              CMP      r4,r1
000028  d002              BEQ      |L14.48|
00002a  4910              LDR      r1,|L14.108|
00002c  428c              CMP      r4,r1
00002e  d101              BNE      |L14.52|
                  |L14.48|
000030  2101              MOVS     r1,#1
000032  e000              B        |L14.54|
                  |L14.52|
000034  2100              MOVS     r1,#0
                  |L14.54|
000036  4608              MOV      r0,r1
000038  f7fffffe          BL       assert_param
;;;378      assert_param(IS_GPIO_PIN(GPIO_Pin));
00003c  2100              MOVS     r1,#0
00003e  b911              CBNZ     r1,|L14.70|
000040  b10d              CBZ      r5,|L14.70|
000042  2101              MOVS     r1,#1
000044  e000              B        |L14.72|
                  |L14.70|
000046  2100              MOVS     r1,#0
                  |L14.72|
000048  4608              MOV      r0,r1
00004a  f7fffffe          BL       assert_param
;;;379      
;;;380      GPIOx->BRR = GPIO_Pin;
00004e  6165              STR      r5,[r4,#0x14]
;;;381    }
000050  bd70              POP      {r4-r6,pc}
;;;382    
                          ENDP

000052  0000              DCW      0x0000
                  |L14.84|
                          DCD      0x40010800
                  |L14.88|
                          DCD      0x40010c00
                  |L14.92|
                          DCD      0x40011000
                  |L14.96|
                          DCD      0x40011400
                  |L14.100|
                          DCD      0x40011800
                  |L14.104|
                          DCD      0x40011c00
                  |L14.108|
                          DCD      0x40012000

                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=2

                  GPIO_SetBits PROC
;;;357      */
;;;358    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b570              PUSH     {r4-r6,lr}
;;;359    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;360      /* Check the parameters */
;;;361      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000006  4913              LDR      r1,|L15.84|
000008  428c              CMP      r4,r1
00000a  d011              BEQ      |L15.48|
00000c  4912              LDR      r1,|L15.88|
00000e  428c              CMP      r4,r1
000010  d00e              BEQ      |L15.48|
000012  4912              LDR      r1,|L15.92|
000014  428c              CMP      r4,r1
000016  d00b              BEQ      |L15.48|
000018  4911              LDR      r1,|L15.96|
00001a  428c              CMP      r4,r1
00001c  d008              BEQ      |L15.48|
00001e  4911              LDR      r1,|L15.100|
000020  428c              CMP      r4,r1
000022  d005              BEQ      |L15.48|
000024  4910              LDR      r1,|L15.104|
000026  428c              CMP      r4,r1
000028  d002              BEQ      |L15.48|
00002a  4910              LDR      r1,|L15.108|
00002c  428c              CMP      r4,r1
00002e  d101              BNE      |L15.52|
                  |L15.48|
000030  2101              MOVS     r1,#1
000032  e000              B        |L15.54|
                  |L15.52|
000034  2100              MOVS     r1,#0
                  |L15.54|
000036  4608              MOV      r0,r1
000038  f7fffffe          BL       assert_param
;;;362      assert_param(IS_GPIO_PIN(GPIO_Pin));
00003c  2100              MOVS     r1,#0
00003e  b911              CBNZ     r1,|L15.70|
000040  b10d              CBZ      r5,|L15.70|
000042  2101              MOVS     r1,#1
000044  e000              B        |L15.72|
                  |L15.70|
000046  2100              MOVS     r1,#0
                  |L15.72|
000048  4608              MOV      r0,r1
00004a  f7fffffe          BL       assert_param
;;;363      
;;;364      GPIOx->BSRR = GPIO_Pin;
00004e  6125              STR      r5,[r4,#0x10]
;;;365    }
000050  bd70              POP      {r4-r6,pc}
;;;366    
                          ENDP

000052  0000              DCW      0x0000
                  |L15.84|
                          DCD      0x40010800
                  |L15.88|
                          DCD      0x40010c00
                  |L15.92|
                          DCD      0x40011000
                  |L15.96|
                          DCD      0x40011400
                  |L15.100|
                          DCD      0x40011800
                  |L15.104|
                          DCD      0x40011c00
                  |L15.108|
                          DCD      0x40012000

                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;265      */
;;;266    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;267    {
;;;268      /* Reset GPIO init structure parameters values */
;;;269      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  8001              STRH     r1,[r0,#0]
;;;270      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000006  2102              MOVS     r1,#2
000008  7081              STRB     r1,[r0,#2]
;;;271      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000a  2104              MOVS     r1,#4
00000c  70c1              STRB     r1,[r0,#3]
;;;272    }
00000e  4770              BX       lr
;;;273    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=2

                  GPIO_Write PROC
;;;416      */
;;;417    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  b570              PUSH     {r4-r6,lr}
;;;418    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;419      /* Check the parameters */
;;;420      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000006  490e              LDR      r1,|L17.64|
000008  428c              CMP      r4,r1
00000a  d011              BEQ      |L17.48|
00000c  490d              LDR      r1,|L17.68|
00000e  428c              CMP      r4,r1
000010  d00e              BEQ      |L17.48|
000012  490d              LDR      r1,|L17.72|
000014  428c              CMP      r4,r1
000016  d00b              BEQ      |L17.48|
000018  490c              LDR      r1,|L17.76|
00001a  428c              CMP      r4,r1
00001c  d008              BEQ      |L17.48|
00001e  490c              LDR      r1,|L17.80|
000020  428c              CMP      r4,r1
000022  d005              BEQ      |L17.48|
000024  490b              LDR      r1,|L17.84|
000026  428c              CMP      r4,r1
000028  d002              BEQ      |L17.48|
00002a  490b              LDR      r1,|L17.88|
00002c  428c              CMP      r4,r1
00002e  d101              BNE      |L17.52|
                  |L17.48|
000030  2101              MOVS     r1,#1
000032  e000              B        |L17.54|
                  |L17.52|
000034  2100              MOVS     r1,#0
                  |L17.54|
000036  4608              MOV      r0,r1
000038  f7fffffe          BL       assert_param
;;;421      
;;;422      GPIOx->ODR = PortVal;
00003c  60e5              STR      r5,[r4,#0xc]
;;;423    }
00003e  bd70              POP      {r4-r6,pc}
;;;424    
                          ENDP

                  |L17.64|
                          DCD      0x40010800
                  |L17.68|
                          DCD      0x40010c00
                  |L17.72|
                          DCD      0x40011000
                  |L17.76|
                          DCD      0x40011400
                  |L17.80|
                          DCD      0x40011800
                  |L17.84|
                          DCD      0x40011c00
                  |L17.88|
                          DCD      0x40012000

                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=2

                  GPIO_WriteBit PROC
;;;393      */
;;;394    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b570              PUSH     {r4-r6,lr}
;;;395    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;396      /* Check the parameters */
;;;397      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000008  492b              LDR      r1,|L18.184|
00000a  428d              CMP      r5,r1
00000c  d011              BEQ      |L18.50|
00000e  492b              LDR      r1,|L18.188|
000010  428d              CMP      r5,r1
000012  d00e              BEQ      |L18.50|
000014  492a              LDR      r1,|L18.192|
000016  428d              CMP      r5,r1
000018  d00b              BEQ      |L18.50|
00001a  492a              LDR      r1,|L18.196|
00001c  428d              CMP      r5,r1
00001e  d008              BEQ      |L18.50|
000020  4929              LDR      r1,|L18.200|
000022  428d              CMP      r5,r1
000024  d005              BEQ      |L18.50|
000026  4929              LDR      r1,|L18.204|
000028  428d              CMP      r5,r1
00002a  d002              BEQ      |L18.50|
00002c  4928              LDR      r1,|L18.208|
00002e  428d              CMP      r5,r1
000030  d101              BNE      |L18.54|
                  |L18.50|
000032  2101              MOVS     r1,#1
000034  e000              B        |L18.56|
                  |L18.54|
000036  2100              MOVS     r1,#0
                  |L18.56|
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       assert_param
;;;398      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
00003e  2c01              CMP      r4,#1
000040  d025              BEQ      |L18.142|
000042  2c02              CMP      r4,#2
000044  d023              BEQ      |L18.142|
000046  2c04              CMP      r4,#4
000048  d021              BEQ      |L18.142|
00004a  2c08              CMP      r4,#8
00004c  d01f              BEQ      |L18.142|
00004e  2c10              CMP      r4,#0x10
000050  d01d              BEQ      |L18.142|
000052  2c20              CMP      r4,#0x20
000054  d01b              BEQ      |L18.142|
000056  2c40              CMP      r4,#0x40
000058  d019              BEQ      |L18.142|
00005a  2c80              CMP      r4,#0x80
00005c  d017              BEQ      |L18.142|
00005e  f5b47f80          CMP      r4,#0x100
000062  d014              BEQ      |L18.142|
000064  f5b47f00          CMP      r4,#0x200
000068  d011              BEQ      |L18.142|
00006a  f5b46f80          CMP      r4,#0x400
00006e  d00e              BEQ      |L18.142|
000070  f5b46f00          CMP      r4,#0x800
000074  d00b              BEQ      |L18.142|
000076  f5b45f80          CMP      r4,#0x1000
00007a  d008              BEQ      |L18.142|
00007c  f5b45f00          CMP      r4,#0x2000
000080  d005              BEQ      |L18.142|
000082  f5b44f80          CMP      r4,#0x4000
000086  d002              BEQ      |L18.142|
000088  f5b44f00          CMP      r4,#0x8000
00008c  d101              BNE      |L18.146|
                  |L18.142|
00008e  2101              MOVS     r1,#1
000090  e000              B        |L18.148|
                  |L18.146|
000092  2100              MOVS     r1,#0
                  |L18.148|
000094  4608              MOV      r0,r1
000096  f7fffffe          BL       assert_param
;;;399      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
00009a  b10e              CBZ      r6,|L18.160|
00009c  2e01              CMP      r6,#1
00009e  d101              BNE      |L18.164|
                  |L18.160|
0000a0  2101              MOVS     r1,#1
0000a2  e000              B        |L18.166|
                  |L18.164|
0000a4  2100              MOVS     r1,#0
                  |L18.166|
0000a6  4608              MOV      r0,r1
0000a8  f7fffffe          BL       assert_param
;;;400      
;;;401      if (BitVal != Bit_RESET)
0000ac  b10e              CBZ      r6,|L18.178|
;;;402      {
;;;403        GPIOx->BSRR = GPIO_Pin;
0000ae  612c              STR      r4,[r5,#0x10]
0000b0  e000              B        |L18.180|
                  |L18.178|
;;;404      }
;;;405      else
;;;406      {
;;;407        GPIOx->BRR = GPIO_Pin;
0000b2  616c              STR      r4,[r5,#0x14]
                  |L18.180|
;;;408      }
;;;409    }
0000b4  bd70              POP      {r4-r6,pc}
;;;410    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L18.184|
                          DCD      0x40010800
                  |L18.188|
                          DCD      0x40010c00
                  |L18.192|
                          DCD      0x40011000
                  |L18.196|
                          DCD      0x40011400
                  |L18.200|
                          DCD      0x40011800
                  |L18.204|
                          DCD      0x40011c00
                  |L18.208|
                          DCD      0x40012000
