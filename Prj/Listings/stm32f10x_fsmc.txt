; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f10x_fsmc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f10x_fsmc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Board\inc -I..\Chip\Hal_lib\inc -I..\Chip\Startup\inc -I..\coremark -I..\Chip\CMSIS -I.\RTE\_CoreMark -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F10X_MD --omf_browse=.\objects\stm32f10x_fsmc.crf ..\Chip\Hal_lib\stm32f10x_fsmc.c]
                          THUMB

                          AREA ||i.FSMC_ClearFlag||, CODE, READONLY, ALIGN=2

                  FSMC_ClearFlag PROC
;;;746      */
;;;747    void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;748    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;749     /* Check the parameters */
;;;750      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
000006  2c10              CMP      r4,#0x10
000008  d005              BEQ      |L1.22|
00000a  f5b47f80          CMP      r4,#0x100
00000e  d002              BEQ      |L1.22|
000010  f5b45f80          CMP      r4,#0x1000
000014  d101              BNE      |L1.26|
                  |L1.22|
000016  2101              MOVS     r1,#1
000018  e000              B        |L1.28|
                  |L1.26|
00001a  2100              MOVS     r1,#0
                  |L1.28|
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       assert_param
;;;751      assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
000022  f0250107          BIC      r1,r5,#7
000026  b911              CBNZ     r1,|L1.46|
000028  b10d              CBZ      r5,|L1.46|
00002a  2101              MOVS     r1,#1
00002c  e000              B        |L1.48|
                  |L1.46|
00002e  2100              MOVS     r1,#0
                  |L1.48|
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       assert_param
;;;752        
;;;753      if(FSMC_Bank == FSMC_Bank2_NAND)
000036  2c10              CMP      r4,#0x10
000038  d107              BNE      |L1.74|
;;;754      {
;;;755        FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
00003a  f04f4020          MOV      r0,#0xa0000000
00003e  6e40              LDR      r0,[r0,#0x64]
000040  43a8              BICS     r0,r0,r5
000042  f04f4120          MOV      r1,#0xa0000000
000046  6648              STR      r0,[r1,#0x64]
000048  e012              B        |L1.112|
                  |L1.74|
;;;756      }  
;;;757      else if(FSMC_Bank == FSMC_Bank3_NAND)
00004a  f5b47f80          CMP      r4,#0x100
00004e  d107              BNE      |L1.96|
;;;758      {
;;;759        FSMC_Bank3->SR3 &= ~FSMC_FLAG;
000050  4808              LDR      r0,|L1.116|
000052  6800              LDR      r0,[r0,#0]
000054  43a8              BICS     r0,r0,r5
000056  f04f4120          MOV      r1,#0xa0000000
00005a  f8c10084          STR      r0,[r1,#0x84]
00005e  e007              B        |L1.112|
                  |L1.96|
;;;760      }
;;;761      /* FSMC_Bank4_PCCARD*/
;;;762      else
;;;763      {
;;;764        FSMC_Bank4->SR4 &= ~FSMC_FLAG;
000060  4804              LDR      r0,|L1.116|
000062  3020              ADDS     r0,r0,#0x20
000064  6800              LDR      r0,[r0,#0]
000066  43a8              BICS     r0,r0,r5
000068  f04f4120          MOV      r1,#0xa0000000
00006c  f8c100a4          STR      r0,[r1,#0xa4]
                  |L1.112|
;;;765      }
;;;766    }
000070  bd70              POP      {r4-r6,pc}
;;;767    
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      0xa0000084

                          AREA ||i.FSMC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  FSMC_ClearITPendingBit PROC
;;;832      */
;;;833    void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;834    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;835      /* Check the parameters */
;;;836      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
000006  2c10              CMP      r4,#0x10
000008  d005              BEQ      |L2.22|
00000a  f5b47f80          CMP      r4,#0x100
00000e  d002              BEQ      |L2.22|
000010  f5b45f80          CMP      r4,#0x1000
000014  d101              BNE      |L2.26|
                  |L2.22|
000016  2101              MOVS     r1,#1
000018  e000              B        |L2.28|
                  |L2.26|
00001a  2100              MOVS     r1,#0
                  |L2.28|
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       assert_param
;;;837      assert_param(IS_FSMC_IT(FSMC_IT));
000022  f0250138          BIC      r1,r5,#0x38
000026  b911              CBNZ     r1,|L2.46|
000028  b10d              CBZ      r5,|L2.46|
00002a  2101              MOVS     r1,#1
00002c  e000              B        |L2.48|
                  |L2.46|
00002e  2100              MOVS     r1,#0
                  |L2.48|
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       assert_param
;;;838        
;;;839      if(FSMC_Bank == FSMC_Bank2_NAND)
000036  2c10              CMP      r4,#0x10
000038  d108              BNE      |L2.76|
;;;840      {
;;;841        FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
00003a  f04f4020          MOV      r0,#0xa0000000
00003e  6e40              LDR      r0,[r0,#0x64]
000040  ea2000d5          BIC      r0,r0,r5,LSR #3
000044  f04f4120          MOV      r1,#0xa0000000
000048  6648              STR      r0,[r1,#0x64]
00004a  e014              B        |L2.118|
                  |L2.76|
;;;842      }  
;;;843      else if(FSMC_Bank == FSMC_Bank3_NAND)
00004c  f5b47f80          CMP      r4,#0x100
000050  d108              BNE      |L2.100|
;;;844      {
;;;845        FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
000052  4809              LDR      r0,|L2.120|
000054  6800              LDR      r0,[r0,#0]
000056  ea2000d5          BIC      r0,r0,r5,LSR #3
00005a  f04f4120          MOV      r1,#0xa0000000
00005e  f8c10084          STR      r0,[r1,#0x84]
000062  e008              B        |L2.118|
                  |L2.100|
;;;846      }
;;;847      /* FSMC_Bank4_PCCARD*/
;;;848      else
;;;849      {
;;;850        FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
000064  4804              LDR      r0,|L2.120|
000066  3020              ADDS     r0,r0,#0x20
000068  6800              LDR      r0,[r0,#0]
00006a  ea2000d5          BIC      r0,r0,r5,LSR #3
00006e  f04f4120          MOV      r1,#0xa0000000
000072  f8c100a4          STR      r0,[r1,#0xa4]
                  |L2.118|
;;;851      }
;;;852    }
000076  bd70              POP      {r4-r6,pc}
;;;853    
                          ENDP

                  |L2.120|
                          DCD      0xa0000084

                          AREA ||i.FSMC_GetECC||, CODE, READONLY, ALIGN=2

                  FSMC_GetECC PROC
;;;602      */
;;;603    uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
000000  4601              MOV      r1,r0
;;;604    {
;;;605      uint32_t eccval = 0x00000000;
000002  2000              MOVS     r0,#0
;;;606      
;;;607      if(FSMC_Bank == FSMC_Bank2_NAND)
000004  2910              CMP      r1,#0x10
000006  d103              BNE      |L3.16|
;;;608      {
;;;609        /* Get the ECCR2 register value */
;;;610        eccval = FSMC_Bank2->ECCR2;
000008  f04f4220          MOV      r2,#0xa0000000
00000c  6f50              LDR      r0,[r2,#0x74]
00000e  e001              B        |L3.20|
                  |L3.16|
;;;611      }
;;;612      else
;;;613      {
;;;614        /* Get the ECCR3 register value */
;;;615        eccval = FSMC_Bank3->ECCR3;
000010  4a01              LDR      r2,|L3.24|
000012  6810              LDR      r0,[r2,#0]
                  |L3.20|
;;;616      }
;;;617      /* Return the error correction code value */
;;;618      return(eccval);
;;;619    }
000014  4770              BX       lr
;;;620    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0xa0000094

                          AREA ||i.FSMC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FSMC_GetFlagStatus PROC
;;;696      */
;;;697    FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;698    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;699      FlagStatus bitstatus = RESET;
000008  2600              MOVS     r6,#0
;;;700      uint32_t tmpsr = 0x00000000;
00000a  2700              MOVS     r7,#0
;;;701      
;;;702      /* Check the parameters */
;;;703      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
00000c  2c10              CMP      r4,#0x10
00000e  d005              BEQ      |L4.28|
000010  f5b47f80          CMP      r4,#0x100
000014  d002              BEQ      |L4.28|
000016  f5b45f80          CMP      r4,#0x1000
00001a  d101              BNE      |L4.32|
                  |L4.28|
00001c  2101              MOVS     r1,#1
00001e  e000              B        |L4.34|
                  |L4.32|
000020  2100              MOVS     r1,#0
                  |L4.34|
000022  4608              MOV      r0,r1
000024  f7fffffe          BL       assert_param
;;;704      assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
000028  2d01              CMP      r5,#1
00002a  d005              BEQ      |L4.56|
00002c  2d02              CMP      r5,#2
00002e  d003              BEQ      |L4.56|
000030  2d04              CMP      r5,#4
000032  d001              BEQ      |L4.56|
000034  2d40              CMP      r5,#0x40
000036  d101              BNE      |L4.60|
                  |L4.56|
000038  2101              MOVS     r1,#1
00003a  e000              B        |L4.62|
                  |L4.60|
00003c  2100              MOVS     r1,#0
                  |L4.62|
00003e  4608              MOV      r0,r1
000040  f7fffffe          BL       assert_param
;;;705      
;;;706      if(FSMC_Bank == FSMC_Bank2_NAND)
000044  2c10              CMP      r4,#0x10
000046  d103              BNE      |L4.80|
;;;707      {
;;;708        tmpsr = FSMC_Bank2->SR2;
000048  f04f4020          MOV      r0,#0xa0000000
00004c  6e47              LDR      r7,[r0,#0x64]
00004e  e008              B        |L4.98|
                  |L4.80|
;;;709      }  
;;;710      else if(FSMC_Bank == FSMC_Bank3_NAND)
000050  f5b47f80          CMP      r4,#0x100
000054  d102              BNE      |L4.92|
;;;711      {
;;;712        tmpsr = FSMC_Bank3->SR3;
000056  4807              LDR      r0,|L4.116|
000058  6807              LDR      r7,[r0,#0]
00005a  e002              B        |L4.98|
                  |L4.92|
;;;713      }
;;;714      /* FSMC_Bank4_PCCARD*/
;;;715      else
;;;716      {
;;;717        tmpsr = FSMC_Bank4->SR4;
00005c  4805              LDR      r0,|L4.116|
00005e  3020              ADDS     r0,r0,#0x20
000060  6807              LDR      r7,[r0,#0]
                  |L4.98|
;;;718      } 
;;;719      
;;;720      /* Get the flag status */
;;;721      if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
000062  ea070005          AND      r0,r7,r5
000066  b108              CBZ      r0,|L4.108|
;;;722      {
;;;723        bitstatus = SET;
000068  2601              MOVS     r6,#1
00006a  e000              B        |L4.110|
                  |L4.108|
;;;724      }
;;;725      else
;;;726      {
;;;727        bitstatus = RESET;
00006c  2600              MOVS     r6,#0
                  |L4.110|
;;;728      }
;;;729      /* Return the flag status */
;;;730      return bitstatus;
00006e  4630              MOV      r0,r6
;;;731    }
000070  e8bd81f0          POP      {r4-r8,pc}
;;;732    
                          ENDP

                  |L4.116|
                          DCD      0xa0000084

                          AREA ||i.FSMC_GetITStatus||, CODE, READONLY, ALIGN=2

                  FSMC_GetITStatus PROC
;;;781      */
;;;782    ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;783    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;784      ITStatus bitstatus = RESET;
000008  2700              MOVS     r7,#0
;;;785      uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
00000a  2600              MOVS     r6,#0
00000c  46b0              MOV      r8,r6
00000e  46b1              MOV      r9,r6
;;;786      
;;;787      /* Check the parameters */
;;;788      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
000010  2c10              CMP      r4,#0x10
000012  d005              BEQ      |L5.32|
000014  f5b47f80          CMP      r4,#0x100
000018  d002              BEQ      |L5.32|
00001a  f5b45f80          CMP      r4,#0x1000
00001e  d101              BNE      |L5.36|
                  |L5.32|
000020  2101              MOVS     r1,#1
000022  e000              B        |L5.38|
                  |L5.36|
000024  2100              MOVS     r1,#0
                  |L5.38|
000026  4608              MOV      r0,r1
000028  f7fffffe          BL       assert_param
;;;789      assert_param(IS_FSMC_GET_IT(FSMC_IT));
00002c  2d08              CMP      r5,#8
00002e  d003              BEQ      |L5.56|
000030  2d10              CMP      r5,#0x10
000032  d001              BEQ      |L5.56|
000034  2d20              CMP      r5,#0x20
000036  d101              BNE      |L5.60|
                  |L5.56|
000038  2101              MOVS     r1,#1
00003a  e000              B        |L5.62|
                  |L5.60|
00003c  2100              MOVS     r1,#0
                  |L5.62|
00003e  4608              MOV      r0,r1
000040  f7fffffe          BL       assert_param
;;;790      
;;;791      if(FSMC_Bank == FSMC_Bank2_NAND)
000044  2c10              CMP      r4,#0x10
000046  d103              BNE      |L5.80|
;;;792      {
;;;793        tmpsr = FSMC_Bank2->SR2;
000048  f04f4020          MOV      r0,#0xa0000000
00004c  6e46              LDR      r6,[r0,#0x64]
00004e  e008              B        |L5.98|
                  |L5.80|
;;;794      }  
;;;795      else if(FSMC_Bank == FSMC_Bank3_NAND)
000050  f5b47f80          CMP      r4,#0x100
000054  d102              BNE      |L5.92|
;;;796      {
;;;797        tmpsr = FSMC_Bank3->SR3;
000056  480b              LDR      r0,|L5.132|
000058  6806              LDR      r6,[r0,#0]
00005a  e002              B        |L5.98|
                  |L5.92|
;;;798      }
;;;799      /* FSMC_Bank4_PCCARD*/
;;;800      else
;;;801      {
;;;802        tmpsr = FSMC_Bank4->SR4;
00005c  4809              LDR      r0,|L5.132|
00005e  3020              ADDS     r0,r0,#0x20
000060  6806              LDR      r6,[r0,#0]
                  |L5.98|
;;;803      } 
;;;804      
;;;805      itstatus = tmpsr & FSMC_IT;
000062  ea060805          AND      r8,r6,r5
;;;806      
;;;807      itenable = tmpsr & (FSMC_IT >> 3);
000066  ea0609d5          AND      r9,r6,r5,LSR #3
;;;808      if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
00006a  f1b80f00          CMP      r8,#0
00006e  d004              BEQ      |L5.122|
000070  f1b90f00          CMP      r9,#0
000074  d001              BEQ      |L5.122|
;;;809      {
;;;810        bitstatus = SET;
000076  2701              MOVS     r7,#1
000078  e000              B        |L5.124|
                  |L5.122|
;;;811      }
;;;812      else
;;;813      {
;;;814        bitstatus = RESET;
00007a  2700              MOVS     r7,#0
                  |L5.124|
;;;815      }
;;;816      return bitstatus; 
00007c  4638              MOV      r0,r7
;;;817    }
00007e  e8bd87f0          POP      {r4-r10,pc}
;;;818    
                          ENDP

000082  0000              DCW      0x0000
                  |L5.132|
                          DCD      0xa0000084

                          AREA ||i.FSMC_ITConfig||, CODE, READONLY, ALIGN=2

                  FSMC_ITConfig PROC
;;;636      */
;;;637    void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;638    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;639      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
000008  2d10              CMP      r5,#0x10
00000a  d005              BEQ      |L6.24|
00000c  f5b57f80          CMP      r5,#0x100
000010  d002              BEQ      |L6.24|
000012  f5b55f80          CMP      r5,#0x1000
000016  d101              BNE      |L6.28|
                  |L6.24|
000018  2101              MOVS     r1,#1
00001a  e000              B        |L6.30|
                  |L6.28|
00001c  2100              MOVS     r1,#0
                  |L6.30|
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       assert_param
;;;640      assert_param(IS_FSMC_IT(FSMC_IT));	
000024  f0240138          BIC      r1,r4,#0x38
000028  b911              CBNZ     r1,|L6.48|
00002a  b10c              CBZ      r4,|L6.48|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L6.50|
                  |L6.48|
000030  2100              MOVS     r1,#0
                  |L6.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;641      assert_param(IS_FUNCTIONAL_STATE(NewState));
000038  b10e              CBZ      r6,|L6.62|
00003a  2e01              CMP      r6,#1
00003c  d101              BNE      |L6.66|
                  |L6.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L6.68|
                  |L6.66|
000042  2100              MOVS     r1,#0
                  |L6.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;642      
;;;643      if (NewState != DISABLE)
00004a  b1ee              CBZ      r6,|L6.136|
;;;644      {
;;;645        /* Enable the selected FSMC_Bank2 interrupts */
;;;646        if(FSMC_Bank == FSMC_Bank2_NAND)
00004c  2d10              CMP      r5,#0x10
00004e  d107              BNE      |L6.96|
;;;647        {
;;;648          FSMC_Bank2->SR2 |= FSMC_IT;
000050  f04f4020          MOV      r0,#0xa0000000
000054  6e40              LDR      r0,[r0,#0x64]
000056  4320              ORRS     r0,r0,r4
000058  f04f4120          MOV      r1,#0xa0000000
00005c  6648              STR      r0,[r1,#0x64]
00005e  e030              B        |L6.194|
                  |L6.96|
;;;649        }
;;;650        /* Enable the selected FSMC_Bank3 interrupts */
;;;651        else if (FSMC_Bank == FSMC_Bank3_NAND)
000060  f5b57f80          CMP      r5,#0x100
000064  d107              BNE      |L6.118|
;;;652        {
;;;653          FSMC_Bank3->SR3 |= FSMC_IT;
000066  4817              LDR      r0,|L6.196|
000068  6800              LDR      r0,[r0,#0]
00006a  4320              ORRS     r0,r0,r4
00006c  f04f4120          MOV      r1,#0xa0000000
000070  f8c10084          STR      r0,[r1,#0x84]
000074  e025              B        |L6.194|
                  |L6.118|
;;;654        }
;;;655        /* Enable the selected FSMC_Bank4 interrupts */
;;;656        else
;;;657        {
;;;658          FSMC_Bank4->SR4 |= FSMC_IT;    
000076  4813              LDR      r0,|L6.196|
000078  3020              ADDS     r0,r0,#0x20
00007a  6800              LDR      r0,[r0,#0]
00007c  4320              ORRS     r0,r0,r4
00007e  f04f4120          MOV      r1,#0xa0000000
000082  f8c100a4          STR      r0,[r1,#0xa4]
000086  e01c              B        |L6.194|
                  |L6.136|
;;;659        }
;;;660      }
;;;661      else
;;;662      {
;;;663        /* Disable the selected FSMC_Bank2 interrupts */
;;;664        if(FSMC_Bank == FSMC_Bank2_NAND)
000088  2d10              CMP      r5,#0x10
00008a  d107              BNE      |L6.156|
;;;665        {
;;;666          
;;;667          FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
00008c  f04f4020          MOV      r0,#0xa0000000
000090  6e40              LDR      r0,[r0,#0x64]
000092  43a0              BICS     r0,r0,r4
000094  f04f4120          MOV      r1,#0xa0000000
000098  6648              STR      r0,[r1,#0x64]
00009a  e012              B        |L6.194|
                  |L6.156|
;;;668        }
;;;669        /* Disable the selected FSMC_Bank3 interrupts */
;;;670        else if (FSMC_Bank == FSMC_Bank3_NAND)
00009c  f5b57f80          CMP      r5,#0x100
0000a0  d107              BNE      |L6.178|
;;;671        {
;;;672          FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
0000a2  4808              LDR      r0,|L6.196|
0000a4  6800              LDR      r0,[r0,#0]
0000a6  43a0              BICS     r0,r0,r4
0000a8  f04f4120          MOV      r1,#0xa0000000
0000ac  f8c10084          STR      r0,[r1,#0x84]
0000b0  e007              B        |L6.194|
                  |L6.178|
;;;673        }
;;;674        /* Disable the selected FSMC_Bank4 interrupts */
;;;675        else
;;;676        {
;;;677          FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
0000b2  4804              LDR      r0,|L6.196|
0000b4  3020              ADDS     r0,r0,#0x20
0000b6  6800              LDR      r0,[r0,#0]
0000b8  43a0              BICS     r0,r0,r4
0000ba  f04f4120          MOV      r1,#0xa0000000
0000be  f8c100a4          STR      r0,[r1,#0xa4]
                  |L6.194|
;;;678        }
;;;679      }
;;;680    }
0000c2  bd70              POP      {r4-r6,pc}
;;;681    
                          ENDP

                  |L6.196|
                          DCD      0xa0000084

                          AREA ||i.FSMC_NANDCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NANDCmd PROC
;;;500      */
;;;501    void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;502    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;503      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
000006  2c10              CMP      r4,#0x10
000008  d002              BEQ      |L7.16|
00000a  f5b47f80          CMP      r4,#0x100
00000e  d101              BNE      |L7.20|
                  |L7.16|
000010  2101              MOVS     r1,#1
000012  e000              B        |L7.22|
                  |L7.20|
000014  2100              MOVS     r1,#0
                  |L7.22|
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       assert_param
;;;504      assert_param(IS_FUNCTIONAL_STATE(NewState));
00001c  b10d              CBZ      r5,|L7.34|
00001e  2d01              CMP      r5,#1
000020  d101              BNE      |L7.38|
                  |L7.34|
000022  2101              MOVS     r1,#1
000024  e000              B        |L7.40|
                  |L7.38|
000026  2100              MOVS     r1,#0
                  |L7.40|
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       assert_param
;;;505      
;;;506      if (NewState != DISABLE)
00002e  b19d              CBZ      r5,|L7.88|
;;;507      {
;;;508        /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
;;;509        if(FSMC_Bank == FSMC_Bank2_NAND)
000030  2c10              CMP      r4,#0x10
000032  d108              BNE      |L7.70|
;;;510        {
;;;511          FSMC_Bank2->PCR2 |= PCR_PBKEN_Set;
000034  f04f4020          MOV      r0,#0xa0000000
000038  6e00              LDR      r0,[r0,#0x60]
00003a  f0400004          ORR      r0,r0,#4
00003e  f04f4120          MOV      r1,#0xa0000000
000042  6608              STR      r0,[r1,#0x60]
000044  e01b              B        |L7.126|
                  |L7.70|
;;;512        }
;;;513        else
;;;514        {
;;;515          FSMC_Bank3->PCR3 |= PCR_PBKEN_Set;
000046  480e              LDR      r0,|L7.128|
000048  6800              LDR      r0,[r0,#0]
00004a  f0400004          ORR      r0,r0,#4
00004e  f04f4120          MOV      r1,#0xa0000000
000052  f8c10080          STR      r0,[r1,#0x80]
000056  e012              B        |L7.126|
                  |L7.88|
;;;516        }
;;;517      }
;;;518      else
;;;519      {
;;;520        /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
;;;521        if(FSMC_Bank == FSMC_Bank2_NAND)
000058  2c10              CMP      r4,#0x10
00005a  d108              BNE      |L7.110|
;;;522        {
;;;523          FSMC_Bank2->PCR2 &= PCR_PBKEN_Reset;
00005c  f04f4020          MOV      r0,#0xa0000000
000060  6e00              LDR      r0,[r0,#0x60]
000062  4908              LDR      r1,|L7.132|
000064  4008              ANDS     r0,r0,r1
000066  f04f4120          MOV      r1,#0xa0000000
00006a  6608              STR      r0,[r1,#0x60]
00006c  e007              B        |L7.126|
                  |L7.110|
;;;524        }
;;;525        else
;;;526        {
;;;527          FSMC_Bank3->PCR3 &= PCR_PBKEN_Reset;
00006e  4804              LDR      r0,|L7.128|
000070  6800              LDR      r0,[r0,#0]
000072  4904              LDR      r1,|L7.132|
000074  4008              ANDS     r0,r0,r1
000076  f04f4120          MOV      r1,#0xa0000000
00007a  f8c10080          STR      r0,[r1,#0x80]
                  |L7.126|
;;;528        }
;;;529      }
;;;530    }
00007e  bd70              POP      {r4-r6,pc}
;;;531    
                          ENDP

                  |L7.128|
                          DCD      0xa0000080
                  |L7.132|
                          DCD      0x000ffffb

                          AREA ||i.FSMC_NANDDeInit||, CODE, READONLY, ALIGN=2

                  FSMC_NANDDeInit PROC
;;;128      */
;;;129    void FSMC_NANDDeInit(uint32_t FSMC_Bank)
000000  b510              PUSH     {r4,lr}
;;;130    {
000002  4604              MOV      r4,r0
;;;131      /* Check the parameter */
;;;132      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
000004  2c10              CMP      r4,#0x10
000006  d002              BEQ      |L8.14|
000008  f5b47f80          CMP      r4,#0x100
00000c  d101              BNE      |L8.18|
                  |L8.14|
00000e  2101              MOVS     r1,#1
000010  e000              B        |L8.20|
                  |L8.18|
000012  2100              MOVS     r1,#0
                  |L8.20|
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       assert_param
;;;133      
;;;134      if(FSMC_Bank == FSMC_Bank2_NAND)
00001a  2c10              CMP      r4,#0x10
00001c  d10a              BNE      |L8.52|
;;;135      {
;;;136        /* Set the FSMC_Bank2 registers to their reset values */
;;;137        FSMC_Bank2->PCR2 = 0x00000018;
00001e  2018              MOVS     r0,#0x18
000020  f04f4120          MOV      r1,#0xa0000000
000024  6608              STR      r0,[r1,#0x60]
;;;138        FSMC_Bank2->SR2 = 0x00000040;
000026  2040              MOVS     r0,#0x40
000028  6648              STR      r0,[r1,#0x64]
;;;139        FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
00002a  f04f30fc          MOV      r0,#0xfcfcfcfc
00002e  6688              STR      r0,[r1,#0x68]
;;;140        FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
000030  66c8              STR      r0,[r1,#0x6c]
000032  e010              B        |L8.86|
                  |L8.52|
;;;141      }
;;;142      /* FSMC_Bank3_NAND */  
;;;143      else
;;;144      {
;;;145        /* Set the FSMC_Bank3 registers to their reset values */
;;;146        FSMC_Bank3->PCR3 = 0x00000018;
000034  2018              MOVS     r0,#0x18
000036  4908              LDR      r1,|L8.88|
000038  6008              STR      r0,[r1,#0]
;;;147        FSMC_Bank3->SR3 = 0x00000040;
00003a  2040              MOVS     r0,#0x40
00003c  f04f4120          MOV      r1,#0xa0000000
000040  f8c10084          STR      r0,[r1,#0x84]
;;;148        FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
000044  f04f30fc          MOV      r0,#0xfcfcfcfc
000048  4903              LDR      r1,|L8.88|
00004a  3108              ADDS     r1,r1,#8
00004c  6008              STR      r0,[r1,#0]
;;;149        FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
00004e  f04f4120          MOV      r1,#0xa0000000
000052  f8c1008c          STR      r0,[r1,#0x8c]
                  |L8.86|
;;;150      }  
;;;151    }
000056  bd10              POP      {r4,pc}
;;;152    
                          ENDP

                  |L8.88|
                          DCD      0xa0000080

                          AREA ||i.FSMC_NANDECCCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NANDECCCmd PROC
;;;563      */
;;;564    void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;565    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;566      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
000006  2c10              CMP      r4,#0x10
000008  d002              BEQ      |L9.16|
00000a  f5b47f80          CMP      r4,#0x100
00000e  d101              BNE      |L9.20|
                  |L9.16|
000010  2101              MOVS     r1,#1
000012  e000              B        |L9.22|
                  |L9.20|
000014  2100              MOVS     r1,#0
                  |L9.22|
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       assert_param
;;;567      assert_param(IS_FUNCTIONAL_STATE(NewState));
00001c  b10d              CBZ      r5,|L9.34|
00001e  2d01              CMP      r5,#1
000020  d101              BNE      |L9.38|
                  |L9.34|
000022  2101              MOVS     r1,#1
000024  e000              B        |L9.40|
                  |L9.38|
000026  2100              MOVS     r1,#0
                  |L9.40|
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       assert_param
;;;568      
;;;569      if (NewState != DISABLE)
00002e  b19d              CBZ      r5,|L9.88|
;;;570      {
;;;571        /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
;;;572        if(FSMC_Bank == FSMC_Bank2_NAND)
000030  2c10              CMP      r4,#0x10
000032  d108              BNE      |L9.70|
;;;573        {
;;;574          FSMC_Bank2->PCR2 |= PCR_ECCEN_Set;
000034  f04f4020          MOV      r0,#0xa0000000
000038  6e00              LDR      r0,[r0,#0x60]
00003a  f0400040          ORR      r0,r0,#0x40
00003e  f04f4120          MOV      r1,#0xa0000000
000042  6608              STR      r0,[r1,#0x60]
000044  e01b              B        |L9.126|
                  |L9.70|
;;;575        }
;;;576        else
;;;577        {
;;;578          FSMC_Bank3->PCR3 |= PCR_ECCEN_Set;
000046  480e              LDR      r0,|L9.128|
000048  6800              LDR      r0,[r0,#0]
00004a  f0400040          ORR      r0,r0,#0x40
00004e  f04f4120          MOV      r1,#0xa0000000
000052  f8c10080          STR      r0,[r1,#0x80]
000056  e012              B        |L9.126|
                  |L9.88|
;;;579        }
;;;580      }
;;;581      else
;;;582      {
;;;583        /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
;;;584        if(FSMC_Bank == FSMC_Bank2_NAND)
000058  2c10              CMP      r4,#0x10
00005a  d108              BNE      |L9.110|
;;;585        {
;;;586          FSMC_Bank2->PCR2 &= PCR_ECCEN_Reset;
00005c  f04f4020          MOV      r0,#0xa0000000
000060  6e00              LDR      r0,[r0,#0x60]
000062  4908              LDR      r1,|L9.132|
000064  4008              ANDS     r0,r0,r1
000066  f04f4120          MOV      r1,#0xa0000000
00006a  6608              STR      r0,[r1,#0x60]
00006c  e007              B        |L9.126|
                  |L9.110|
;;;587        }
;;;588        else
;;;589        {
;;;590          FSMC_Bank3->PCR3 &= PCR_ECCEN_Reset;
00006e  4804              LDR      r0,|L9.128|
000070  6800              LDR      r0,[r0,#0]
000072  4904              LDR      r1,|L9.132|
000074  4008              ANDS     r0,r0,r1
000076  f04f4120          MOV      r1,#0xa0000000
00007a  f8c10080          STR      r0,[r1,#0x80]
                  |L9.126|
;;;591        }
;;;592      }
;;;593    }
00007e  bd70              POP      {r4-r6,pc}
;;;594    
                          ENDP

                  |L9.128|
                          DCD      0xa0000080
                  |L9.132|
                          DCD      0x000fffbf

                          AREA ||i.FSMC_NANDInit||, CODE, READONLY, ALIGN=2

                  FSMC_NANDInit PROC
;;;261      */
;;;262    void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;263    {
000004  4604              MOV      r4,r0
;;;264      uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
00000a  2700              MOVS     r7,#0
;;;265        
;;;266      /* Check the parameters */
;;;267      assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
00000c  6821              LDR      r1,[r4,#0]
00000e  2910              CMP      r1,#0x10
000010  d003              BEQ      |L10.26|
000012  6821              LDR      r1,[r4,#0]
000014  f5b17f80          CMP      r1,#0x100
000018  d101              BNE      |L10.30|
                  |L10.26|
00001a  2101              MOVS     r1,#1
00001c  e000              B        |L10.32|
                  |L10.30|
00001e  2100              MOVS     r1,#0
                  |L10.32|
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       assert_param
;;;268      assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
000026  6861              LDR      r1,[r4,#4]
000028  b111              CBZ      r1,|L10.48|
00002a  6861              LDR      r1,[r4,#4]
00002c  2902              CMP      r1,#2
00002e  d101              BNE      |L10.52|
                  |L10.48|
000030  2101              MOVS     r1,#1
000032  e000              B        |L10.54|
                  |L10.52|
000034  2100              MOVS     r1,#0
                  |L10.54|
000036  4608              MOV      r0,r1
000038  f7fffffe          BL       assert_param
;;;269      assert_param( IS_FSMC_MEMORY_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
00003c  68a1              LDR      r1,[r4,#8]
00003e  b111              CBZ      r1,|L10.70|
000040  68a1              LDR      r1,[r4,#8]
000042  2910              CMP      r1,#0x10
000044  d101              BNE      |L10.74|
                  |L10.70|
000046  2101              MOVS     r1,#1
000048  e000              B        |L10.76|
                  |L10.74|
00004a  2100              MOVS     r1,#0
                  |L10.76|
00004c  4608              MOV      r0,r1
00004e  f7fffffe          BL       assert_param
;;;270      assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
000052  68e1              LDR      r1,[r4,#0xc]
000054  b111              CBZ      r1,|L10.92|
000056  68e1              LDR      r1,[r4,#0xc]
000058  2940              CMP      r1,#0x40
00005a  d101              BNE      |L10.96|
                  |L10.92|
00005c  2101              MOVS     r1,#1
00005e  e000              B        |L10.98|
                  |L10.96|
000060  2100              MOVS     r1,#0
                  |L10.98|
000062  4608              MOV      r0,r1
000064  f7fffffe          BL       assert_param
;;;271      assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
000068  6921              LDR      r1,[r4,#0x10]
00006a  b199              CBZ      r1,|L10.148|
00006c  6921              LDR      r1,[r4,#0x10]
00006e  f5b13f00          CMP      r1,#0x20000
000072  d00f              BEQ      |L10.148|
000074  6921              LDR      r1,[r4,#0x10]
000076  f5b12f80          CMP      r1,#0x40000
00007a  d00b              BEQ      |L10.148|
00007c  6921              LDR      r1,[r4,#0x10]
00007e  f5b12fc0          CMP      r1,#0x60000
000082  d007              BEQ      |L10.148|
000084  6921              LDR      r1,[r4,#0x10]
000086  f5b12f00          CMP      r1,#0x80000
00008a  d003              BEQ      |L10.148|
00008c  6921              LDR      r1,[r4,#0x10]
00008e  f5b12f20          CMP      r1,#0xa0000
000092  d101              BNE      |L10.152|
                  |L10.148|
000094  2101              MOVS     r1,#1
000096  e000              B        |L10.154|
                  |L10.152|
000098  2100              MOVS     r1,#0
                  |L10.154|
00009a  4608              MOV      r0,r1
00009c  f7fffffe          BL       assert_param
;;;272      assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
0000a0  6961              LDR      r1,[r4,#0x14]
0000a2  29ff              CMP      r1,#0xff
0000a4  d801              BHI      |L10.170|
0000a6  2101              MOVS     r1,#1
0000a8  e000              B        |L10.172|
                  |L10.170|
0000aa  2100              MOVS     r1,#0
                  |L10.172|
0000ac  4608              MOV      r0,r1
0000ae  f7fffffe          BL       assert_param
;;;273      assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
0000b2  69a1              LDR      r1,[r4,#0x18]
0000b4  29ff              CMP      r1,#0xff
0000b6  d801              BHI      |L10.188|
0000b8  2101              MOVS     r1,#1
0000ba  e000              B        |L10.190|
                  |L10.188|
0000bc  2100              MOVS     r1,#0
                  |L10.190|
0000be  4608              MOV      r0,r1
0000c0  f7fffffe          BL       assert_param
;;;274      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
0000c4  69e1              LDR      r1,[r4,#0x1c]
0000c6  6809              LDR      r1,[r1,#0]
0000c8  29ff              CMP      r1,#0xff
0000ca  d801              BHI      |L10.208|
0000cc  2101              MOVS     r1,#1
0000ce  e000              B        |L10.210|
                  |L10.208|
0000d0  2100              MOVS     r1,#0
                  |L10.210|
0000d2  4608              MOV      r0,r1
0000d4  f7fffffe          BL       assert_param
;;;275      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
0000d8  69e1              LDR      r1,[r4,#0x1c]
0000da  6849              LDR      r1,[r1,#4]
0000dc  29ff              CMP      r1,#0xff
0000de  d801              BHI      |L10.228|
0000e0  2101              MOVS     r1,#1
0000e2  e000              B        |L10.230|
                  |L10.228|
0000e4  2100              MOVS     r1,#0
                  |L10.230|
0000e6  4608              MOV      r0,r1
0000e8  f7fffffe          BL       assert_param
;;;276      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
0000ec  69e1              LDR      r1,[r4,#0x1c]
0000ee  6889              LDR      r1,[r1,#8]
0000f0  29ff              CMP      r1,#0xff
0000f2  d801              BHI      |L10.248|
0000f4  2101              MOVS     r1,#1
0000f6  e000              B        |L10.250|
                  |L10.248|
0000f8  2100              MOVS     r1,#0
                  |L10.250|
0000fa  4608              MOV      r0,r1
0000fc  f7fffffe          BL       assert_param
;;;277      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
000100  69e1              LDR      r1,[r4,#0x1c]
000102  68c9              LDR      r1,[r1,#0xc]
000104  29ff              CMP      r1,#0xff
000106  d801              BHI      |L10.268|
000108  2101              MOVS     r1,#1
00010a  e000              B        |L10.270|
                  |L10.268|
00010c  2100              MOVS     r1,#0
                  |L10.270|
00010e  4608              MOV      r0,r1
000110  f7fffffe          BL       assert_param
;;;278      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
000114  6a21              LDR      r1,[r4,#0x20]
000116  6809              LDR      r1,[r1,#0]
000118  29ff              CMP      r1,#0xff
00011a  d801              BHI      |L10.288|
00011c  2101              MOVS     r1,#1
00011e  e000              B        |L10.290|
                  |L10.288|
000120  2100              MOVS     r1,#0
                  |L10.290|
000122  4608              MOV      r0,r1
000124  f7fffffe          BL       assert_param
;;;279      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
000128  6a21              LDR      r1,[r4,#0x20]
00012a  6849              LDR      r1,[r1,#4]
00012c  29ff              CMP      r1,#0xff
00012e  d801              BHI      |L10.308|
000130  2101              MOVS     r1,#1
000132  e000              B        |L10.310|
                  |L10.308|
000134  2100              MOVS     r1,#0
                  |L10.310|
000136  4608              MOV      r0,r1
000138  f7fffffe          BL       assert_param
;;;280      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
00013c  6a21              LDR      r1,[r4,#0x20]
00013e  6889              LDR      r1,[r1,#8]
000140  29ff              CMP      r1,#0xff
000142  d801              BHI      |L10.328|
000144  2101              MOVS     r1,#1
000146  e000              B        |L10.330|
                  |L10.328|
000148  2100              MOVS     r1,#0
                  |L10.330|
00014a  4608              MOV      r0,r1
00014c  f7fffffe          BL       assert_param
;;;281      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
000150  6a21              LDR      r1,[r4,#0x20]
000152  68c9              LDR      r1,[r1,#0xc]
000154  29ff              CMP      r1,#0xff
000156  d801              BHI      |L10.348|
000158  2101              MOVS     r1,#1
00015a  e000              B        |L10.350|
                  |L10.348|
00015c  2100              MOVS     r1,#0
                  |L10.350|
00015e  4608              MOV      r0,r1
000160  f7fffffe          BL       assert_param
;;;282      
;;;283      /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
;;;284      tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
000164  6860              LDR      r0,[r4,#4]
000166  f0400008          ORR      r0,r0,#8
00016a  68a1              LDR      r1,[r4,#8]
00016c  4308              ORRS     r0,r0,r1
00016e  68e1              LDR      r1,[r4,#0xc]
000170  4308              ORRS     r0,r0,r1
000172  6921              LDR      r1,[r4,#0x10]
000174  4308              ORRS     r0,r0,r1
000176  6961              LDR      r1,[r4,#0x14]
000178  ea402041          ORR      r0,r0,r1,LSL #9
00017c  69a1              LDR      r1,[r4,#0x18]
00017e  ea403541          ORR      r5,r0,r1,LSL #13
;;;285                PCR_MemoryType_NAND |
;;;286                FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
;;;287                FSMC_NANDInitStruct->FSMC_ECC |
;;;288                FSMC_NANDInitStruct->FSMC_ECCPageSize |
;;;289                (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
;;;290                (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
;;;291                
;;;292      /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
;;;293      tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
000182  69e0              LDR      r0,[r4,#0x1c]
000184  6800              LDR      r0,[r0,#0]
000186  69e1              LDR      r1,[r4,#0x1c]
000188  6849              LDR      r1,[r1,#4]
00018a  ea402001          ORR      r0,r0,r1,LSL #8
00018e  69e1              LDR      r1,[r4,#0x1c]
000190  8909              LDRH     r1,[r1,#8]
000192  ea404001          ORR      r0,r0,r1,LSL #16
000196  69e1              LDR      r1,[r4,#0x1c]
000198  7b09              LDRB     r1,[r1,#0xc]
00019a  ea406601          ORR      r6,r0,r1,LSL #24
;;;294                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;295                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;296                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;297                
;;;298      /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;299      tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
00019e  6a20              LDR      r0,[r4,#0x20]
0001a0  6800              LDR      r0,[r0,#0]
0001a2  6a21              LDR      r1,[r4,#0x20]
0001a4  6849              LDR      r1,[r1,#4]
0001a6  ea402001          ORR      r0,r0,r1,LSL #8
0001aa  6a21              LDR      r1,[r4,#0x20]
0001ac  8909              LDRH     r1,[r1,#8]
0001ae  ea404001          ORR      r0,r0,r1,LSL #16
0001b2  6a21              LDR      r1,[r4,#0x20]
0001b4  7b09              LDRB     r1,[r1,#0xc]
0001b6  ea406701          ORR      r7,r0,r1,LSL #24
;;;300                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;301                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;302                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
;;;303      
;;;304      if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
0001ba  6820              LDR      r0,[r4,#0]
0001bc  2810              CMP      r0,#0x10
0001be  d105              BNE      |L10.460|
;;;305      {
;;;306        /* FSMC_Bank2_NAND registers configuration */
;;;307        FSMC_Bank2->PCR2 = tmppcr;
0001c0  f04f4020          MOV      r0,#0xa0000000
0001c4  6605              STR      r5,[r0,#0x60]
;;;308        FSMC_Bank2->PMEM2 = tmppmem;
0001c6  6686              STR      r6,[r0,#0x68]
;;;309        FSMC_Bank2->PATT2 = tmppatt;
0001c8  66c7              STR      r7,[r0,#0x6c]
0001ca  e008              B        |L10.478|
                  |L10.460|
;;;310      }
;;;311      else
;;;312      {
;;;313        /* FSMC_Bank3_NAND registers configuration */
;;;314        FSMC_Bank3->PCR3 = tmppcr;
0001cc  4805              LDR      r0,|L10.484|
0001ce  6005              STR      r5,[r0,#0]
;;;315        FSMC_Bank3->PMEM3 = tmppmem;
0001d0  f04f4020          MOV      r0,#0xa0000000
0001d4  f8c06088          STR      r6,[r0,#0x88]
;;;316        FSMC_Bank3->PATT3 = tmppatt;
0001d8  4802              LDR      r0,|L10.484|
0001da  300c              ADDS     r0,r0,#0xc
0001dc  6007              STR      r7,[r0,#0]
                  |L10.478|
;;;317      }
;;;318    }
0001de  e8bd81f0          POP      {r4-r8,pc}
;;;319    
                          ENDP

0001e2  0000              DCW      0x0000
                  |L10.484|
                          DCD      0xa0000080

                          AREA ||i.FSMC_NANDStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NANDStructInit PROC
;;;417      */
;;;418    void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000000  2110              MOVS     r1,#0x10
;;;419    { 
;;;420      /* Reset NAND Init structure parameters values */
;;;421      FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
000002  6001              STR      r1,[r0,#0]
;;;422      FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000004  2100              MOVS     r1,#0
000006  6041              STR      r1,[r0,#4]
;;;423      FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
000008  6081              STR      r1,[r0,#8]
;;;424      FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
00000a  60c1              STR      r1,[r0,#0xc]
;;;425      FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
00000c  6101              STR      r1,[r0,#0x10]
;;;426      FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
00000e  6141              STR      r1,[r0,#0x14]
;;;427      FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
000010  6181              STR      r1,[r0,#0x18]
;;;428      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000012  21fc              MOVS     r1,#0xfc
000014  69c2              LDR      r2,[r0,#0x1c]
000016  6011              STR      r1,[r2,#0]
;;;429      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000018  69c2              LDR      r2,[r0,#0x1c]
00001a  6051              STR      r1,[r2,#4]
;;;430      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00001c  69c2              LDR      r2,[r0,#0x1c]
00001e  6091              STR      r1,[r2,#8]
;;;431      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000020  69c2              LDR      r2,[r0,#0x1c]
000022  60d1              STR      r1,[r2,#0xc]
;;;432      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000024  6a02              LDR      r2,[r0,#0x20]
000026  6011              STR      r1,[r2,#0]
;;;433      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000028  6a02              LDR      r2,[r0,#0x20]
00002a  6051              STR      r1,[r2,#4]
;;;434      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00002c  6a02              LDR      r2,[r0,#0x20]
00002e  6091              STR      r1,[r2,#8]
;;;435      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
000030  6a02              LDR      r2,[r0,#0x20]
000032  60d1              STR      r1,[r2,#0xc]
;;;436    }
000034  4770              BX       lr
;;;437    
                          ENDP


                          AREA ||i.FSMC_NORSRAMCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMCmd PROC
;;;474      */
;;;475    void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;476    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;477      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
000006  b12c              CBZ      r4,|L12.20|
000008  2c02              CMP      r4,#2
00000a  d003              BEQ      |L12.20|
00000c  2c04              CMP      r4,#4
00000e  d001              BEQ      |L12.20|
000010  2c06              CMP      r4,#6
000012  d101              BNE      |L12.24|
                  |L12.20|
000014  2101              MOVS     r1,#1
000016  e000              B        |L12.26|
                  |L12.24|
000018  2100              MOVS     r1,#0
                  |L12.26|
00001a  4608              MOV      r0,r1
00001c  f7fffffe          BL       assert_param
;;;478      assert_param(IS_FUNCTIONAL_STATE(NewState));
000020  b10d              CBZ      r5,|L12.38|
000022  2d01              CMP      r5,#1
000024  d101              BNE      |L12.42|
                  |L12.38|
000026  2101              MOVS     r1,#1
000028  e000              B        |L12.44|
                  |L12.42|
00002a  2100              MOVS     r1,#0
                  |L12.44|
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       assert_param
;;;479      
;;;480      if (NewState != DISABLE)
000032  b155              CBZ      r5,|L12.74|
;;;481      {
;;;482        /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
;;;483        FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_Set;
000034  00a0              LSLS     r0,r4,#2
000036  f1a040c0          SUB      r0,r0,#0x60000000
00003a  6800              LDR      r0,[r0,#0]
00003c  f0400101          ORR      r1,r0,#1
000040  00a0              LSLS     r0,r4,#2
000042  f1a040c0          SUB      r0,r0,#0x60000000
000046  6001              STR      r1,[r0,#0]
000048  e009              B        |L12.94|
                  |L12.74|
;;;484      }
;;;485      else
;;;486      {
;;;487        /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
;;;488        FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_Reset;
00004a  00a0              LSLS     r0,r4,#2
00004c  f1a040c0          SUB      r0,r0,#0x60000000
000050  6800              LDR      r0,[r0,#0]
000052  4903              LDR      r1,|L12.96|
000054  4008              ANDS     r0,r0,r1
000056  00a1              LSLS     r1,r4,#2
000058  f1a141c0          SUB      r1,r1,#0x60000000
00005c  6008              STR      r0,[r1,#0]
                  |L12.94|
;;;489      }
;;;490    }
00005e  bd70              POP      {r4-r6,pc}
;;;491    
                          ENDP

                  |L12.96|
                          DCD      0x000ffffe

                          AREA ||i.FSMC_NORSRAMDeInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMDeInit PROC
;;;101      */
;;;102    void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
000000  b510              PUSH     {r4,lr}
;;;103    {
000002  4604              MOV      r4,r0
;;;104      /* Check the parameter */
;;;105      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
000004  b12c              CBZ      r4,|L13.18|
000006  2c02              CMP      r4,#2
000008  d003              BEQ      |L13.18|
00000a  2c04              CMP      r4,#4
00000c  d001              BEQ      |L13.18|
00000e  2c06              CMP      r4,#6
000010  d101              BNE      |L13.22|
                  |L13.18|
000012  2101              MOVS     r1,#1
000014  e000              B        |L13.24|
                  |L13.22|
000016  2100              MOVS     r1,#0
                  |L13.24|
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       assert_param
;;;106      
;;;107      /* FSMC_Bank1_NORSRAM1 */
;;;108      if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
00001e  b934              CBNZ     r4,|L13.46|
;;;109      {
;;;110        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
000020  f24301db          MOV      r1,#0x30db
000024  00a0              LSLS     r0,r4,#2
000026  f1a040c0          SUB      r0,r0,#0x60000000
00002a  6001              STR      r1,[r0,#0]
00002c  e005              B        |L13.58|
                  |L13.46|
;;;111      }
;;;112      /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
;;;113      else
;;;114      {   
;;;115        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
00002e  f24301d2          MOV      r1,#0x30d2
000032  00a0              LSLS     r0,r4,#2
000034  f1a040c0          SUB      r0,r0,#0x60000000
000038  6001              STR      r1,[r0,#0]
                  |L13.58|
;;;116      }
;;;117      FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
00003a  f06f4170          MVN      r1,#0xf0000000
00003e  1c60              ADDS     r0,r4,#1
000040  0080              LSLS     r0,r0,#2
000042  f1a040c0          SUB      r0,r0,#0x60000000
000046  6001              STR      r1,[r0,#0]
;;;118      FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
000048  00a0              LSLS     r0,r4,#2
00004a  f1a040c0          SUB      r0,r0,#0x60000000
00004e  f8c01104          STR      r1,[r0,#0x104]
;;;119    }
000052  bd10              POP      {r4,pc}
;;;120    
                          ENDP


                          AREA ||i.FSMC_NORSRAMInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMInit PROC
;;;175      */
;;;176    void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  b510              PUSH     {r4,lr}
;;;177    { 
000002  4604              MOV      r4,r0
;;;178      /* Check the parameters */
;;;179      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
000004  6821              LDR      r1,[r4,#0]
000006  b141              CBZ      r1,|L14.26|
000008  6821              LDR      r1,[r4,#0]
00000a  2902              CMP      r1,#2
00000c  d005              BEQ      |L14.26|
00000e  6821              LDR      r1,[r4,#0]
000010  2904              CMP      r1,#4
000012  d002              BEQ      |L14.26|
000014  6821              LDR      r1,[r4,#0]
000016  2906              CMP      r1,#6
000018  d101              BNE      |L14.30|
                  |L14.26|
00001a  2101              MOVS     r1,#1
00001c  e000              B        |L14.32|
                  |L14.30|
00001e  2100              MOVS     r1,#0
                  |L14.32|
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       assert_param
;;;180      assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
000026  6861              LDR      r1,[r4,#4]
000028  b111              CBZ      r1,|L14.48|
00002a  6861              LDR      r1,[r4,#4]
00002c  2902              CMP      r1,#2
00002e  d101              BNE      |L14.52|
                  |L14.48|
000030  2101              MOVS     r1,#1
000032  e000              B        |L14.54|
                  |L14.52|
000034  2100              MOVS     r1,#0
                  |L14.54|
000036  4608              MOV      r0,r1
000038  f7fffffe          BL       assert_param
;;;181      assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
00003c  68a1              LDR      r1,[r4,#8]
00003e  b129              CBZ      r1,|L14.76|
000040  68a1              LDR      r1,[r4,#8]
000042  2904              CMP      r1,#4
000044  d002              BEQ      |L14.76|
000046  68a1              LDR      r1,[r4,#8]
000048  2908              CMP      r1,#8
00004a  d101              BNE      |L14.80|
                  |L14.76|
00004c  2101              MOVS     r1,#1
00004e  e000              B        |L14.82|
                  |L14.80|
000050  2100              MOVS     r1,#0
                  |L14.82|
000052  4608              MOV      r0,r1
000054  f7fffffe          BL       assert_param
;;;182      assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
000058  68e1              LDR      r1,[r4,#0xc]
00005a  b111              CBZ      r1,|L14.98|
00005c  68e1              LDR      r1,[r4,#0xc]
00005e  2910              CMP      r1,#0x10
000060  d101              BNE      |L14.102|
                  |L14.98|
000062  2101              MOVS     r1,#1
000064  e000              B        |L14.104|
                  |L14.102|
000066  2100              MOVS     r1,#0
                  |L14.104|
000068  4608              MOV      r0,r1
00006a  f7fffffe          BL       assert_param
;;;183      assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
00006e  6921              LDR      r1,[r4,#0x10]
000070  b119              CBZ      r1,|L14.122|
000072  6921              LDR      r1,[r4,#0x10]
000074  f5b17f80          CMP      r1,#0x100
000078  d101              BNE      |L14.126|
                  |L14.122|
00007a  2101              MOVS     r1,#1
00007c  e000              B        |L14.128|
                  |L14.126|
00007e  2100              MOVS     r1,#0
                  |L14.128|
000080  4608              MOV      r0,r1
000082  f7fffffe          BL       assert_param
;;;184      assert_param(IS_FSMC_ASYNWAIT(FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait));
000086  6961              LDR      r1,[r4,#0x14]
000088  b119              CBZ      r1,|L14.146|
00008a  6961              LDR      r1,[r4,#0x14]
00008c  f5b14f00          CMP      r1,#0x8000
000090  d101              BNE      |L14.150|
                  |L14.146|
000092  2101              MOVS     r1,#1
000094  e000              B        |L14.152|
                  |L14.150|
000096  2100              MOVS     r1,#0
                  |L14.152|
000098  4608              MOV      r0,r1
00009a  f7fffffe          BL       assert_param
;;;185      assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
00009e  69a1              LDR      r1,[r4,#0x18]
0000a0  b119              CBZ      r1,|L14.170|
0000a2  69a1              LDR      r1,[r4,#0x18]
0000a4  f5b17f00          CMP      r1,#0x200
0000a8  d101              BNE      |L14.174|
                  |L14.170|
0000aa  2101              MOVS     r1,#1
0000ac  e000              B        |L14.176|
                  |L14.174|
0000ae  2100              MOVS     r1,#0
                  |L14.176|
0000b0  4608              MOV      r0,r1
0000b2  f7fffffe          BL       assert_param
;;;186      assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
0000b6  69e1              LDR      r1,[r4,#0x1c]
0000b8  b119              CBZ      r1,|L14.194|
0000ba  69e1              LDR      r1,[r4,#0x1c]
0000bc  f5b16f80          CMP      r1,#0x400
0000c0  d101              BNE      |L14.198|
                  |L14.194|
0000c2  2101              MOVS     r1,#1
0000c4  e000              B        |L14.200|
                  |L14.198|
0000c6  2100              MOVS     r1,#0
                  |L14.200|
0000c8  4608              MOV      r0,r1
0000ca  f7fffffe          BL       assert_param
;;;187      assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
0000ce  6a21              LDR      r1,[r4,#0x20]
0000d0  b119              CBZ      r1,|L14.218|
0000d2  6a21              LDR      r1,[r4,#0x20]
0000d4  f5b16f00          CMP      r1,#0x800
0000d8  d101              BNE      |L14.222|
                  |L14.218|
0000da  2101              MOVS     r1,#1
0000dc  e000              B        |L14.224|
                  |L14.222|
0000de  2100              MOVS     r1,#0
                  |L14.224|
0000e0  4608              MOV      r0,r1
0000e2  f7fffffe          BL       assert_param
;;;188      assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
0000e6  6a61              LDR      r1,[r4,#0x24]
0000e8  b119              CBZ      r1,|L14.242|
0000ea  6a61              LDR      r1,[r4,#0x24]
0000ec  f5b15f80          CMP      r1,#0x1000
0000f0  d101              BNE      |L14.246|
                  |L14.242|
0000f2  2101              MOVS     r1,#1
0000f4  e000              B        |L14.248|
                  |L14.246|
0000f6  2100              MOVS     r1,#0
                  |L14.248|
0000f8  4608              MOV      r0,r1
0000fa  f7fffffe          BL       assert_param
;;;189      assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
0000fe  6aa1              LDR      r1,[r4,#0x28]
000100  b119              CBZ      r1,|L14.266|
000102  6aa1              LDR      r1,[r4,#0x28]
000104  f5b15f00          CMP      r1,#0x2000
000108  d101              BNE      |L14.270|
                  |L14.266|
00010a  2101              MOVS     r1,#1
00010c  e000              B        |L14.272|
                  |L14.270|
00010e  2100              MOVS     r1,#0
                  |L14.272|
000110  4608              MOV      r0,r1
000112  f7fffffe          BL       assert_param
;;;190      assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
000116  6ae1              LDR      r1,[r4,#0x2c]
000118  b119              CBZ      r1,|L14.290|
00011a  6ae1              LDR      r1,[r4,#0x2c]
00011c  f5b14f80          CMP      r1,#0x4000
000120  d101              BNE      |L14.294|
                  |L14.290|
000122  2101              MOVS     r1,#1
000124  e000              B        |L14.296|
                  |L14.294|
000126  2100              MOVS     r1,#0
                  |L14.296|
000128  4608              MOV      r0,r1
00012a  f7fffffe          BL       assert_param
;;;191      assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
00012e  6b21              LDR      r1,[r4,#0x30]
000130  b119              CBZ      r1,|L14.314|
000132  6b21              LDR      r1,[r4,#0x30]
000134  f5b12f00          CMP      r1,#0x80000
000138  d101              BNE      |L14.318|
                  |L14.314|
00013a  2101              MOVS     r1,#1
00013c  e000              B        |L14.320|
                  |L14.318|
00013e  2100              MOVS     r1,#0
                  |L14.320|
000140  4608              MOV      r0,r1
000142  f7fffffe          BL       assert_param
;;;192      assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime));
000146  6b61              LDR      r1,[r4,#0x34]
000148  6809              LDR      r1,[r1,#0]
00014a  290f              CMP      r1,#0xf
00014c  d801              BHI      |L14.338|
00014e  2101              MOVS     r1,#1
000150  e000              B        |L14.340|
                  |L14.338|
000152  2100              MOVS     r1,#0
                  |L14.340|
000154  4608              MOV      r0,r1
000156  f7fffffe          BL       assert_param
;;;193      assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime));
00015a  6b61              LDR      r1,[r4,#0x34]
00015c  6849              LDR      r1,[r1,#4]
00015e  290f              CMP      r1,#0xf
000160  d801              BHI      |L14.358|
000162  2101              MOVS     r1,#1
000164  e000              B        |L14.360|
                  |L14.358|
000166  2100              MOVS     r1,#0
                  |L14.360|
000168  4608              MOV      r0,r1
00016a  f7fffffe          BL       assert_param
;;;194      assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime));
00016e  6b61              LDR      r1,[r4,#0x34]
000170  6889              LDR      r1,[r1,#8]
000172  b129              CBZ      r1,|L14.384|
000174  6b61              LDR      r1,[r4,#0x34]
000176  6889              LDR      r1,[r1,#8]
000178  29ff              CMP      r1,#0xff
00017a  d801              BHI      |L14.384|
00017c  2101              MOVS     r1,#1
00017e  e000              B        |L14.386|
                  |L14.384|
000180  2100              MOVS     r1,#0
                  |L14.386|
000182  4608              MOV      r0,r1
000184  f7fffffe          BL       assert_param
;;;195      assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration));
000188  6b61              LDR      r1,[r4,#0x34]
00018a  68c9              LDR      r1,[r1,#0xc]
00018c  290f              CMP      r1,#0xf
00018e  d801              BHI      |L14.404|
000190  2101              MOVS     r1,#1
000192  e000              B        |L14.406|
                  |L14.404|
000194  2100              MOVS     r1,#0
                  |L14.406|
000196  4608              MOV      r0,r1
000198  f7fffffe          BL       assert_param
;;;196      assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
00019c  6b61              LDR      r1,[r4,#0x34]
00019e  6909              LDR      r1,[r1,#0x10]
0001a0  290f              CMP      r1,#0xf
0001a2  d801              BHI      |L14.424|
0001a4  2101              MOVS     r1,#1
0001a6  e000              B        |L14.426|
                  |L14.424|
0001a8  2100              MOVS     r1,#0
                  |L14.426|
0001aa  4608              MOV      r0,r1
0001ac  f7fffffe          BL       assert_param
;;;197      assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
0001b0  6b61              LDR      r1,[r4,#0x34]
0001b2  6949              LDR      r1,[r1,#0x14]
0001b4  290f              CMP      r1,#0xf
0001b6  d801              BHI      |L14.444|
0001b8  2101              MOVS     r1,#1
0001ba  e000              B        |L14.446|
                  |L14.444|
0001bc  2100              MOVS     r1,#0
                  |L14.446|
0001be  4608              MOV      r0,r1
0001c0  f7fffffe          BL       assert_param
;;;198      assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
0001c4  6b61              LDR      r1,[r4,#0x34]
0001c6  6989              LDR      r1,[r1,#0x18]
0001c8  b171              CBZ      r1,|L14.488|
0001ca  6b61              LDR      r1,[r4,#0x34]
0001cc  6989              LDR      r1,[r1,#0x18]
0001ce  f1b15f80          CMP      r1,#0x10000000
0001d2  d009              BEQ      |L14.488|
0001d4  6b61              LDR      r1,[r4,#0x34]
0001d6  6989              LDR      r1,[r1,#0x18]
0001d8  f1b15f00          CMP      r1,#0x20000000
0001dc  d004              BEQ      |L14.488|
0001de  6b61              LDR      r1,[r4,#0x34]
0001e0  6989              LDR      r1,[r1,#0x18]
0001e2  f1b15f40          CMP      r1,#0x30000000
0001e6  d101              BNE      |L14.492|
                  |L14.488|
0001e8  2101              MOVS     r1,#1
0001ea  e000              B        |L14.494|
                  |L14.492|
0001ec  2100              MOVS     r1,#0
                  |L14.494|
0001ee  4608              MOV      r0,r1
0001f0  f7fffffe          BL       assert_param
;;;199      
;;;200      /* Bank1 NOR/SRAM control register configuration */ 
;;;201      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
0001f4  e9d40101          LDRD     r0,r1,[r4,#4]
0001f8  4308              ORRS     r0,r0,r1
0001fa  68e1              LDR      r1,[r4,#0xc]
0001fc  4308              ORRS     r0,r0,r1
0001fe  6921              LDR      r1,[r4,#0x10]
000200  4308              ORRS     r0,r0,r1
000202  6961              LDR      r1,[r4,#0x14]
000204  4308              ORRS     r0,r0,r1
000206  69a1              LDR      r1,[r4,#0x18]
000208  4308              ORRS     r0,r0,r1
00020a  69e1              LDR      r1,[r4,#0x1c]
00020c  4308              ORRS     r0,r0,r1
00020e  6a21              LDR      r1,[r4,#0x20]
000210  4308              ORRS     r0,r0,r1
000212  6a61              LDR      r1,[r4,#0x24]
000214  4308              ORRS     r0,r0,r1
000216  6aa1              LDR      r1,[r4,#0x28]
000218  4308              ORRS     r0,r0,r1
00021a  6ae1              LDR      r1,[r4,#0x2c]
00021c  4308              ORRS     r0,r0,r1
00021e  6b21              LDR      r1,[r4,#0x30]
000220  4308              ORRS     r0,r0,r1
000222  6821              LDR      r1,[r4,#0]
000224  0089              LSLS     r1,r1,#2
000226  f1a141c0          SUB      r1,r1,#0x60000000
00022a  6008              STR      r0,[r1,#0]
;;;202                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
;;;203                FSMC_NORSRAMInitStruct->FSMC_MemoryType |
;;;204                FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
;;;205                FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
;;;206                FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
;;;207                FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
;;;208                FSMC_NORSRAMInitStruct->FSMC_WrapMode |
;;;209                FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
;;;210                FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
;;;211                FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
;;;212                FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
;;;213                FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
;;;214    
;;;215      if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
00022c  68a0              LDR      r0,[r4,#8]
00022e  2808              CMP      r0,#8
000230  d10b              BNE      |L14.586|
;;;216      {
;;;217        FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
000232  6820              LDR      r0,[r4,#0]
000234  0080              LSLS     r0,r0,#2
000236  f1a040c0          SUB      r0,r0,#0x60000000
00023a  6800              LDR      r0,[r0,#0]
00023c  f0400140          ORR      r1,r0,#0x40
000240  6820              LDR      r0,[r4,#0]
000242  0080              LSLS     r0,r0,#2
000244  f1a040c0          SUB      r0,r0,#0x60000000
000248  6001              STR      r1,[r0,#0]
                  |L14.586|
;;;218      }
;;;219      
;;;220      /* Bank1 NOR/SRAM timing register configuration */
;;;221      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
00024a  6b60              LDR      r0,[r4,#0x34]
00024c  6800              LDR      r0,[r0,#0]
00024e  6b61              LDR      r1,[r4,#0x34]
000250  6849              LDR      r1,[r1,#4]
000252  ea401001          ORR      r0,r0,r1,LSL #4
000256  6b61              LDR      r1,[r4,#0x34]
000258  6889              LDR      r1,[r1,#8]
00025a  ea402001          ORR      r0,r0,r1,LSL #8
00025e  6b61              LDR      r1,[r4,#0x34]
000260  8989              LDRH     r1,[r1,#0xc]
000262  ea404001          ORR      r0,r0,r1,LSL #16
000266  6b61              LDR      r1,[r4,#0x34]
000268  8a09              LDRH     r1,[r1,#0x10]
00026a  ea405001          ORR      r0,r0,r1,LSL #20
00026e  6b61              LDR      r1,[r4,#0x34]
000270  7d09              LDRB     r1,[r1,#0x14]
000272  ea406001          ORR      r0,r0,r1,LSL #24
000276  6b61              LDR      r1,[r4,#0x34]
000278  6989              LDR      r1,[r1,#0x18]
00027a  4308              ORRS     r0,r0,r1
00027c  6821              LDR      r1,[r4,#0]
00027e  1c49              ADDS     r1,r1,#1
000280  0089              LSLS     r1,r1,#2
000282  f1a141c0          SUB      r1,r1,#0x60000000
000286  6008              STR      r0,[r1,#0]
;;;222                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
;;;223                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
;;;224                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;225                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;226                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
;;;227                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
;;;228                 FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
;;;229                
;;;230        
;;;231      /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
;;;232      if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
000288  6ae0              LDR      r0,[r4,#0x2c]
00028a  f5b04f80          CMP      r0,#0x4000
00028e  d168              BNE      |L14.866|
;;;233      {
;;;234        assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime));
000290  6ba1              LDR      r1,[r4,#0x38]
000292  6809              LDR      r1,[r1,#0]
000294  290f              CMP      r1,#0xf
000296  d801              BHI      |L14.668|
000298  2101              MOVS     r1,#1
00029a  e000              B        |L14.670|
                  |L14.668|
00029c  2100              MOVS     r1,#0
                  |L14.670|
00029e  4608              MOV      r0,r1
0002a0  f7fffffe          BL       assert_param
;;;235        assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
0002a4  6ba1              LDR      r1,[r4,#0x38]
0002a6  6849              LDR      r1,[r1,#4]
0002a8  290f              CMP      r1,#0xf
0002aa  d801              BHI      |L14.688|
0002ac  2101              MOVS     r1,#1
0002ae  e000              B        |L14.690|
                  |L14.688|
0002b0  2100              MOVS     r1,#0
                  |L14.690|
0002b2  4608              MOV      r0,r1
0002b4  f7fffffe          BL       assert_param
;;;236        assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
0002b8  6ba1              LDR      r1,[r4,#0x38]
0002ba  6889              LDR      r1,[r1,#8]
0002bc  b129              CBZ      r1,|L14.714|
0002be  6ba1              LDR      r1,[r4,#0x38]
0002c0  6889              LDR      r1,[r1,#8]
0002c2  29ff              CMP      r1,#0xff
0002c4  d801              BHI      |L14.714|
0002c6  2101              MOVS     r1,#1
0002c8  e000              B        |L14.716|
                  |L14.714|
0002ca  2100              MOVS     r1,#0
                  |L14.716|
0002cc  4608              MOV      r0,r1
0002ce  f7fffffe          BL       assert_param
;;;237        assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
0002d2  6ba1              LDR      r1,[r4,#0x38]
0002d4  6909              LDR      r1,[r1,#0x10]
0002d6  290f              CMP      r1,#0xf
0002d8  d801              BHI      |L14.734|
0002da  2101              MOVS     r1,#1
0002dc  e000              B        |L14.736|
                  |L14.734|
0002de  2100              MOVS     r1,#0
                  |L14.736|
0002e0  4608              MOV      r0,r1
0002e2  f7fffffe          BL       assert_param
;;;238        assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
0002e6  6ba1              LDR      r1,[r4,#0x38]
0002e8  6949              LDR      r1,[r1,#0x14]
0002ea  290f              CMP      r1,#0xf
0002ec  d801              BHI      |L14.754|
0002ee  2101              MOVS     r1,#1
0002f0  e000              B        |L14.756|
                  |L14.754|
0002f2  2100              MOVS     r1,#0
                  |L14.756|
0002f4  4608              MOV      r0,r1
0002f6  f7fffffe          BL       assert_param
;;;239        assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
0002fa  6ba1              LDR      r1,[r4,#0x38]
0002fc  6989              LDR      r1,[r1,#0x18]
0002fe  b171              CBZ      r1,|L14.798|
000300  6ba1              LDR      r1,[r4,#0x38]
000302  6989              LDR      r1,[r1,#0x18]
000304  f1b15f80          CMP      r1,#0x10000000
000308  d009              BEQ      |L14.798|
00030a  6ba1              LDR      r1,[r4,#0x38]
00030c  6989              LDR      r1,[r1,#0x18]
00030e  f1b15f00          CMP      r1,#0x20000000
000312  d004              BEQ      |L14.798|
000314  6ba1              LDR      r1,[r4,#0x38]
000316  6989              LDR      r1,[r1,#0x18]
000318  f1b15f40          CMP      r1,#0x30000000
00031c  d101              BNE      |L14.802|
                  |L14.798|
00031e  2101              MOVS     r1,#1
000320  e000              B        |L14.804|
                  |L14.802|
000322  2100              MOVS     r1,#0
                  |L14.804|
000324  4608              MOV      r0,r1
000326  f7fffffe          BL       assert_param
;;;240        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
00032a  6ba0              LDR      r0,[r4,#0x38]
00032c  6800              LDR      r0,[r0,#0]
00032e  6ba1              LDR      r1,[r4,#0x38]
000330  6849              LDR      r1,[r1,#4]
000332  ea401001          ORR      r0,r0,r1,LSL #4
000336  6ba1              LDR      r1,[r4,#0x38]
000338  6889              LDR      r1,[r1,#8]
00033a  ea402001          ORR      r0,r0,r1,LSL #8
00033e  6ba1              LDR      r1,[r4,#0x38]
000340  8a09              LDRH     r1,[r1,#0x10]
000342  ea405001          ORR      r0,r0,r1,LSL #20
000346  6ba1              LDR      r1,[r4,#0x38]
000348  7d09              LDRB     r1,[r1,#0x14]
00034a  ea406001          ORR      r0,r0,r1,LSL #24
00034e  6ba1              LDR      r1,[r4,#0x38]
000350  6989              LDR      r1,[r1,#0x18]
000352  4308              ORRS     r0,r0,r1
000354  6821              LDR      r1,[r4,#0]
000356  0089              LSLS     r1,r1,#2
000358  f1a141c0          SUB      r1,r1,#0x60000000
00035c  f8c10104          STR      r0,[r1,#0x104]
000360  e007              B        |L14.882|
                  |L14.866|
;;;241                  (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
;;;242                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
;;;243                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;244                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
;;;245                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
;;;246                   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
;;;247      }
;;;248      else
;;;249      {
;;;250        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
000362  f06f4170          MVN      r1,#0xf0000000
000366  6820              LDR      r0,[r4,#0]
000368  0080              LSLS     r0,r0,#2
00036a  f1a040c0          SUB      r0,r0,#0x60000000
00036e  f8c01104          STR      r1,[r0,#0x104]
                  |L14.882|
;;;251      }
;;;252    }
000372  bd10              POP      {r4,pc}
;;;253    
                          ENDP


                          AREA ||i.FSMC_NORSRAMStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMStructInit PROC
;;;379      */
;;;380    void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  2100              MOVS     r1,#0
;;;381    {  
;;;382      /* Reset NOR/SRAM Init structure parameters values */
;;;383      FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
000002  6001              STR      r1,[r0,#0]
;;;384      FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
000004  2102              MOVS     r1,#2
000006  6041              STR      r1,[r0,#4]
;;;385      FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
000008  2100              MOVS     r1,#0
00000a  6081              STR      r1,[r0,#8]
;;;386      FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
00000c  60c1              STR      r1,[r0,#0xc]
;;;387      FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00000e  6101              STR      r1,[r0,#0x10]
;;;388      FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
000010  6141              STR      r1,[r0,#0x14]
;;;389      FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000012  6181              STR      r1,[r0,#0x18]
;;;390      FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
000014  61c1              STR      r1,[r0,#0x1c]
;;;391      FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
000016  6201              STR      r1,[r0,#0x20]
;;;392      FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000018  f44f5180          MOV      r1,#0x1000
00001c  6241              STR      r1,[r0,#0x24]
;;;393      FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
00001e  0049              LSLS     r1,r1,#1
000020  6281              STR      r1,[r0,#0x28]
;;;394      FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000022  2100              MOVS     r1,#0
000024  62c1              STR      r1,[r0,#0x2c]
;;;395      FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
000026  6301              STR      r1,[r0,#0x30]
;;;396      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000028  210f              MOVS     r1,#0xf
00002a  6b42              LDR      r2,[r0,#0x34]
00002c  6011              STR      r1,[r2,#0]
;;;397      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
00002e  6b42              LDR      r2,[r0,#0x34]
000030  6051              STR      r1,[r2,#4]
;;;398      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
000032  21ff              MOVS     r1,#0xff
000034  6b42              LDR      r2,[r0,#0x34]
000036  6091              STR      r1,[r2,#8]
;;;399      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
000038  210f              MOVS     r1,#0xf
00003a  6b42              LDR      r2,[r0,#0x34]
00003c  60d1              STR      r1,[r2,#0xc]
;;;400      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
00003e  6b42              LDR      r2,[r0,#0x34]
000040  6111              STR      r1,[r2,#0x10]
;;;401      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
000042  6b42              LDR      r2,[r0,#0x34]
000044  6151              STR      r1,[r2,#0x14]
;;;402      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
000046  2100              MOVS     r1,#0
000048  6b42              LDR      r2,[r0,#0x34]
00004a  6191              STR      r1,[r2,#0x18]
;;;403      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
00004c  210f              MOVS     r1,#0xf
00004e  6b82              LDR      r2,[r0,#0x38]
000050  6011              STR      r1,[r2,#0]
;;;404      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
000052  6b82              LDR      r2,[r0,#0x38]
000054  6051              STR      r1,[r2,#4]
;;;405      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
000056  21ff              MOVS     r1,#0xff
000058  6b82              LDR      r2,[r0,#0x38]
00005a  6091              STR      r1,[r2,#8]
;;;406      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
00005c  210f              MOVS     r1,#0xf
00005e  6b82              LDR      r2,[r0,#0x38]
000060  60d1              STR      r1,[r2,#0xc]
;;;407      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
000062  6b82              LDR      r2,[r0,#0x38]
000064  6111              STR      r1,[r2,#0x10]
;;;408      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
000066  6b82              LDR      r2,[r0,#0x38]
000068  6151              STR      r1,[r2,#0x14]
;;;409      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
00006a  2100              MOVS     r1,#0
00006c  6b82              LDR      r2,[r0,#0x38]
00006e  6191              STR      r1,[r2,#0x18]
;;;410    }
000070  4770              BX       lr
;;;411    
                          ENDP


                          AREA ||i.FSMC_PCCARDCmd||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDCmd PROC
;;;537      */
;;;538    void FSMC_PCCARDCmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;539    {
000002  4604              MOV      r4,r0
;;;540      assert_param(IS_FUNCTIONAL_STATE(NewState));
000004  b10c              CBZ      r4,|L16.10|
000006  2c01              CMP      r4,#1
000008  d101              BNE      |L16.14|
                  |L16.10|
00000a  2101              MOVS     r1,#1
00000c  e000              B        |L16.16|
                  |L16.14|
00000e  2100              MOVS     r1,#0
                  |L16.16|
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       assert_param
;;;541      
;;;542      if (NewState != DISABLE)
000016  b144              CBZ      r4,|L16.42|
;;;543      {
;;;544        /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
;;;545        FSMC_Bank4->PCR4 |= PCR_PBKEN_Set;
000018  4808              LDR      r0,|L16.60|
00001a  6800              LDR      r0,[r0,#0]
00001c  f0400004          ORR      r0,r0,#4
000020  f04f4120          MOV      r1,#0xa0000000
000024  f8c100a0          STR      r0,[r1,#0xa0]
000028  e007              B        |L16.58|
                  |L16.42|
;;;546      }
;;;547      else
;;;548      {
;;;549        /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
;;;550        FSMC_Bank4->PCR4 &= PCR_PBKEN_Reset;
00002a  4804              LDR      r0,|L16.60|
00002c  6800              LDR      r0,[r0,#0]
00002e  4904              LDR      r1,|L16.64|
000030  4008              ANDS     r0,r0,r1
000032  f04f4120          MOV      r1,#0xa0000000
000036  f8c100a0          STR      r0,[r1,#0xa0]
                  |L16.58|
;;;551      }
;;;552    }
00003a  bd10              POP      {r4,pc}
;;;553    
                          ENDP

                  |L16.60|
                          DCD      0xa00000a0
                  |L16.64|
                          DCD      0x000ffffb

                          AREA ||i.FSMC_PCCARDDeInit||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDDeInit PROC
;;;157      */
;;;158    void FSMC_PCCARDDeInit(void)
000000  2018              MOVS     r0,#0x18
;;;159    {
;;;160      /* Set the FSMC_Bank4 registers to their reset values */
;;;161      FSMC_Bank4->PCR4 = 0x00000018; 
000002  4908              LDR      r1,|L17.36|
000004  6008              STR      r0,[r1,#0]
;;;162      FSMC_Bank4->SR4 = 0x00000000;	
000006  2000              MOVS     r0,#0
000008  0609              LSLS     r1,r1,#24
00000a  f8c100a4          STR      r0,[r1,#0xa4]
;;;163      FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
00000e  f04f30fc          MOV      r0,#0xfcfcfcfc
000012  4904              LDR      r1,|L17.36|
000014  3108              ADDS     r1,r1,#8
000016  6008              STR      r0,[r1,#0]
;;;164      FSMC_Bank4->PATT4 = 0xFCFCFCFC;
000018  1d09              ADDS     r1,r1,#4
00001a  6008              STR      r0,[r1,#0]
;;;165      FSMC_Bank4->PIO4 = 0xFCFCFCFC;
00001c  1d09              ADDS     r1,r1,#4
00001e  6008              STR      r0,[r1,#0]
;;;166    }
000020  4770              BX       lr
;;;167    
                          ENDP

000022  0000              DCW      0x0000
                  |L17.36|
                          DCD      0xa00000a0

                          AREA ||i.FSMC_PCCARDInit||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDInit PROC
;;;327      */
;;;328    void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000000  b510              PUSH     {r4,lr}
;;;329    {
000002  4604              MOV      r4,r0
;;;330      /* Check the parameters */
;;;331      assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
000004  6821              LDR      r1,[r4,#0]
000006  b111              CBZ      r1,|L18.14|
000008  6821              LDR      r1,[r4,#0]
00000a  2902              CMP      r1,#2
00000c  d101              BNE      |L18.18|
                  |L18.14|
00000e  2101              MOVS     r1,#1
000010  e000              B        |L18.20|
                  |L18.18|
000012  2100              MOVS     r1,#0
                  |L18.20|
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       assert_param
;;;332      assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
00001a  6861              LDR      r1,[r4,#4]
00001c  29ff              CMP      r1,#0xff
00001e  d801              BHI      |L18.36|
000020  2101              MOVS     r1,#1
000022  e000              B        |L18.38|
                  |L18.36|
000024  2100              MOVS     r1,#0
                  |L18.38|
000026  4608              MOV      r0,r1
000028  f7fffffe          BL       assert_param
;;;333      assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
00002c  68a1              LDR      r1,[r4,#8]
00002e  29ff              CMP      r1,#0xff
000030  d801              BHI      |L18.54|
000032  2101              MOVS     r1,#1
000034  e000              B        |L18.56|
                  |L18.54|
000036  2100              MOVS     r1,#0
                  |L18.56|
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       assert_param
;;;334     
;;;335      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
00003e  68e1              LDR      r1,[r4,#0xc]
000040  6809              LDR      r1,[r1,#0]
000042  29ff              CMP      r1,#0xff
000044  d801              BHI      |L18.74|
000046  2101              MOVS     r1,#1
000048  e000              B        |L18.76|
                  |L18.74|
00004a  2100              MOVS     r1,#0
                  |L18.76|
00004c  4608              MOV      r0,r1
00004e  f7fffffe          BL       assert_param
;;;336      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
000052  68e1              LDR      r1,[r4,#0xc]
000054  6849              LDR      r1,[r1,#4]
000056  29ff              CMP      r1,#0xff
000058  d801              BHI      |L18.94|
00005a  2101              MOVS     r1,#1
00005c  e000              B        |L18.96|
                  |L18.94|
00005e  2100              MOVS     r1,#0
                  |L18.96|
000060  4608              MOV      r0,r1
000062  f7fffffe          BL       assert_param
;;;337      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
000066  68e1              LDR      r1,[r4,#0xc]
000068  6889              LDR      r1,[r1,#8]
00006a  29ff              CMP      r1,#0xff
00006c  d801              BHI      |L18.114|
00006e  2101              MOVS     r1,#1
000070  e000              B        |L18.116|
                  |L18.114|
000072  2100              MOVS     r1,#0
                  |L18.116|
000074  4608              MOV      r0,r1
000076  f7fffffe          BL       assert_param
;;;338      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
00007a  68e1              LDR      r1,[r4,#0xc]
00007c  68c9              LDR      r1,[r1,#0xc]
00007e  29ff              CMP      r1,#0xff
000080  d801              BHI      |L18.134|
000082  2101              MOVS     r1,#1
000084  e000              B        |L18.136|
                  |L18.134|
000086  2100              MOVS     r1,#0
                  |L18.136|
000088  4608              MOV      r0,r1
00008a  f7fffffe          BL       assert_param
;;;339      
;;;340      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
00008e  6921              LDR      r1,[r4,#0x10]
000090  6809              LDR      r1,[r1,#0]
000092  29ff              CMP      r1,#0xff
000094  d801              BHI      |L18.154|
000096  2101              MOVS     r1,#1
000098  e000              B        |L18.156|
                  |L18.154|
00009a  2100              MOVS     r1,#0
                  |L18.156|
00009c  4608              MOV      r0,r1
00009e  f7fffffe          BL       assert_param
;;;341      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
0000a2  6921              LDR      r1,[r4,#0x10]
0000a4  6849              LDR      r1,[r1,#4]
0000a6  29ff              CMP      r1,#0xff
0000a8  d801              BHI      |L18.174|
0000aa  2101              MOVS     r1,#1
0000ac  e000              B        |L18.176|
                  |L18.174|
0000ae  2100              MOVS     r1,#0
                  |L18.176|
0000b0  4608              MOV      r0,r1
0000b2  f7fffffe          BL       assert_param
;;;342      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
0000b6  6921              LDR      r1,[r4,#0x10]
0000b8  6889              LDR      r1,[r1,#8]
0000ba  29ff              CMP      r1,#0xff
0000bc  d801              BHI      |L18.194|
0000be  2101              MOVS     r1,#1
0000c0  e000              B        |L18.196|
                  |L18.194|
0000c2  2100              MOVS     r1,#0
                  |L18.196|
0000c4  4608              MOV      r0,r1
0000c6  f7fffffe          BL       assert_param
;;;343      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
0000ca  6921              LDR      r1,[r4,#0x10]
0000cc  68c9              LDR      r1,[r1,#0xc]
0000ce  29ff              CMP      r1,#0xff
0000d0  d801              BHI      |L18.214|
0000d2  2101              MOVS     r1,#1
0000d4  e000              B        |L18.216|
                  |L18.214|
0000d6  2100              MOVS     r1,#0
                  |L18.216|
0000d8  4608              MOV      r0,r1
0000da  f7fffffe          BL       assert_param
;;;344      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime));
0000de  6961              LDR      r1,[r4,#0x14]
0000e0  6809              LDR      r1,[r1,#0]
0000e2  29ff              CMP      r1,#0xff
0000e4  d801              BHI      |L18.234|
0000e6  2101              MOVS     r1,#1
0000e8  e000              B        |L18.236|
                  |L18.234|
0000ea  2100              MOVS     r1,#0
                  |L18.236|
0000ec  4608              MOV      r0,r1
0000ee  f7fffffe          BL       assert_param
;;;345      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
0000f2  6961              LDR      r1,[r4,#0x14]
0000f4  6849              LDR      r1,[r1,#4]
0000f6  29ff              CMP      r1,#0xff
0000f8  d801              BHI      |L18.254|
0000fa  2101              MOVS     r1,#1
0000fc  e000              B        |L18.256|
                  |L18.254|
0000fe  2100              MOVS     r1,#0
                  |L18.256|
000100  4608              MOV      r0,r1
000102  f7fffffe          BL       assert_param
;;;346      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
000106  6961              LDR      r1,[r4,#0x14]
000108  6889              LDR      r1,[r1,#8]
00010a  29ff              CMP      r1,#0xff
00010c  d801              BHI      |L18.274|
00010e  2101              MOVS     r1,#1
000110  e000              B        |L18.276|
                  |L18.274|
000112  2100              MOVS     r1,#0
                  |L18.276|
000114  4608              MOV      r0,r1
000116  f7fffffe          BL       assert_param
;;;347      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
00011a  6961              LDR      r1,[r4,#0x14]
00011c  68c9              LDR      r1,[r1,#0xc]
00011e  29ff              CMP      r1,#0xff
000120  d801              BHI      |L18.294|
000122  2101              MOVS     r1,#1
000124  e000              B        |L18.296|
                  |L18.294|
000126  2100              MOVS     r1,#0
                  |L18.296|
000128  4608              MOV      r0,r1
00012a  f7fffffe          BL       assert_param
;;;348      
;;;349      /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
;;;350      FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
00012e  6820              LDR      r0,[r4,#0]
000130  f0400010          ORR      r0,r0,#0x10
000134  6861              LDR      r1,[r4,#4]
000136  ea402041          ORR      r0,r0,r1,LSL #9
00013a  68a1              LDR      r1,[r4,#8]
00013c  ea403041          ORR      r0,r0,r1,LSL #13
000140  491b              LDR      r1,|L18.432|
000142  6008              STR      r0,[r1,#0]
;;;351                         FSMC_MemoryDataWidth_16b |  
;;;352                         (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
;;;353                         (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
;;;354                
;;;355      /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
;;;356      FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
000144  68e0              LDR      r0,[r4,#0xc]
000146  6800              LDR      r0,[r0,#0]
000148  68e1              LDR      r1,[r4,#0xc]
00014a  6849              LDR      r1,[r1,#4]
00014c  ea402001          ORR      r0,r0,r1,LSL #8
000150  68e1              LDR      r1,[r4,#0xc]
000152  8909              LDRH     r1,[r1,#8]
000154  ea404001          ORR      r0,r0,r1,LSL #16
000158  68e1              LDR      r1,[r4,#0xc]
00015a  7b09              LDRB     r1,[r1,#0xc]
00015c  ea406001          ORR      r0,r0,r1,LSL #24
000160  4913              LDR      r1,|L18.432|
000162  3108              ADDS     r1,r1,#8
000164  6008              STR      r0,[r1,#0]
;;;357                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;358                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;359                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;360                
;;;361      /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;362      FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000166  6920              LDR      r0,[r4,#0x10]
000168  6800              LDR      r0,[r0,#0]
00016a  6921              LDR      r1,[r4,#0x10]
00016c  6849              LDR      r1,[r1,#4]
00016e  ea402001          ORR      r0,r0,r1,LSL #8
000172  6921              LDR      r1,[r4,#0x10]
000174  8909              LDRH     r1,[r1,#8]
000176  ea404001          ORR      r0,r0,r1,LSL #16
00017a  6921              LDR      r1,[r4,#0x10]
00017c  7b09              LDRB     r1,[r1,#0xc]
00017e  ea406001          ORR      r0,r0,r1,LSL #24
000182  490b              LDR      r1,|L18.432|
000184  310c              ADDS     r1,r1,#0xc
000186  6008              STR      r0,[r1,#0]
;;;363                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;364                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;365                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
;;;366                
;;;367      /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
;;;368      FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
000188  6960              LDR      r0,[r4,#0x14]
00018a  6800              LDR      r0,[r0,#0]
00018c  6961              LDR      r1,[r4,#0x14]
00018e  6849              LDR      r1,[r1,#4]
000190  ea402001          ORR      r0,r0,r1,LSL #8
000194  6961              LDR      r1,[r4,#0x14]
000196  8909              LDRH     r1,[r1,#8]
000198  ea404001          ORR      r0,r0,r1,LSL #16
00019c  6961              LDR      r1,[r4,#0x14]
00019e  7b09              LDRB     r1,[r1,#0xc]
0001a0  ea406001          ORR      r0,r0,r1,LSL #24
0001a4  f04f4120          MOV      r1,#0xa0000000
0001a8  f8c100b0          STR      r0,[r1,#0xb0]
;;;369                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;370                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;371                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
;;;372    }
0001ac  bd10              POP      {r4,pc}
;;;373    
                          ENDP

0001ae  0000              DCW      0x0000
                  |L18.432|
                          DCD      0xa00000a0

                          AREA ||i.FSMC_PCCARDStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_PCCARDStructInit PROC
;;;443      */
;;;444    void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000000  2100              MOVS     r1,#0
;;;445    {
;;;446      /* Reset PCCARD Init structure parameters values */
;;;447      FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000002  6001              STR      r1,[r0,#0]
;;;448      FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
000004  6041              STR      r1,[r0,#4]
;;;449      FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
000006  6081              STR      r1,[r0,#8]
;;;450      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000008  21fc              MOVS     r1,#0xfc
00000a  68c2              LDR      r2,[r0,#0xc]
00000c  6011              STR      r1,[r2,#0]
;;;451      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00000e  68c2              LDR      r2,[r0,#0xc]
000010  6051              STR      r1,[r2,#4]
;;;452      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000012  68c2              LDR      r2,[r0,#0xc]
000014  6091              STR      r1,[r2,#8]
;;;453      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000016  68c2              LDR      r2,[r0,#0xc]
000018  60d1              STR      r1,[r2,#0xc]
;;;454      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00001a  6902              LDR      r2,[r0,#0x10]
00001c  6011              STR      r1,[r2,#0]
;;;455      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00001e  6902              LDR      r2,[r0,#0x10]
000020  6051              STR      r1,[r2,#4]
;;;456      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000022  6902              LDR      r2,[r0,#0x10]
000024  6091              STR      r1,[r2,#8]
;;;457      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
000026  6902              LDR      r2,[r0,#0x10]
000028  60d1              STR      r1,[r2,#0xc]
;;;458      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00002a  6942              LDR      r2,[r0,#0x14]
00002c  6011              STR      r1,[r2,#0]
;;;459      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00002e  6942              LDR      r2,[r0,#0x14]
000030  6051              STR      r1,[r2,#4]
;;;460      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000032  6942              LDR      r2,[r0,#0x14]
000034  6091              STR      r1,[r2,#8]
;;;461      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000036  6942              LDR      r2,[r0,#0x14]
000038  60d1              STR      r1,[r2,#0xc]
;;;462    }
00003a  4770              BX       lr
;;;463    
                          ENDP

