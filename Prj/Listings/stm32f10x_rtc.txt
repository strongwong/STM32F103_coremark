; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f10x_rtc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f10x_rtc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Board\inc -I..\Chip\Hal_lib\inc -I..\Chip\Startup\inc -I..\coremark -I..\Chip\CMSIS -I.\RTE\_CoreMark -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F10X_MD --omf_browse=.\objects\stm32f10x_rtc.crf ..\Chip\Hal_lib\stm32f10x_rtc.c]
                          THUMB

                          AREA ||i.RTC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RTC_ClearFlag PROC
;;;272      */
;;;273    void RTC_ClearFlag(uint16_t RTC_FLAG)
000000  b510              PUSH     {r4,lr}
;;;274    {
000002  4604              MOV      r4,r0
;;;275      /* Check the parameters */
;;;276      assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
000004  f64f71f0          MOV      r1,#0xfff0
000008  4021              ANDS     r1,r1,r4
00000a  b911              CBNZ     r1,|L1.18|
00000c  b10c              CBZ      r4,|L1.18|
00000e  2101              MOVS     r1,#1
000010  e000              B        |L1.20|
                  |L1.18|
000012  2100              MOVS     r1,#0
                  |L1.20|
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       assert_param
;;;277        
;;;278      /* Clear the corresponding RTC flag */
;;;279      RTC->CRL &= (uint16_t)~RTC_FLAG;
00001a  4803              LDR      r0,|L1.40|
00001c  8800              LDRH     r0,[r0,#0]
00001e  43a0              BICS     r0,r0,r4
000020  4901              LDR      r1,|L1.40|
000022  8008              STRH     r0,[r1,#0]
;;;280    }
000024  bd10              POP      {r4,pc}
;;;281    
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      0x40002804

                          AREA ||i.RTC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RTC_ClearITPendingBit PROC
;;;317      */
;;;318    void RTC_ClearITPendingBit(uint16_t RTC_IT)
000000  b510              PUSH     {r4,lr}
;;;319    {
000002  4604              MOV      r4,r0
;;;320      /* Check the parameters */
;;;321      assert_param(IS_RTC_IT(RTC_IT));  
000004  f64f71f8          MOV      r1,#0xfff8
000008  4021              ANDS     r1,r1,r4
00000a  b911              CBNZ     r1,|L2.18|
00000c  b10c              CBZ      r4,|L2.18|
00000e  2101              MOVS     r1,#1
000010  e000              B        |L2.20|
                  |L2.18|
000012  2100              MOVS     r1,#0
                  |L2.20|
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       assert_param
;;;322      
;;;323      /* Clear the corresponding RTC pending bit */
;;;324      RTC->CRL &= (uint16_t)~RTC_IT;
00001a  4803              LDR      r0,|L2.40|
00001c  8800              LDRH     r0,[r0,#0]
00001e  43a0              BICS     r0,r0,r4
000020  4901              LDR      r1,|L2.40|
000022  8008              STRH     r0,[r1,#0]
;;;325    }
000024  bd10              POP      {r4,pc}
;;;326    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x40002804

                          AREA ||i.RTC_EnterConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_EnterConfigMode PROC
;;;110      */
;;;111    void RTC_EnterConfigMode(void)
000000  4803              LDR      r0,|L3.16|
;;;112    {
;;;113      /* Set the CNF flag to enter in the Configuration Mode */
;;;114      RTC->CRL |= RTC_CRL_CNF;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400010          ORR      r0,r0,#0x10
000008  4901              LDR      r1,|L3.16|
00000a  8008              STRH     r0,[r1,#0]
;;;115    }
00000c  4770              BX       lr
;;;116    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40002804

                          AREA ||i.RTC_ExitConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_ExitConfigMode PROC
;;;121      */
;;;122    void RTC_ExitConfigMode(void)
000000  4803              LDR      r0,|L4.16|
;;;123    {
;;;124      /* Reset the CNF flag to exit from the Configuration Mode */
;;;125      RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
000002  8800              LDRH     r0,[r0,#0]
000004  f64f71ef          MOV      r1,#0xffef
000008  4008              ANDS     r0,r0,r1
00000a  4901              LDR      r1,|L4.16|
00000c  8008              STRH     r0,[r1,#0]
;;;126    }
00000e  4770              BX       lr
;;;127    
                          ENDP

                  |L4.16|
                          DCD      0x40002804

                          AREA ||i.RTC_GetCounter||, CODE, READONLY, ALIGN=2

                  RTC_GetCounter PROC
;;;132      */
;;;133    uint32_t RTC_GetCounter(void)
000000  2100              MOVS     r1,#0
;;;134    {
;;;135      uint16_t tmp = 0;
;;;136      tmp = RTC->CNTL;
000002  4803              LDR      r0,|L5.16|
000004  8801              LDRH     r1,[r0,#0]
;;;137      return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
000006  1f00              SUBS     r0,r0,#4
000008  8800              LDRH     r0,[r0,#0]
00000a  ea414000          ORR      r0,r1,r0,LSL #16
;;;138    }
00000e  4770              BX       lr
;;;139    
                          ENDP

                  |L5.16|
                          DCD      0x4000281c

                          AREA ||i.RTC_GetDivider||, CODE, READONLY, ALIGN=2

                  RTC_GetDivider PROC
;;;192      */
;;;193    uint32_t RTC_GetDivider(void)
000000  2000              MOVS     r0,#0
;;;194    {
;;;195      uint32_t tmp = 0x00;
;;;196      tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
000002  4904              LDR      r1,|L6.20|
000004  8809              LDRH     r1,[r1,#0]
000006  0709              LSLS     r1,r1,#28
000008  0b08              LSRS     r0,r1,#12
;;;197      tmp |= RTC->DIVL;
00000a  4902              LDR      r1,|L6.20|
00000c  1d09              ADDS     r1,r1,#4
00000e  8809              LDRH     r1,[r1,#0]
000010  4308              ORRS     r0,r0,r1
;;;198      return tmp;
;;;199    }
000012  4770              BX       lr
;;;200    
                          ENDP

                  |L6.20|
                          DCD      0x40002810

                          AREA ||i.RTC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetFlagStatus PROC
;;;243      */
;;;244    FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;245    {
000002  4604              MOV      r4,r0
;;;246      FlagStatus bitstatus = RESET;
000004  2500              MOVS     r5,#0
;;;247      
;;;248      /* Check the parameters */
;;;249      assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
000006  2c20              CMP      r4,#0x20
000008  d007              BEQ      |L7.26|
00000a  2c08              CMP      r4,#8
00000c  d005              BEQ      |L7.26|
00000e  2c04              CMP      r4,#4
000010  d003              BEQ      |L7.26|
000012  2c02              CMP      r4,#2
000014  d001              BEQ      |L7.26|
000016  2c01              CMP      r4,#1
000018  d101              BNE      |L7.30|
                  |L7.26|
00001a  2101              MOVS     r1,#1
00001c  e000              B        |L7.32|
                  |L7.30|
00001e  2100              MOVS     r1,#0
                  |L7.32|
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       assert_param
;;;250      
;;;251      if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
000026  4804              LDR      r0,|L7.56|
000028  8800              LDRH     r0,[r0,#0]
00002a  4020              ANDS     r0,r0,r4
00002c  b108              CBZ      r0,|L7.50|
;;;252      {
;;;253        bitstatus = SET;
00002e  2501              MOVS     r5,#1
000030  e000              B        |L7.52|
                  |L7.50|
;;;254      }
;;;255      else
;;;256      {
;;;257        bitstatus = RESET;
000032  2500              MOVS     r5,#0
                  |L7.52|
;;;258      }
;;;259      return bitstatus;
000034  4628              MOV      r0,r5
;;;260    }
000036  bd70              POP      {r4-r6,pc}
;;;261    
                          ENDP

                  |L7.56|
                          DCD      0x40002804

                          AREA ||i.RTC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetITStatus PROC
;;;290      */
;;;291    ITStatus RTC_GetITStatus(uint16_t RTC_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;292    {
000002  4604              MOV      r4,r0
;;;293      ITStatus bitstatus = RESET;
000004  2500              MOVS     r5,#0
;;;294      /* Check the parameters */
;;;295      assert_param(IS_RTC_GET_IT(RTC_IT)); 
000006  2c04              CMP      r4,#4
000008  d003              BEQ      |L8.18|
00000a  2c02              CMP      r4,#2
00000c  d001              BEQ      |L8.18|
00000e  2c01              CMP      r4,#1
000010  d101              BNE      |L8.22|
                  |L8.18|
000012  2101              MOVS     r1,#1
000014  e000              B        |L8.24|
                  |L8.22|
000016  2100              MOVS     r1,#0
                  |L8.24|
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       assert_param
;;;296      
;;;297      bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
00001e  4807              LDR      r0,|L8.60|
000020  8800              LDRH     r0,[r0,#0]
000022  4020              ANDS     r0,r0,r4
000024  b2c5              UXTB     r5,r0
;;;298      if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
000026  4805              LDR      r0,|L8.60|
000028  1f00              SUBS     r0,r0,#4
00002a  8800              LDRH     r0,[r0,#0]
00002c  4020              ANDS     r0,r0,r4
00002e  b110              CBZ      r0,|L8.54|
000030  b10d              CBZ      r5,|L8.54|
;;;299      {
;;;300        bitstatus = SET;
000032  2501              MOVS     r5,#1
000034  e000              B        |L8.56|
                  |L8.54|
;;;301      }
;;;302      else
;;;303      {
;;;304        bitstatus = RESET;
000036  2500              MOVS     r5,#0
                  |L8.56|
;;;305      }
;;;306      return bitstatus;
000038  4628              MOV      r0,r5
;;;307    }
00003a  bd70              POP      {r4-r6,pc}
;;;308    
                          ENDP

                  |L8.60|
                          DCD      0x40002804

                          AREA ||i.RTC_ITConfig||, CODE, READONLY, ALIGN=2

                  RTC_ITConfig PROC
;;;89       */
;;;90     void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;91     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;92       /* Check the parameters */
;;;93       assert_param(IS_RTC_IT(RTC_IT));  
000006  f64f71f8          MOV      r1,#0xfff8
00000a  4021              ANDS     r1,r1,r4
00000c  b911              CBNZ     r1,|L9.20|
00000e  b10c              CBZ      r4,|L9.20|
000010  2101              MOVS     r1,#1
000012  e000              B        |L9.22|
                  |L9.20|
000014  2100              MOVS     r1,#0
                  |L9.22|
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       assert_param
;;;94       assert_param(IS_FUNCTIONAL_STATE(NewState));
00001c  b10d              CBZ      r5,|L9.34|
00001e  2d01              CMP      r5,#1
000020  d101              BNE      |L9.38|
                  |L9.34|
000022  2101              MOVS     r1,#1
000024  e000              B        |L9.40|
                  |L9.38|
000026  2100              MOVS     r1,#0
                  |L9.40|
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       assert_param
;;;95       
;;;96       if (NewState != DISABLE)
00002e  b12d              CBZ      r5,|L9.60|
;;;97       {
;;;98         RTC->CRH |= RTC_IT;
000030  4805              LDR      r0,|L9.72|
000032  8800              LDRH     r0,[r0,#0]
000034  4320              ORRS     r0,r0,r4
000036  4904              LDR      r1,|L9.72|
000038  8008              STRH     r0,[r1,#0]
00003a  e004              B        |L9.70|
                  |L9.60|
;;;99       }
;;;100      else
;;;101      {
;;;102        RTC->CRH &= (uint16_t)~RTC_IT;
00003c  4802              LDR      r0,|L9.72|
00003e  8800              LDRH     r0,[r0,#0]
000040  43a0              BICS     r0,r0,r4
000042  4901              LDR      r1,|L9.72|
000044  8008              STRH     r0,[r1,#0]
                  |L9.70|
;;;103      }
;;;104    }
000046  bd70              POP      {r4-r6,pc}
;;;105    
                          ENDP

                  |L9.72|
                          DCD      0x40002800

                          AREA ||i.RTC_SetAlarm||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarm PROC
;;;177      */
;;;178    void RTC_SetAlarm(uint32_t AlarmValue)
000000  b500              PUSH     {lr}
;;;179    {  
000002  4602              MOV      r2,r0
;;;180      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;181      /* Set the ALARM MSB word */
;;;182      RTC->ALRH = AlarmValue >> 16;
000008  0c10              LSRS     r0,r2,#16
00000a  4903              LDR      r1,|L10.24|
00000c  8008              STRH     r0,[r1,#0]
;;;183      /* Set the ALARM LSB word */
;;;184      RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
00000e  1d09              ADDS     r1,r1,#4
000010  800a              STRH     r2,[r1,#0]
;;;185      RTC_ExitConfigMode();
000012  f7fffffe          BL       RTC_ExitConfigMode
;;;186    }
000016  bd00              POP      {pc}
;;;187    
                          ENDP

                  |L10.24|
                          DCD      0x40002820

                          AREA ||i.RTC_SetCounter||, CODE, READONLY, ALIGN=2

                  RTC_SetCounter PROC
;;;144      */
;;;145    void RTC_SetCounter(uint32_t CounterValue)
000000  b500              PUSH     {lr}
;;;146    { 
000002  4602              MOV      r2,r0
;;;147      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;148      /* Set RTC COUNTER MSB word */
;;;149      RTC->CNTH = CounterValue >> 16;
000008  0c10              LSRS     r0,r2,#16
00000a  4903              LDR      r1,|L11.24|
00000c  8008              STRH     r0,[r1,#0]
;;;150      /* Set RTC COUNTER LSB word */
;;;151      RTC->CNTL = (CounterValue & RTC_LSB_MASK);
00000e  1d09              ADDS     r1,r1,#4
000010  800a              STRH     r2,[r1,#0]
;;;152      RTC_ExitConfigMode();
000012  f7fffffe          BL       RTC_ExitConfigMode
;;;153    }
000016  bd00              POP      {pc}
;;;154    
                          ENDP

                  |L11.24|
                          DCD      0x40002818

                          AREA ||i.RTC_SetPrescaler||, CODE, READONLY, ALIGN=2

                  RTC_SetPrescaler PROC
;;;159      */
;;;160    void RTC_SetPrescaler(uint32_t PrescalerValue)
000000  b510              PUSH     {r4,lr}
;;;161    {
000002  4604              MOV      r4,r0
;;;162      /* Check the parameters */
;;;163      assert_param(IS_RTC_PRESCALER(PrescalerValue));
000004  f5b41f80          CMP      r4,#0x100000
000008  d201              BCS      |L12.14|
00000a  2101              MOVS     r1,#1
00000c  e000              B        |L12.16|
                  |L12.14|
00000e  2100              MOVS     r1,#0
                  |L12.16|
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       assert_param
;;;164      
;;;165      RTC_EnterConfigMode();
000016  f7fffffe          BL       RTC_EnterConfigMode
;;;166      /* Set RTC PRESCALER MSB word */
;;;167      RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
00001a  f3c44003          UBFX     r0,r4,#16,#4
00001e  4903              LDR      r1,|L12.44|
000020  8008              STRH     r0,[r1,#0]
;;;168      /* Set RTC PRESCALER LSB word */
;;;169      RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
000022  1d09              ADDS     r1,r1,#4
000024  800c              STRH     r4,[r1,#0]
;;;170      RTC_ExitConfigMode();
000026  f7fffffe          BL       RTC_ExitConfigMode
;;;171    }
00002a  bd10              POP      {r4,pc}
;;;172    
                          ENDP

                  |L12.44|
                          DCD      0x40002808

                          AREA ||i.RTC_WaitForLastTask||, CODE, READONLY, ALIGN=2

                  RTC_WaitForLastTask PROC
;;;206      */
;;;207    void RTC_WaitForLastTask(void)
000000  bf00              NOP      
                  |L13.2|
;;;208    {
;;;209      /* Loop until RTOFF flag is set */
;;;210      while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
000002  4803              LDR      r0,|L13.16|
000004  8800              LDRH     r0,[r0,#0]
000006  f0000020          AND      r0,r0,#0x20
00000a  2800              CMP      r0,#0
00000c  d0f9              BEQ      |L13.2|
;;;211      {
;;;212      }
;;;213    }
00000e  4770              BX       lr
;;;214    
                          ENDP

                  |L13.16|
                          DCD      0x40002804

                          AREA ||i.RTC_WaitForSynchro||, CODE, READONLY, ALIGN=2

                  RTC_WaitForSynchro PROC
;;;222      */
;;;223    void RTC_WaitForSynchro(void)
000000  4807              LDR      r0,|L14.32|
;;;224    {
;;;225      /* Clear RSF flag */
;;;226      RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
000002  8800              LDRH     r0,[r0,#0]
000004  f64f71f7          MOV      r1,#0xfff7
000008  4008              ANDS     r0,r0,r1
00000a  4905              LDR      r1,|L14.32|
00000c  8008              STRH     r0,[r1,#0]
;;;227      /* Loop until RSF flag is set */
;;;228      while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
00000e  bf00              NOP      
                  |L14.16|
000010  4803              LDR      r0,|L14.32|
000012  8800              LDRH     r0,[r0,#0]
000014  f0000008          AND      r0,r0,#8
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L14.16|
;;;229      {
;;;230      }
;;;231    }
00001c  4770              BX       lr
;;;232    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      0x40002804
