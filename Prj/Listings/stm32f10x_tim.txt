; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f10x_tim.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f10x_tim.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Board\inc -I..\Chip\Hal_lib\inc -I..\Chip\Startup\inc -I..\coremark -I..\Chip\CMSIS -I.\RTE\_CoreMark -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F10X_MD --omf_browse=.\objects\stm32f10x_tim.crf ..\Chip\Hal_lib\stm32f10x_tim.c]
                          THUMB

                          AREA ||i.TI1_Config||, CODE, READONLY, ALIGN=2

                  TI1_Config PROC
;;;2700     */
;;;2701   static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000000  b5f0              PUSH     {r4-r7,lr}
;;;2702                          uint16_t TIM_ICFilter)
;;;2703   {
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;2704     uint16_t tmpccmr1 = 0, tmpccer = 0;
000006  2200              MOVS     r2,#0
000008  2100              MOVS     r1,#0
;;;2705     /* Disable the Channel 1: Reset the CC1E Bit */
;;;2706     TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
00000a  8c06              LDRH     r6,[r0,#0x20]
00000c  f64f77fe          MOV      r7,#0xfffe
000010  403e              ANDS     r6,r6,r7
000012  8406              STRH     r6,[r0,#0x20]
;;;2707     tmpccmr1 = TIMx->CCMR1;
000014  8b02              LDRH     r2,[r0,#0x18]
;;;2708     tmpccer = TIMx->CCER;
000016  8c01              LDRH     r1,[r0,#0x20]
;;;2709     /* Select the Input and set the filter */
;;;2710     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
000018  f64f760c          MOV      r6,#0xff0c
00001c  4032              ANDS     r2,r2,r6
;;;2711     tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
00001e  1c7e              ADDS     r6,r7,#1
000020  ea061603          AND      r6,r6,r3,LSL #4
000024  432e              ORRS     r6,r6,r5
000026  4332              ORRS     r2,r2,r6
;;;2712     
;;;2713     if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
000028  4e10              LDR      r6,|L1.108|
00002a  42b0              CMP      r0,r6
00002c  d00e              BEQ      |L1.76|
00002e  4e10              LDR      r6,|L1.112|
000030  42b0              CMP      r0,r6
000032  d00b              BEQ      |L1.76|
000034  f1b04f80          CMP      r0,#0x40000000
000038  d008              BEQ      |L1.76|
00003a  4e0e              LDR      r6,|L1.116|
00003c  42b0              CMP      r0,r6
00003e  d005              BEQ      |L1.76|
;;;2714        (TIMx == TIM4) ||(TIMx == TIM5))
000040  4e0d              LDR      r6,|L1.120|
000042  42b0              CMP      r0,r6
000044  d002              BEQ      |L1.76|
000046  4e0d              LDR      r6,|L1.124|
000048  42b0              CMP      r0,r6
00004a  d106              BNE      |L1.90|
                  |L1.76|
;;;2715     {
;;;2716       /* Select the Polarity and set the CC1E Bit */
;;;2717       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
00004c  f64f76fd          MOV      r6,#0xfffd
000050  4031              ANDS     r1,r1,r6
;;;2718       tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
000052  f0440601          ORR      r6,r4,#1
000056  4331              ORRS     r1,r1,r6
000058  e005              B        |L1.102|
                  |L1.90|
;;;2719     }
;;;2720     else
;;;2721     {
;;;2722       /* Select the Polarity and set the CC1E Bit */
;;;2723       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
00005a  f64f76f5          MOV      r6,#0xfff5
00005e  4031              ANDS     r1,r1,r6
;;;2724       tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
000060  f0440601          ORR      r6,r4,#1
000064  4331              ORRS     r1,r1,r6
                  |L1.102|
;;;2725     }
;;;2726   
;;;2727     /* Write to TIMx CCMR1 and CCER registers */
;;;2728     TIMx->CCMR1 = tmpccmr1;
000066  8302              STRH     r2,[r0,#0x18]
;;;2729     TIMx->CCER = tmpccer;
000068  8401              STRH     r1,[r0,#0x20]
;;;2730   }
00006a  bdf0              POP      {r4-r7,pc}
;;;2731   
                          ENDP

                  |L1.108|
                          DCD      0x40012c00
                  |L1.112|
                          DCD      0x40013400
                  |L1.116|
                          DCD      0x40000400
                  |L1.120|
                          DCD      0x40000800
                  |L1.124|
                          DCD      0x40000c00

                          AREA ||i.TI2_Config||, CODE, READONLY, ALIGN=2

                  TI2_Config PROC
;;;2747     */
;;;2748   static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000000  b5f0              PUSH     {r4-r7,lr}
;;;2749                          uint16_t TIM_ICFilter)
;;;2750   {
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;2751     uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
000006  2200              MOVS     r2,#0
000008  2100              MOVS     r1,#0
00000a  2600              MOVS     r6,#0
;;;2752     /* Disable the Channel 2: Reset the CC2E Bit */
;;;2753     TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
00000c  8c07              LDRH     r7,[r0,#0x20]
00000e  f64f7cef          MOV      r12,#0xffef
000012  ea07070c          AND      r7,r7,r12
000016  8407              STRH     r7,[r0,#0x20]
;;;2754     tmpccmr1 = TIMx->CCMR1;
000018  8b02              LDRH     r2,[r0,#0x18]
;;;2755     tmpccer = TIMx->CCER;
00001a  8c01              LDRH     r1,[r0,#0x20]
;;;2756     tmp = (uint16_t)(TIM_ICPolarity << 4);
00001c  f64f77ff          MOV      r7,#0xffff
000020  ea071604          AND      r6,r7,r4,LSL #4
;;;2757     /* Select the Input and set the filter */
;;;2758     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
000024  f64047ff          MOV      r7,#0xcff
000028  403a              ANDS     r2,r2,r7
;;;2759     tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
00002a  f64f77ff          MOV      r7,#0xffff
00002e  ea073703          AND      r7,r7,r3,LSL #12
000032  433a              ORRS     r2,r2,r7
;;;2760     tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
000034  f64f77ff          MOV      r7,#0xffff
000038  ea072705          AND      r7,r7,r5,LSL #8
00003c  433a              ORRS     r2,r2,r7
;;;2761     
;;;2762     if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
00003e  4f11              LDR      r7,|L2.132|
000040  42b8              CMP      r0,r7
000042  d00e              BEQ      |L2.98|
000044  4f10              LDR      r7,|L2.136|
000046  42b8              CMP      r0,r7
000048  d00b              BEQ      |L2.98|
00004a  f1b04f80          CMP      r0,#0x40000000
00004e  d008              BEQ      |L2.98|
000050  4f0e              LDR      r7,|L2.140|
000052  42b8              CMP      r0,r7
000054  d005              BEQ      |L2.98|
;;;2763        (TIMx == TIM4) ||(TIMx == TIM5))
000056  4f0e              LDR      r7,|L2.144|
000058  42b8              CMP      r0,r7
00005a  d002              BEQ      |L2.98|
00005c  4f0d              LDR      r7,|L2.148|
00005e  42b8              CMP      r0,r7
000060  d106              BNE      |L2.112|
                  |L2.98|
;;;2764     {
;;;2765       /* Select the Polarity and set the CC2E Bit */
;;;2766       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
000062  f64f77df          MOV      r7,#0xffdf
000066  4039              ANDS     r1,r1,r7
;;;2767       tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
000068  f0460710          ORR      r7,r6,#0x10
00006c  4339              ORRS     r1,r1,r7
00006e  e005              B        |L2.124|
                  |L2.112|
;;;2768     }
;;;2769     else
;;;2770     {
;;;2771       /* Select the Polarity and set the CC2E Bit */
;;;2772       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
000070  f64f775f          MOV      r7,#0xff5f
000074  4039              ANDS     r1,r1,r7
;;;2773       tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
000076  f0440710          ORR      r7,r4,#0x10
00007a  4339              ORRS     r1,r1,r7
                  |L2.124|
;;;2774     }
;;;2775     
;;;2776     /* Write to TIMx CCMR1 and CCER registers */
;;;2777     TIMx->CCMR1 = tmpccmr1 ;
00007c  8302              STRH     r2,[r0,#0x18]
;;;2778     TIMx->CCER = tmpccer;
00007e  8401              STRH     r1,[r0,#0x20]
;;;2779   }
000080  bdf0              POP      {r4-r7,pc}
;;;2780   
                          ENDP

000082  0000              DCW      0x0000
                  |L2.132|
                          DCD      0x40012c00
                  |L2.136|
                          DCD      0x40013400
                  |L2.140|
                          DCD      0x40000400
                  |L2.144|
                          DCD      0x40000800
                  |L2.148|
                          DCD      0x40000c00

                          AREA ||i.TI3_Config||, CODE, READONLY, ALIGN=2

                  TI3_Config PROC
;;;2796     */
;;;2797   static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000000  b5f0              PUSH     {r4-r7,lr}
;;;2798                          uint16_t TIM_ICFilter)
;;;2799   {
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;2800     uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
000006  2200              MOVS     r2,#0
000008  2100              MOVS     r1,#0
00000a  2600              MOVS     r6,#0
;;;2801     /* Disable the Channel 3: Reset the CC3E Bit */
;;;2802     TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
00000c  8c07              LDRH     r7,[r0,#0x20]
00000e  f64f6cff          MOV      r12,#0xfeff
000012  ea07070c          AND      r7,r7,r12
000016  8407              STRH     r7,[r0,#0x20]
;;;2803     tmpccmr2 = TIMx->CCMR2;
000018  8b82              LDRH     r2,[r0,#0x1c]
;;;2804     tmpccer = TIMx->CCER;
00001a  8c01              LDRH     r1,[r0,#0x20]
;;;2805     tmp = (uint16_t)(TIM_ICPolarity << 8);
00001c  f64f77ff          MOV      r7,#0xffff
000020  ea072604          AND      r6,r7,r4,LSL #8
;;;2806     /* Select the Input and set the filter */
;;;2807     tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
000024  f64f770c          MOV      r7,#0xff0c
000028  403a              ANDS     r2,r2,r7
;;;2808     tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
00002a  f64f77ff          MOV      r7,#0xffff
00002e  ea071703          AND      r7,r7,r3,LSL #4
000032  432f              ORRS     r7,r7,r5
000034  433a              ORRS     r2,r2,r7
;;;2809       
;;;2810     if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
000036  4f11              LDR      r7,|L3.124|
000038  42b8              CMP      r0,r7
00003a  d00e              BEQ      |L3.90|
00003c  4f10              LDR      r7,|L3.128|
00003e  42b8              CMP      r0,r7
000040  d00b              BEQ      |L3.90|
000042  f1b04f80          CMP      r0,#0x40000000
000046  d008              BEQ      |L3.90|
000048  4f0e              LDR      r7,|L3.132|
00004a  42b8              CMP      r0,r7
00004c  d005              BEQ      |L3.90|
;;;2811        (TIMx == TIM4) ||(TIMx == TIM5))
00004e  4f0e              LDR      r7,|L3.136|
000050  42b8              CMP      r0,r7
000052  d002              BEQ      |L3.90|
000054  4f0d              LDR      r7,|L3.140|
000056  42b8              CMP      r0,r7
000058  d106              BNE      |L3.104|
                  |L3.90|
;;;2812     {
;;;2813       /* Select the Polarity and set the CC3E Bit */
;;;2814       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
00005a  f64f57ff          MOV      r7,#0xfdff
00005e  4039              ANDS     r1,r1,r7
;;;2815       tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
000060  f4467780          ORR      r7,r6,#0x100
000064  4339              ORRS     r1,r1,r7
000066  e005              B        |L3.116|
                  |L3.104|
;;;2816     }
;;;2817     else
;;;2818     {
;;;2819       /* Select the Polarity and set the CC3E Bit */
;;;2820       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
000068  f24f57ff          MOV      r7,#0xf5ff
00006c  4039              ANDS     r1,r1,r7
;;;2821       tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
00006e  f4447780          ORR      r7,r4,#0x100
000072  4339              ORRS     r1,r1,r7
                  |L3.116|
;;;2822     }
;;;2823     
;;;2824     /* Write to TIMx CCMR2 and CCER registers */
;;;2825     TIMx->CCMR2 = tmpccmr2;
000074  8382              STRH     r2,[r0,#0x1c]
;;;2826     TIMx->CCER = tmpccer;
000076  8401              STRH     r1,[r0,#0x20]
;;;2827   }
000078  bdf0              POP      {r4-r7,pc}
;;;2828   
                          ENDP

00007a  0000              DCW      0x0000
                  |L3.124|
                          DCD      0x40012c00
                  |L3.128|
                          DCD      0x40013400
                  |L3.132|
                          DCD      0x40000400
                  |L3.136|
                          DCD      0x40000800
                  |L3.140|
                          DCD      0x40000c00

                          AREA ||i.TI4_Config||, CODE, READONLY, ALIGN=2

                  TI4_Config PROC
;;;2844     */
;;;2845   static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000000  b5f0              PUSH     {r4-r7,lr}
;;;2846                          uint16_t TIM_ICFilter)
;;;2847   {
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;2848     uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
000006  2200              MOVS     r2,#0
000008  2100              MOVS     r1,#0
00000a  2600              MOVS     r6,#0
;;;2849   
;;;2850      /* Disable the Channel 4: Reset the CC4E Bit */
;;;2851     TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
00000c  8c07              LDRH     r7,[r0,#0x20]
00000e  f64e7cff          MOV      r12,#0xefff
000012  ea07070c          AND      r7,r7,r12
000016  8407              STRH     r7,[r0,#0x20]
;;;2852     tmpccmr2 = TIMx->CCMR2;
000018  8b82              LDRH     r2,[r0,#0x1c]
;;;2853     tmpccer = TIMx->CCER;
00001a  8c01              LDRH     r1,[r0,#0x20]
;;;2854     tmp = (uint16_t)(TIM_ICPolarity << 12);
00001c  f64f77ff          MOV      r7,#0xffff
000020  ea073604          AND      r6,r7,r4,LSL #12
;;;2855     /* Select the Input and set the filter */
;;;2856     tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
000024  f64047ff          MOV      r7,#0xcff
000028  403a              ANDS     r2,r2,r7
;;;2857     tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
00002a  f64f77ff          MOV      r7,#0xffff
00002e  ea072705          AND      r7,r7,r5,LSL #8
000032  433a              ORRS     r2,r2,r7
;;;2858     tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
000034  f64f77ff          MOV      r7,#0xffff
000038  ea073703          AND      r7,r7,r3,LSL #12
00003c  433a              ORRS     r2,r2,r7
;;;2859     
;;;2860     if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
00003e  4f11              LDR      r7,|L4.132|
000040  42b8              CMP      r0,r7
000042  d00e              BEQ      |L4.98|
000044  4f10              LDR      r7,|L4.136|
000046  42b8              CMP      r0,r7
000048  d00b              BEQ      |L4.98|
00004a  f1b04f80          CMP      r0,#0x40000000
00004e  d008              BEQ      |L4.98|
000050  4f0e              LDR      r7,|L4.140|
000052  42b8              CMP      r0,r7
000054  d005              BEQ      |L4.98|
;;;2861        (TIMx == TIM4) ||(TIMx == TIM5))
000056  4f0e              LDR      r7,|L4.144|
000058  42b8              CMP      r0,r7
00005a  d002              BEQ      |L4.98|
00005c  4f0d              LDR      r7,|L4.148|
00005e  42b8              CMP      r0,r7
000060  d106              BNE      |L4.112|
                  |L4.98|
;;;2862     {
;;;2863       /* Select the Polarity and set the CC4E Bit */
;;;2864       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
000062  f64d77ff          MOV      r7,#0xdfff
000066  4039              ANDS     r1,r1,r7
;;;2865       tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
000068  f4465780          ORR      r7,r6,#0x1000
00006c  4339              ORRS     r1,r1,r7
00006e  e005              B        |L4.124|
                  |L4.112|
;;;2866     }
;;;2867     else
;;;2868     {
;;;2869       /* Select the Polarity and set the CC4E Bit */
;;;2870       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
000070  f64757ff          MOV      r7,#0x7dff
000074  4039              ANDS     r1,r1,r7
;;;2871       tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
000076  f4445780          ORR      r7,r4,#0x1000
00007a  4339              ORRS     r1,r1,r7
                  |L4.124|
;;;2872     }
;;;2873     /* Write to TIMx CCMR2 and CCER registers */
;;;2874     TIMx->CCMR2 = tmpccmr2;
00007c  8382              STRH     r2,[r0,#0x1c]
;;;2875     TIMx->CCER = tmpccer;
00007e  8401              STRH     r1,[r0,#0x20]
;;;2876   }
000080  bdf0              POP      {r4-r7,pc}
;;;2877   
                          ENDP

000082  0000              DCW      0x0000
                  |L4.132|
                          DCD      0x40012c00
                  |L4.136|
                          DCD      0x40013400
                  |L4.140|
                          DCD      0x40000400
                  |L4.144|
                          DCD      0x40000800
                  |L4.148|
                          DCD      0x40000c00

                          AREA ||i.TIM_ARRPreloadConfig||, CODE, READONLY, ALIGN=2

                  TIM_ARRPreloadConfig PROC
;;;1408     */
;;;1409   void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;1410   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1411     /* Check the parameters */
;;;1412     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000006  4927              LDR      r1,|L5.164|
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L5.108|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d02c              BEQ      |L5.108|
000012  4925              LDR      r1,|L5.168|
000014  428c              CMP      r4,r1
000016  d029              BEQ      |L5.108|
000018  4924              LDR      r1,|L5.172|
00001a  428c              CMP      r4,r1
00001c  d026              BEQ      |L5.108|
00001e  4924              LDR      r1,|L5.176|
000020  428c              CMP      r4,r1
000022  d023              BEQ      |L5.108|
000024  4923              LDR      r1,|L5.180|
000026  428c              CMP      r4,r1
000028  d020              BEQ      |L5.108|
00002a  4923              LDR      r1,|L5.184|
00002c  428c              CMP      r4,r1
00002e  d01d              BEQ      |L5.108|
000030  4922              LDR      r1,|L5.188|
000032  428c              CMP      r4,r1
000034  d01a              BEQ      |L5.108|
000036  4922              LDR      r1,|L5.192|
000038  428c              CMP      r4,r1
00003a  d017              BEQ      |L5.108|
00003c  4921              LDR      r1,|L5.196|
00003e  428c              CMP      r4,r1
000040  d014              BEQ      |L5.108|
000042  4921              LDR      r1,|L5.200|
000044  428c              CMP      r4,r1
000046  d011              BEQ      |L5.108|
000048  4920              LDR      r1,|L5.204|
00004a  428c              CMP      r4,r1
00004c  d00e              BEQ      |L5.108|
00004e  4920              LDR      r1,|L5.208|
000050  428c              CMP      r4,r1
000052  d00b              BEQ      |L5.108|
000054  491f              LDR      r1,|L5.212|
000056  428c              CMP      r4,r1
000058  d008              BEQ      |L5.108|
00005a  491f              LDR      r1,|L5.216|
00005c  428c              CMP      r4,r1
00005e  d005              BEQ      |L5.108|
000060  491e              LDR      r1,|L5.220|
000062  428c              CMP      r4,r1
000064  d002              BEQ      |L5.108|
000066  491e              LDR      r1,|L5.224|
000068  428c              CMP      r4,r1
00006a  d101              BNE      |L5.112|
                  |L5.108|
00006c  2101              MOVS     r1,#1
00006e  e000              B        |L5.114|
                  |L5.112|
000070  2100              MOVS     r1,#0
                  |L5.114|
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       assert_param
;;;1413     assert_param(IS_FUNCTIONAL_STATE(NewState));
000078  b10d              CBZ      r5,|L5.126|
00007a  2d01              CMP      r5,#1
00007c  d101              BNE      |L5.130|
                  |L5.126|
00007e  2101              MOVS     r1,#1
000080  e000              B        |L5.132|
                  |L5.130|
000082  2100              MOVS     r1,#0
                  |L5.132|
000084  4608              MOV      r0,r1
000086  f7fffffe          BL       assert_param
;;;1414     if (NewState != DISABLE)
00008a  b125              CBZ      r5,|L5.150|
;;;1415     {
;;;1416       /* Set the ARR Preload Bit */
;;;1417       TIMx->CR1 |= TIM_CR1_ARPE;
00008c  8820              LDRH     r0,[r4,#0]
00008e  f0400080          ORR      r0,r0,#0x80
000092  8020              STRH     r0,[r4,#0]
000094  e004              B        |L5.160|
                  |L5.150|
;;;1418     }
;;;1419     else
;;;1420     {
;;;1421       /* Reset the ARR Preload Bit */
;;;1422       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
000096  8820              LDRH     r0,[r4,#0]
000098  f64f717f          MOV      r1,#0xff7f
00009c  4008              ANDS     r0,r0,r1
00009e  8020              STRH     r0,[r4,#0]
                  |L5.160|
;;;1423     }
;;;1424   }
0000a0  bd70              POP      {r4-r6,pc}
;;;1425   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L5.164|
                          DCD      0x40012c00
                  |L5.168|
                          DCD      0x40000400
                  |L5.172|
                          DCD      0x40000800
                  |L5.176|
                          DCD      0x40000c00
                  |L5.180|
                          DCD      0x40001000
                  |L5.184|
                          DCD      0x40001400
                  |L5.188|
                          DCD      0x40013400
                  |L5.192|
                          DCD      0x40014c00
                  |L5.196|
                          DCD      0x40015000
                  |L5.200|
                          DCD      0x40015400
                  |L5.204|
                          DCD      0x40001800
                  |L5.208|
                          DCD      0x40001c00
                  |L5.212|
                          DCD      0x40002000
                  |L5.216|
                          DCD      0x40014000
                  |L5.220|
                          DCD      0x40014400
                  |L5.224|
                          DCD      0x40014800

                          AREA ||i.TIM_BDTRConfig||, CODE, READONLY, ALIGN=2

                  TIM_BDTRConfig PROC
;;;711      */
;;;712    void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;713    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;714      /* Check the parameters */
;;;715      assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000006  493a              LDR      r1,|L6.240|
000008  428d              CMP      r5,r1
00000a  d00b              BEQ      |L6.36|
00000c  4939              LDR      r1,|L6.244|
00000e  428d              CMP      r5,r1
000010  d008              BEQ      |L6.36|
000012  4939              LDR      r1,|L6.248|
000014  428d              CMP      r5,r1
000016  d005              BEQ      |L6.36|
000018  4938              LDR      r1,|L6.252|
00001a  428d              CMP      r5,r1
00001c  d002              BEQ      |L6.36|
00001e  4938              LDR      r1,|L6.256|
000020  428d              CMP      r5,r1
000022  d101              BNE      |L6.40|
                  |L6.36|
000024  2101              MOVS     r1,#1
000026  e000              B        |L6.42|
                  |L6.40|
000028  2100              MOVS     r1,#0
                  |L6.42|
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       assert_param
;;;716      assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
000030  8821              LDRH     r1,[r4,#0]
000032  f5b16f00          CMP      r1,#0x800
000036  d001              BEQ      |L6.60|
000038  8821              LDRH     r1,[r4,#0]
00003a  b909              CBNZ     r1,|L6.64|
                  |L6.60|
00003c  2101              MOVS     r1,#1
00003e  e000              B        |L6.66|
                  |L6.64|
000040  2100              MOVS     r1,#0
                  |L6.66|
000042  4608              MOV      r0,r1
000044  f7fffffe          BL       assert_param
;;;717      assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
000048  8861              LDRH     r1,[r4,#2]
00004a  f5b16f80          CMP      r1,#0x400
00004e  d001              BEQ      |L6.84|
000050  8861              LDRH     r1,[r4,#2]
000052  b909              CBNZ     r1,|L6.88|
                  |L6.84|
000054  2101              MOVS     r1,#1
000056  e000              B        |L6.90|
                  |L6.88|
000058  2100              MOVS     r1,#0
                  |L6.90|
00005a  4608              MOV      r0,r1
00005c  f7fffffe          BL       assert_param
;;;718      assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
000060  88a1              LDRH     r1,[r4,#4]
000062  b159              CBZ      r1,|L6.124|
000064  88a1              LDRH     r1,[r4,#4]
000066  f5b17f80          CMP      r1,#0x100
00006a  d007              BEQ      |L6.124|
00006c  88a1              LDRH     r1,[r4,#4]
00006e  f5b17f00          CMP      r1,#0x200
000072  d003              BEQ      |L6.124|
000074  88a1              LDRH     r1,[r4,#4]
000076  f5b17f40          CMP      r1,#0x300
00007a  d101              BNE      |L6.128|
                  |L6.124|
00007c  2101              MOVS     r1,#1
00007e  e000              B        |L6.130|
                  |L6.128|
000080  2100              MOVS     r1,#0
                  |L6.130|
000082  4608              MOV      r0,r1
000084  f7fffffe          BL       assert_param
;;;719      assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
000088  8921              LDRH     r1,[r4,#8]
00008a  f5b15f80          CMP      r1,#0x1000
00008e  d001              BEQ      |L6.148|
000090  8921              LDRH     r1,[r4,#8]
000092  b909              CBNZ     r1,|L6.152|
                  |L6.148|
000094  2101              MOVS     r1,#1
000096  e000              B        |L6.154|
                  |L6.152|
000098  2100              MOVS     r1,#0
                  |L6.154|
00009a  4608              MOV      r0,r1
00009c  f7fffffe          BL       assert_param
;;;720      assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
0000a0  8961              LDRH     r1,[r4,#0xa]
0000a2  b119              CBZ      r1,|L6.172|
0000a4  8961              LDRH     r1,[r4,#0xa]
0000a6  f5b15f00          CMP      r1,#0x2000
0000aa  d101              BNE      |L6.176|
                  |L6.172|
0000ac  2101              MOVS     r1,#1
0000ae  e000              B        |L6.178|
                  |L6.176|
0000b0  2100              MOVS     r1,#0
                  |L6.178|
0000b2  4608              MOV      r0,r1
0000b4  f7fffffe          BL       assert_param
;;;721      assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
0000b8  89a1              LDRH     r1,[r4,#0xc]
0000ba  f5b14f80          CMP      r1,#0x4000
0000be  d001              BEQ      |L6.196|
0000c0  89a1              LDRH     r1,[r4,#0xc]
0000c2  b909              CBNZ     r1,|L6.200|
                  |L6.196|
0000c4  2101              MOVS     r1,#1
0000c6  e000              B        |L6.202|
                  |L6.200|
0000c8  2100              MOVS     r1,#0
                  |L6.202|
0000ca  4608              MOV      r0,r1
0000cc  f7fffffe          BL       assert_param
;;;722      /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
;;;723         the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;724      TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
0000d0  8820              LDRH     r0,[r4,#0]
0000d2  8861              LDRH     r1,[r4,#2]
0000d4  4308              ORRS     r0,r0,r1
0000d6  88a1              LDRH     r1,[r4,#4]
0000d8  4308              ORRS     r0,r0,r1
0000da  88e1              LDRH     r1,[r4,#6]
0000dc  4308              ORRS     r0,r0,r1
0000de  8921              LDRH     r1,[r4,#8]
0000e0  4308              ORRS     r0,r0,r1
0000e2  8961              LDRH     r1,[r4,#0xa]
0000e4  4308              ORRS     r0,r0,r1
0000e6  89a1              LDRH     r1,[r4,#0xc]
0000e8  4308              ORRS     r0,r0,r1
0000ea  f8a50044          STRH     r0,[r5,#0x44]
;;;725                 TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
;;;726                 TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
;;;727                 TIM_BDTRInitStruct->TIM_AutomaticOutput;
;;;728    }
0000ee  bd70              POP      {r4-r6,pc}
;;;729    
                          ENDP

                  |L6.240|
                          DCD      0x40012c00
                  |L6.244|
                          DCD      0x40013400
                  |L6.248|
                          DCD      0x40014000
                  |L6.252|
                          DCD      0x40014400
                  |L6.256|
                          DCD      0x40014800

                          AREA ||i.TIM_BDTRStructInit||, CODE, READONLY, ALIGN=1

                  TIM_BDTRStructInit PROC
;;;786      */
;;;787    void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
000000  2100              MOVS     r1,#0
;;;788    {
;;;789      /* Set the default configuration */
;;;790      TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
000002  8001              STRH     r1,[r0,#0]
;;;791      TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
000004  8041              STRH     r1,[r0,#2]
;;;792      TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
000006  8081              STRH     r1,[r0,#4]
;;;793      TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
000008  80c1              STRH     r1,[r0,#6]
;;;794      TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
00000a  8101              STRH     r1,[r0,#8]
;;;795      TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
00000c  8141              STRH     r1,[r0,#0xa]
;;;796      TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
00000e  8181              STRH     r1,[r0,#0xc]
;;;797    }
000010  4770              BX       lr
;;;798    
                          ENDP


                          AREA ||i.TIM_CCPreloadControl||, CODE, READONLY, ALIGN=2

                  TIM_CCPreloadControl PROC
;;;1482     */
;;;1483   void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;1484   { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1485     /* Check the parameters */
;;;1486     assert_param(IS_TIM_LIST5_PERIPH(TIMx));
000006  4918              LDR      r1,|L8.104|
000008  428c              CMP      r4,r1
00000a  d011              BEQ      |L8.48|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d00e              BEQ      |L8.48|
000012  4916              LDR      r1,|L8.108|
000014  428c              CMP      r4,r1
000016  d00b              BEQ      |L8.48|
000018  4915              LDR      r1,|L8.112|
00001a  428c              CMP      r4,r1
00001c  d008              BEQ      |L8.48|
00001e  4915              LDR      r1,|L8.116|
000020  428c              CMP      r4,r1
000022  d005              BEQ      |L8.48|
000024  4914              LDR      r1,|L8.120|
000026  428c              CMP      r4,r1
000028  d002              BEQ      |L8.48|
00002a  4914              LDR      r1,|L8.124|
00002c  428c              CMP      r4,r1
00002e  d101              BNE      |L8.52|
                  |L8.48|
000030  2101              MOVS     r1,#1
000032  e000              B        |L8.54|
                  |L8.52|
000034  2100              MOVS     r1,#0
                  |L8.54|
000036  4608              MOV      r0,r1
000038  f7fffffe          BL       assert_param
;;;1487     assert_param(IS_FUNCTIONAL_STATE(NewState));
00003c  b10d              CBZ      r5,|L8.66|
00003e  2d01              CMP      r5,#1
000040  d101              BNE      |L8.70|
                  |L8.66|
000042  2101              MOVS     r1,#1
000044  e000              B        |L8.72|
                  |L8.70|
000046  2100              MOVS     r1,#0
                  |L8.72|
000048  4608              MOV      r0,r1
00004a  f7fffffe          BL       assert_param
;;;1488     if (NewState != DISABLE)
00004e  b125              CBZ      r5,|L8.90|
;;;1489     {
;;;1490       /* Set the CCPC Bit */
;;;1491       TIMx->CR2 |= TIM_CR2_CCPC;
000050  88a0              LDRH     r0,[r4,#4]
000052  f0400001          ORR      r0,r0,#1
000056  80a0              STRH     r0,[r4,#4]
000058  e004              B        |L8.100|
                  |L8.90|
;;;1492     }
;;;1493     else
;;;1494     {
;;;1495       /* Reset the CCPC Bit */
;;;1496       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
00005a  88a0              LDRH     r0,[r4,#4]
00005c  f64f71fe          MOV      r1,#0xfffe
000060  4008              ANDS     r0,r0,r1
000062  80a0              STRH     r0,[r4,#4]
                  |L8.100|
;;;1497     }
;;;1498   }
000064  bd70              POP      {r4-r6,pc}
;;;1499   
                          ENDP

000066  0000              DCW      0x0000
                  |L8.104|
                          DCD      0x40012c00
                  |L8.108|
                          DCD      0x40000400
                  |L8.112|
                          DCD      0x40000800
                  |L8.116|
                          DCD      0x40000c00
                  |L8.120|
                          DCD      0x40013400
                  |L8.124|
                          DCD      0x40014000

                          AREA ||i.TIM_CCxCmd||, CODE, READONLY, ALIGN=2

                  TIM_CCxCmd PROC
;;;1973     */
;;;1974   void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1975   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;1976     uint16_t tmp = 0;
00000a  2700              MOVS     r7,#0
;;;1977   
;;;1978     /* Check the parameters */
;;;1979     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
00000c  492b              LDR      r1,|L9.188|
00000e  428c              CMP      r4,r1
000010  d029              BEQ      |L9.102|
000012  f1b44f80          CMP      r4,#0x40000000
000016  d026              BEQ      |L9.102|
000018  4929              LDR      r1,|L9.192|
00001a  428c              CMP      r4,r1
00001c  d023              BEQ      |L9.102|
00001e  4929              LDR      r1,|L9.196|
000020  428c              CMP      r4,r1
000022  d020              BEQ      |L9.102|
000024  4928              LDR      r1,|L9.200|
000026  428c              CMP      r4,r1
000028  d01d              BEQ      |L9.102|
00002a  4928              LDR      r1,|L9.204|
00002c  428c              CMP      r4,r1
00002e  d01a              BEQ      |L9.102|
000030  4927              LDR      r1,|L9.208|
000032  428c              CMP      r4,r1
000034  d017              BEQ      |L9.102|
000036  4927              LDR      r1,|L9.212|
000038  428c              CMP      r4,r1
00003a  d014              BEQ      |L9.102|
00003c  4926              LDR      r1,|L9.216|
00003e  428c              CMP      r4,r1
000040  d011              BEQ      |L9.102|
000042  4926              LDR      r1,|L9.220|
000044  428c              CMP      r4,r1
000046  d00e              BEQ      |L9.102|
000048  4925              LDR      r1,|L9.224|
00004a  428c              CMP      r4,r1
00004c  d00b              BEQ      |L9.102|
00004e  4925              LDR      r1,|L9.228|
000050  428c              CMP      r4,r1
000052  d008              BEQ      |L9.102|
000054  4924              LDR      r1,|L9.232|
000056  428c              CMP      r4,r1
000058  d005              BEQ      |L9.102|
00005a  4924              LDR      r1,|L9.236|
00005c  428c              CMP      r4,r1
00005e  d002              BEQ      |L9.102|
000060  4923              LDR      r1,|L9.240|
000062  428c              CMP      r4,r1
000064  d101              BNE      |L9.106|
                  |L9.102|
000066  2101              MOVS     r1,#1
000068  e000              B        |L9.108|
                  |L9.106|
00006a  2100              MOVS     r1,#0
                  |L9.108|
00006c  4608              MOV      r0,r1
00006e  f7fffffe          BL       assert_param
;;;1980     assert_param(IS_TIM_CHANNEL(TIM_Channel));
000072  b12d              CBZ      r5,|L9.128|
000074  2d04              CMP      r5,#4
000076  d003              BEQ      |L9.128|
000078  2d08              CMP      r5,#8
00007a  d001              BEQ      |L9.128|
00007c  2d0c              CMP      r5,#0xc
00007e  d101              BNE      |L9.132|
                  |L9.128|
000080  2101              MOVS     r1,#1
000082  e000              B        |L9.134|
                  |L9.132|
000084  2100              MOVS     r1,#0
                  |L9.134|
000086  4608              MOV      r0,r1
000088  f7fffffe          BL       assert_param
;;;1981     assert_param(IS_TIM_CCX(TIM_CCx));
00008c  2e01              CMP      r6,#1
00008e  d000              BEQ      |L9.146|
000090  b90e              CBNZ     r6,|L9.150|
                  |L9.146|
000092  2101              MOVS     r1,#1
000094  e000              B        |L9.152|
                  |L9.150|
000096  2100              MOVS     r1,#0
                  |L9.152|
000098  4608              MOV      r0,r1
00009a  f7fffffe          BL       assert_param
;;;1982   
;;;1983     tmp = CCER_CCE_Set << TIM_Channel;
00009e  2001              MOVS     r0,#1
0000a0  40a8              LSLS     r0,r0,r5
0000a2  b287              UXTH     r7,r0
;;;1984   
;;;1985     /* Reset the CCxE Bit */
;;;1986     TIMx->CCER &= (uint16_t)~ tmp;
0000a4  8c20              LDRH     r0,[r4,#0x20]
0000a6  43b8              BICS     r0,r0,r7
0000a8  8420              STRH     r0,[r4,#0x20]
;;;1987   
;;;1988     /* Set or reset the CCxE Bit */ 
;;;1989     TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
0000aa  8c20              LDRH     r0,[r4,#0x20]
0000ac  fa06f105          LSL      r1,r6,r5
0000b0  b289              UXTH     r1,r1
0000b2  4308              ORRS     r0,r0,r1
0000b4  8420              STRH     r0,[r4,#0x20]
;;;1990   }
0000b6  e8bd81f0          POP      {r4-r8,pc}
;;;1991   
                          ENDP

0000ba  0000              DCW      0x0000
                  |L9.188|
                          DCD      0x40012c00
                  |L9.192|
                          DCD      0x40000400
                  |L9.196|
                          DCD      0x40000800
                  |L9.200|
                          DCD      0x40000c00
                  |L9.204|
                          DCD      0x40013400
                  |L9.208|
                          DCD      0x40014c00
                  |L9.212|
                          DCD      0x40015000
                  |L9.216|
                          DCD      0x40015400
                  |L9.220|
                          DCD      0x40001800
                  |L9.224|
                          DCD      0x40001c00
                  |L9.228|
                          DCD      0x40002000
                  |L9.232|
                          DCD      0x40014000
                  |L9.236|
                          DCD      0x40014400
                  |L9.240|
                          DCD      0x40014800

                          AREA ||i.TIM_CCxNCmd||, CODE, READONLY, ALIGN=2

                  TIM_CCxNCmd PROC
;;;2003     */
;;;2004   void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2005   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;2006     uint16_t tmp = 0;
00000a  2700              MOVS     r7,#0
;;;2007   
;;;2008     /* Check the parameters */
;;;2009     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
00000c  491b              LDR      r1,|L10.124|
00000e  428c              CMP      r4,r1
000010  d00b              BEQ      |L10.42|
000012  491b              LDR      r1,|L10.128|
000014  428c              CMP      r4,r1
000016  d008              BEQ      |L10.42|
000018  491a              LDR      r1,|L10.132|
00001a  428c              CMP      r4,r1
00001c  d005              BEQ      |L10.42|
00001e  491a              LDR      r1,|L10.136|
000020  428c              CMP      r4,r1
000022  d002              BEQ      |L10.42|
000024  4919              LDR      r1,|L10.140|
000026  428c              CMP      r4,r1
000028  d101              BNE      |L10.46|
                  |L10.42|
00002a  2101              MOVS     r1,#1
00002c  e000              B        |L10.48|
                  |L10.46|
00002e  2100              MOVS     r1,#0
                  |L10.48|
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       assert_param
;;;2010     assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
000036  b11d              CBZ      r5,|L10.64|
000038  2d04              CMP      r5,#4
00003a  d001              BEQ      |L10.64|
00003c  2d08              CMP      r5,#8
00003e  d101              BNE      |L10.68|
                  |L10.64|
000040  2101              MOVS     r1,#1
000042  e000              B        |L10.70|
                  |L10.68|
000044  2100              MOVS     r1,#0
                  |L10.70|
000046  4608              MOV      r0,r1
000048  f7fffffe          BL       assert_param
;;;2011     assert_param(IS_TIM_CCXN(TIM_CCxN));
00004c  2e04              CMP      r6,#4
00004e  d000              BEQ      |L10.82|
000050  b90e              CBNZ     r6,|L10.86|
                  |L10.82|
000052  2101              MOVS     r1,#1
000054  e000              B        |L10.88|
                  |L10.86|
000056  2100              MOVS     r1,#0
                  |L10.88|
000058  4608              MOV      r0,r1
00005a  f7fffffe          BL       assert_param
;;;2012   
;;;2013     tmp = CCER_CCNE_Set << TIM_Channel;
00005e  2004              MOVS     r0,#4
000060  40a8              LSLS     r0,r0,r5
000062  b287              UXTH     r7,r0
;;;2014   
;;;2015     /* Reset the CCxNE Bit */
;;;2016     TIMx->CCER &= (uint16_t) ~tmp;
000064  8c20              LDRH     r0,[r4,#0x20]
000066  43b8              BICS     r0,r0,r7
000068  8420              STRH     r0,[r4,#0x20]
;;;2017   
;;;2018     /* Set or reset the CCxNE Bit */ 
;;;2019     TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
00006a  8c20              LDRH     r0,[r4,#0x20]
00006c  fa06f105          LSL      r1,r6,r5
000070  b289              UXTH     r1,r1
000072  4308              ORRS     r0,r0,r1
000074  8420              STRH     r0,[r4,#0x20]
;;;2020   }
000076  e8bd81f0          POP      {r4-r8,pc}
;;;2021   
                          ENDP

00007a  0000              DCW      0x0000
                  |L10.124|
                          DCD      0x40012c00
                  |L10.128|
                          DCD      0x40013400
                  |L10.132|
                          DCD      0x40014000
                  |L10.136|
                          DCD      0x40014400
                  |L10.140|
                          DCD      0x40014800

                          AREA ||i.TIM_ClearFlag||, CODE, READONLY, ALIGN=2

                  TIM_ClearFlag PROC
;;;2599     */
;;;2600   void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;2601   {  
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2602     /* Check the parameters */
;;;2603     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000006  4923              LDR      r1,|L11.148|
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L11.108|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d02c              BEQ      |L11.108|
000012  4921              LDR      r1,|L11.152|
000014  428c              CMP      r4,r1
000016  d029              BEQ      |L11.108|
000018  4920              LDR      r1,|L11.156|
00001a  428c              CMP      r4,r1
00001c  d026              BEQ      |L11.108|
00001e  4920              LDR      r1,|L11.160|
000020  428c              CMP      r4,r1
000022  d023              BEQ      |L11.108|
000024  491f              LDR      r1,|L11.164|
000026  428c              CMP      r4,r1
000028  d020              BEQ      |L11.108|
00002a  491f              LDR      r1,|L11.168|
00002c  428c              CMP      r4,r1
00002e  d01d              BEQ      |L11.108|
000030  491e              LDR      r1,|L11.172|
000032  428c              CMP      r4,r1
000034  d01a              BEQ      |L11.108|
000036  491e              LDR      r1,|L11.176|
000038  428c              CMP      r4,r1
00003a  d017              BEQ      |L11.108|
00003c  491d              LDR      r1,|L11.180|
00003e  428c              CMP      r4,r1
000040  d014              BEQ      |L11.108|
000042  491d              LDR      r1,|L11.184|
000044  428c              CMP      r4,r1
000046  d011              BEQ      |L11.108|
000048  491c              LDR      r1,|L11.188|
00004a  428c              CMP      r4,r1
00004c  d00e              BEQ      |L11.108|
00004e  491c              LDR      r1,|L11.192|
000050  428c              CMP      r4,r1
000052  d00b              BEQ      |L11.108|
000054  491b              LDR      r1,|L11.196|
000056  428c              CMP      r4,r1
000058  d008              BEQ      |L11.108|
00005a  491b              LDR      r1,|L11.200|
00005c  428c              CMP      r4,r1
00005e  d005              BEQ      |L11.108|
000060  491a              LDR      r1,|L11.204|
000062  428c              CMP      r4,r1
000064  d002              BEQ      |L11.108|
000066  491a              LDR      r1,|L11.208|
000068  428c              CMP      r4,r1
00006a  d101              BNE      |L11.112|
                  |L11.108|
00006c  2101              MOVS     r1,#1
00006e  e000              B        |L11.114|
                  |L11.112|
000070  2100              MOVS     r1,#0
                  |L11.114|
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       assert_param
;;;2604     assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
000078  f4054161          AND      r1,r5,#0xe100
00007c  b911              CBNZ     r1,|L11.132|
00007e  b10d              CBZ      r5,|L11.132|
000080  2101              MOVS     r1,#1
000082  e000              B        |L11.134|
                  |L11.132|
000084  2100              MOVS     r1,#0
                  |L11.134|
000086  4608              MOV      r0,r1
000088  f7fffffe          BL       assert_param
;;;2605      
;;;2606     /* Clear the flags */
;;;2607     TIMx->SR = (uint16_t)~TIM_FLAG;
00008c  43e8              MVNS     r0,r5
00008e  8220              STRH     r0,[r4,#0x10]
;;;2608   }
000090  bd70              POP      {r4-r6,pc}
;;;2609   
                          ENDP

000092  0000              DCW      0x0000
                  |L11.148|
                          DCD      0x40012c00
                  |L11.152|
                          DCD      0x40000400
                  |L11.156|
                          DCD      0x40000800
                  |L11.160|
                          DCD      0x40000c00
                  |L11.164|
                          DCD      0x40001000
                  |L11.168|
                          DCD      0x40001400
                  |L11.172|
                          DCD      0x40013400
                  |L11.176|
                          DCD      0x40014c00
                  |L11.180|
                          DCD      0x40015000
                  |L11.184|
                          DCD      0x40015400
                  |L11.188|
                          DCD      0x40001800
                  |L11.192|
                          DCD      0x40001c00
                  |L11.196|
                          DCD      0x40002000
                  |L11.200|
                          DCD      0x40014000
                  |L11.204|
                          DCD      0x40014400
                  |L11.208|
                          DCD      0x40014800

                          AREA ||i.TIM_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  TIM_ClearITPendingBit PROC
;;;2675     */
;;;2676   void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;2677   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2678     /* Check the parameters */
;;;2679     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000006  4923              LDR      r1,|L12.148|
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L12.108|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d02c              BEQ      |L12.108|
000012  4921              LDR      r1,|L12.152|
000014  428c              CMP      r4,r1
000016  d029              BEQ      |L12.108|
000018  4920              LDR      r1,|L12.156|
00001a  428c              CMP      r4,r1
00001c  d026              BEQ      |L12.108|
00001e  4920              LDR      r1,|L12.160|
000020  428c              CMP      r4,r1
000022  d023              BEQ      |L12.108|
000024  491f              LDR      r1,|L12.164|
000026  428c              CMP      r4,r1
000028  d020              BEQ      |L12.108|
00002a  491f              LDR      r1,|L12.168|
00002c  428c              CMP      r4,r1
00002e  d01d              BEQ      |L12.108|
000030  491e              LDR      r1,|L12.172|
000032  428c              CMP      r4,r1
000034  d01a              BEQ      |L12.108|
000036  491e              LDR      r1,|L12.176|
000038  428c              CMP      r4,r1
00003a  d017              BEQ      |L12.108|
00003c  491d              LDR      r1,|L12.180|
00003e  428c              CMP      r4,r1
000040  d014              BEQ      |L12.108|
000042  491d              LDR      r1,|L12.184|
000044  428c              CMP      r4,r1
000046  d011              BEQ      |L12.108|
000048  491c              LDR      r1,|L12.188|
00004a  428c              CMP      r4,r1
00004c  d00e              BEQ      |L12.108|
00004e  491c              LDR      r1,|L12.192|
000050  428c              CMP      r4,r1
000052  d00b              BEQ      |L12.108|
000054  491b              LDR      r1,|L12.196|
000056  428c              CMP      r4,r1
000058  d008              BEQ      |L12.108|
00005a  491b              LDR      r1,|L12.200|
00005c  428c              CMP      r4,r1
00005e  d005              BEQ      |L12.108|
000060  491a              LDR      r1,|L12.204|
000062  428c              CMP      r4,r1
000064  d002              BEQ      |L12.108|
000066  491a              LDR      r1,|L12.208|
000068  428c              CMP      r4,r1
00006a  d101              BNE      |L12.112|
                  |L12.108|
00006c  2101              MOVS     r1,#1
00006e  e000              B        |L12.114|
                  |L12.112|
000070  2100              MOVS     r1,#0
                  |L12.114|
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       assert_param
;;;2680     assert_param(IS_TIM_IT(TIM_IT));
000078  f405417f          AND      r1,r5,#0xff00
00007c  b911              CBNZ     r1,|L12.132|
00007e  b10d              CBZ      r5,|L12.132|
000080  2101              MOVS     r1,#1
000082  e000              B        |L12.134|
                  |L12.132|
000084  2100              MOVS     r1,#0
                  |L12.134|
000086  4608              MOV      r0,r1
000088  f7fffffe          BL       assert_param
;;;2681     /* Clear the IT pending Bit */
;;;2682     TIMx->SR = (uint16_t)~TIM_IT;
00008c  43e8              MVNS     r0,r5
00008e  8220              STRH     r0,[r4,#0x10]
;;;2683   }
000090  bd70              POP      {r4-r6,pc}
;;;2684   
                          ENDP

000092  0000              DCW      0x0000
                  |L12.148|
                          DCD      0x40012c00
                  |L12.152|
                          DCD      0x40000400
                  |L12.156|
                          DCD      0x40000800
                  |L12.160|
                          DCD      0x40000c00
                  |L12.164|
                          DCD      0x40001000
                  |L12.168|
                          DCD      0x40001400
                  |L12.172|
                          DCD      0x40013400
                  |L12.176|
                          DCD      0x40014c00
                  |L12.180|
                          DCD      0x40015000
                  |L12.184|
                          DCD      0x40015400
                  |L12.188|
                          DCD      0x40001800
                  |L12.192|
                          DCD      0x40001c00
                  |L12.196|
                          DCD      0x40002000
                  |L12.200|
                          DCD      0x40014000
                  |L12.204|
                          DCD      0x40014400
                  |L12.208|
                          DCD      0x40014800

                          AREA ||i.TIM_ClearOC1Ref||, CODE, READONLY, ALIGN=2

                  TIM_ClearOC1Ref PROC
;;;1706     */
;;;1707   void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  b570              PUSH     {r4-r6,lr}
;;;1708   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1709     uint16_t tmpccmr1 = 0;
000006  2600              MOVS     r6,#0
;;;1710     /* Check the parameters */
;;;1711     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4913              LDR      r1,|L13.88|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L13.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L13.44|
000014  4911              LDR      r1,|L13.92|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L13.44|
00001a  4911              LDR      r1,|L13.96|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L13.44|
000020  4910              LDR      r1,|L13.100|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L13.44|
000026  4910              LDR      r1,|L13.104|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L13.48|
                  |L13.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L13.50|
                  |L13.48|
000030  2100              MOVS     r1,#0
                  |L13.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1712     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
000038  2d80              CMP      r5,#0x80
00003a  d000              BEQ      |L13.62|
00003c  b90d              CBNZ     r5,|L13.66|
                  |L13.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L13.68|
                  |L13.66|
000042  2100              MOVS     r1,#0
                  |L13.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1713   
;;;1714     tmpccmr1 = TIMx->CCMR1;
00004a  8b26              LDRH     r6,[r4,#0x18]
;;;1715   
;;;1716     /* Reset the OC1CE Bit */
;;;1717     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
00004c  f64f707f          MOV      r0,#0xff7f
000050  4006              ANDS     r6,r6,r0
;;;1718     /* Enable or Disable the Output Compare Clear Bit */
;;;1719     tmpccmr1 |= TIM_OCClear;
000052  432e              ORRS     r6,r6,r5
;;;1720     /* Write to TIMx CCMR1 register */
;;;1721     TIMx->CCMR1 = tmpccmr1;
000054  8326              STRH     r6,[r4,#0x18]
;;;1722   }
000056  bd70              POP      {r4-r6,pc}
;;;1723   
                          ENDP

                  |L13.88|
                          DCD      0x40012c00
                  |L13.92|
                          DCD      0x40000400
                  |L13.96|
                          DCD      0x40000800
                  |L13.100|
                          DCD      0x40000c00
                  |L13.104|
                          DCD      0x40013400

                          AREA ||i.TIM_ClearOC2Ref||, CODE, READONLY, ALIGN=2

                  TIM_ClearOC2Ref PROC
;;;1732     */
;;;1733   void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  b570              PUSH     {r4-r6,lr}
;;;1734   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1735     uint16_t tmpccmr1 = 0;
000006  2600              MOVS     r6,#0
;;;1736     /* Check the parameters */
;;;1737     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4915              LDR      r1,|L14.96|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L14.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L14.44|
000014  4913              LDR      r1,|L14.100|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L14.44|
00001a  4913              LDR      r1,|L14.104|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L14.44|
000020  4912              LDR      r1,|L14.108|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L14.44|
000026  4912              LDR      r1,|L14.112|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L14.48|
                  |L14.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L14.50|
                  |L14.48|
000030  2100              MOVS     r1,#0
                  |L14.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1738     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
000038  2d80              CMP      r5,#0x80
00003a  d000              BEQ      |L14.62|
00003c  b90d              CBNZ     r5,|L14.66|
                  |L14.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L14.68|
                  |L14.66|
000042  2100              MOVS     r1,#0
                  |L14.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1739     tmpccmr1 = TIMx->CCMR1;
00004a  8b26              LDRH     r6,[r4,#0x18]
;;;1740     /* Reset the OC2CE Bit */
;;;1741     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
00004c  f3c6060e          UBFX     r6,r6,#0,#15
;;;1742     /* Enable or Disable the Output Compare Clear Bit */
;;;1743     tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
000050  f64f70ff          MOV      r0,#0xffff
000054  ea002005          AND      r0,r0,r5,LSL #8
000058  4306              ORRS     r6,r6,r0
;;;1744     /* Write to TIMx CCMR1 register */
;;;1745     TIMx->CCMR1 = tmpccmr1;
00005a  8326              STRH     r6,[r4,#0x18]
;;;1746   }
00005c  bd70              POP      {r4-r6,pc}
;;;1747   
                          ENDP

00005e  0000              DCW      0x0000
                  |L14.96|
                          DCD      0x40012c00
                  |L14.100|
                          DCD      0x40000400
                  |L14.104|
                          DCD      0x40000800
                  |L14.108|
                          DCD      0x40000c00
                  |L14.112|
                          DCD      0x40013400

                          AREA ||i.TIM_ClearOC3Ref||, CODE, READONLY, ALIGN=2

                  TIM_ClearOC3Ref PROC
;;;1756     */
;;;1757   void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  b570              PUSH     {r4-r6,lr}
;;;1758   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1759     uint16_t tmpccmr2 = 0;
000006  2600              MOVS     r6,#0
;;;1760     /* Check the parameters */
;;;1761     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4913              LDR      r1,|L15.88|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L15.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L15.44|
000014  4911              LDR      r1,|L15.92|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L15.44|
00001a  4911              LDR      r1,|L15.96|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L15.44|
000020  4910              LDR      r1,|L15.100|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L15.44|
000026  4910              LDR      r1,|L15.104|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L15.48|
                  |L15.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L15.50|
                  |L15.48|
000030  2100              MOVS     r1,#0
                  |L15.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1762     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
000038  2d80              CMP      r5,#0x80
00003a  d000              BEQ      |L15.62|
00003c  b90d              CBNZ     r5,|L15.66|
                  |L15.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L15.68|
                  |L15.66|
000042  2100              MOVS     r1,#0
                  |L15.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1763     tmpccmr2 = TIMx->CCMR2;
00004a  8ba6              LDRH     r6,[r4,#0x1c]
;;;1764     /* Reset the OC3CE Bit */
;;;1765     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
00004c  f64f707f          MOV      r0,#0xff7f
000050  4006              ANDS     r6,r6,r0
;;;1766     /* Enable or Disable the Output Compare Clear Bit */
;;;1767     tmpccmr2 |= TIM_OCClear;
000052  432e              ORRS     r6,r6,r5
;;;1768     /* Write to TIMx CCMR2 register */
;;;1769     TIMx->CCMR2 = tmpccmr2;
000054  83a6              STRH     r6,[r4,#0x1c]
;;;1770   }
000056  bd70              POP      {r4-r6,pc}
;;;1771   
                          ENDP

                  |L15.88|
                          DCD      0x40012c00
                  |L15.92|
                          DCD      0x40000400
                  |L15.96|
                          DCD      0x40000800
                  |L15.100|
                          DCD      0x40000c00
                  |L15.104|
                          DCD      0x40013400

                          AREA ||i.TIM_ClearOC4Ref||, CODE, READONLY, ALIGN=2

                  TIM_ClearOC4Ref PROC
;;;1780     */
;;;1781   void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  b570              PUSH     {r4-r6,lr}
;;;1782   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1783     uint16_t tmpccmr2 = 0;
000006  2600              MOVS     r6,#0
;;;1784     /* Check the parameters */
;;;1785     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4915              LDR      r1,|L16.96|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L16.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L16.44|
000014  4913              LDR      r1,|L16.100|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L16.44|
00001a  4913              LDR      r1,|L16.104|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L16.44|
000020  4912              LDR      r1,|L16.108|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L16.44|
000026  4912              LDR      r1,|L16.112|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L16.48|
                  |L16.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L16.50|
                  |L16.48|
000030  2100              MOVS     r1,#0
                  |L16.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1786     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
000038  2d80              CMP      r5,#0x80
00003a  d000              BEQ      |L16.62|
00003c  b90d              CBNZ     r5,|L16.66|
                  |L16.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L16.68|
                  |L16.66|
000042  2100              MOVS     r1,#0
                  |L16.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1787     tmpccmr2 = TIMx->CCMR2;
00004a  8ba6              LDRH     r6,[r4,#0x1c]
;;;1788     /* Reset the OC4CE Bit */
;;;1789     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
00004c  f3c6060e          UBFX     r6,r6,#0,#15
;;;1790     /* Enable or Disable the Output Compare Clear Bit */
;;;1791     tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
000050  f64f70ff          MOV      r0,#0xffff
000054  ea002005          AND      r0,r0,r5,LSL #8
000058  4306              ORRS     r6,r6,r0
;;;1792     /* Write to TIMx CCMR2 register */
;;;1793     TIMx->CCMR2 = tmpccmr2;
00005a  83a6              STRH     r6,[r4,#0x1c]
;;;1794   }
00005c  bd70              POP      {r4-r6,pc}
;;;1795   
                          ENDP

00005e  0000              DCW      0x0000
                  |L16.96|
                          DCD      0x40012c00
                  |L16.100|
                          DCD      0x40000400
                  |L16.104|
                          DCD      0x40000800
                  |L16.108|
                          DCD      0x40000c00
                  |L16.112|
                          DCD      0x40013400

                          AREA ||i.TIM_Cmd||, CODE, READONLY, ALIGN=2

                  TIM_Cmd PROC
;;;805      */
;;;806    void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;807    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;808      /* Check the parameters */
;;;809      assert_param(IS_TIM_ALL_PERIPH(TIMx));
000006  4927              LDR      r1,|L17.164|
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L17.108|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d02c              BEQ      |L17.108|
000012  4925              LDR      r1,|L17.168|
000014  428c              CMP      r4,r1
000016  d029              BEQ      |L17.108|
000018  4924              LDR      r1,|L17.172|
00001a  428c              CMP      r4,r1
00001c  d026              BEQ      |L17.108|
00001e  4924              LDR      r1,|L17.176|
000020  428c              CMP      r4,r1
000022  d023              BEQ      |L17.108|
000024  4923              LDR      r1,|L17.180|
000026  428c              CMP      r4,r1
000028  d020              BEQ      |L17.108|
00002a  4923              LDR      r1,|L17.184|
00002c  428c              CMP      r4,r1
00002e  d01d              BEQ      |L17.108|
000030  4922              LDR      r1,|L17.188|
000032  428c              CMP      r4,r1
000034  d01a              BEQ      |L17.108|
000036  4922              LDR      r1,|L17.192|
000038  428c              CMP      r4,r1
00003a  d017              BEQ      |L17.108|
00003c  4921              LDR      r1,|L17.196|
00003e  428c              CMP      r4,r1
000040  d014              BEQ      |L17.108|
000042  4921              LDR      r1,|L17.200|
000044  428c              CMP      r4,r1
000046  d011              BEQ      |L17.108|
000048  4920              LDR      r1,|L17.204|
00004a  428c              CMP      r4,r1
00004c  d00e              BEQ      |L17.108|
00004e  4920              LDR      r1,|L17.208|
000050  428c              CMP      r4,r1
000052  d00b              BEQ      |L17.108|
000054  491f              LDR      r1,|L17.212|
000056  428c              CMP      r4,r1
000058  d008              BEQ      |L17.108|
00005a  491f              LDR      r1,|L17.216|
00005c  428c              CMP      r4,r1
00005e  d005              BEQ      |L17.108|
000060  491e              LDR      r1,|L17.220|
000062  428c              CMP      r4,r1
000064  d002              BEQ      |L17.108|
000066  491e              LDR      r1,|L17.224|
000068  428c              CMP      r4,r1
00006a  d101              BNE      |L17.112|
                  |L17.108|
00006c  2101              MOVS     r1,#1
00006e  e000              B        |L17.114|
                  |L17.112|
000070  2100              MOVS     r1,#0
                  |L17.114|
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       assert_param
;;;810      assert_param(IS_FUNCTIONAL_STATE(NewState));
000078  b10d              CBZ      r5,|L17.126|
00007a  2d01              CMP      r5,#1
00007c  d101              BNE      |L17.130|
                  |L17.126|
00007e  2101              MOVS     r1,#1
000080  e000              B        |L17.132|
                  |L17.130|
000082  2100              MOVS     r1,#0
                  |L17.132|
000084  4608              MOV      r0,r1
000086  f7fffffe          BL       assert_param
;;;811      
;;;812      if (NewState != DISABLE)
00008a  b125              CBZ      r5,|L17.150|
;;;813      {
;;;814        /* Enable the TIM Counter */
;;;815        TIMx->CR1 |= TIM_CR1_CEN;
00008c  8820              LDRH     r0,[r4,#0]
00008e  f0400001          ORR      r0,r0,#1
000092  8020              STRH     r0,[r4,#0]
000094  e004              B        |L17.160|
                  |L17.150|
;;;816      }
;;;817      else
;;;818      {
;;;819        /* Disable the TIM Counter */
;;;820        TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
000096  8820              LDRH     r0,[r4,#0]
000098  f64f71fe          MOV      r1,#0xfffe
00009c  4008              ANDS     r0,r0,r1
00009e  8020              STRH     r0,[r4,#0]
                  |L17.160|
;;;821      }
;;;822    }
0000a0  bd70              POP      {r4-r6,pc}
;;;823    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L17.164|
                          DCD      0x40012c00
                  |L17.168|
                          DCD      0x40000400
                  |L17.172|
                          DCD      0x40000800
                  |L17.176|
                          DCD      0x40000c00
                  |L17.180|
                          DCD      0x40001000
                  |L17.184|
                          DCD      0x40001400
                  |L17.188|
                          DCD      0x40013400
                  |L17.192|
                          DCD      0x40014c00
                  |L17.196|
                          DCD      0x40015000
                  |L17.200|
                          DCD      0x40015400
                  |L17.204|
                          DCD      0x40001800
                  |L17.208|
                          DCD      0x40001c00
                  |L17.212|
                          DCD      0x40002000
                  |L17.216|
                          DCD      0x40014000
                  |L17.220|
                          DCD      0x40014400
                  |L17.224|
                          DCD      0x40014800

                          AREA ||i.TIM_CounterModeConfig||, CODE, READONLY, ALIGN=2

                  TIM_CounterModeConfig PROC
;;;1198     */
;;;1199   void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
000000  b570              PUSH     {r4-r6,lr}
;;;1200   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1201     uint16_t tmpcr1 = 0;
000006  2600              MOVS     r6,#0
;;;1202     /* Check the parameters */
;;;1203     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4916              LDR      r1,|L18.100|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L18.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L18.44|
000014  4914              LDR      r1,|L18.104|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L18.44|
00001a  4914              LDR      r1,|L18.108|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L18.44|
000020  4913              LDR      r1,|L18.112|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L18.44|
000026  4913              LDR      r1,|L18.116|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L18.48|
                  |L18.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L18.50|
                  |L18.48|
000030  2100              MOVS     r1,#0
                  |L18.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1204     assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
000038  b13d              CBZ      r5,|L18.74|
00003a  2d10              CMP      r5,#0x10
00003c  d005              BEQ      |L18.74|
00003e  2d20              CMP      r5,#0x20
000040  d003              BEQ      |L18.74|
000042  2d40              CMP      r5,#0x40
000044  d001              BEQ      |L18.74|
000046  2d60              CMP      r5,#0x60
000048  d101              BNE      |L18.78|
                  |L18.74|
00004a  2101              MOVS     r1,#1
00004c  e000              B        |L18.80|
                  |L18.78|
00004e  2100              MOVS     r1,#0
                  |L18.80|
000050  4608              MOV      r0,r1
000052  f7fffffe          BL       assert_param
;;;1205     tmpcr1 = TIMx->CR1;
000056  8826              LDRH     r6,[r4,#0]
;;;1206     /* Reset the CMS and DIR Bits */
;;;1207     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
000058  f64f708f          MOV      r0,#0xff8f
00005c  4006              ANDS     r6,r6,r0
;;;1208     /* Set the Counter Mode */
;;;1209     tmpcr1 |= TIM_CounterMode;
00005e  432e              ORRS     r6,r6,r5
;;;1210     /* Write to TIMx CR1 register */
;;;1211     TIMx->CR1 = tmpcr1;
000060  8026              STRH     r6,[r4,#0]
;;;1212   }
000062  bd70              POP      {r4-r6,pc}
;;;1213   
                          ENDP

                  |L18.100|
                          DCD      0x40012c00
                  |L18.104|
                          DCD      0x40000400
                  |L18.108|
                          DCD      0x40000800
                  |L18.112|
                          DCD      0x40000c00
                  |L18.116|
                          DCD      0x40013400

                          AREA ||i.TIM_CtrlPWMOutputs||, CODE, READONLY, ALIGN=2

                  TIM_CtrlPWMOutputs PROC
;;;830      */
;;;831    void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;832    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;833      /* Check the parameters */
;;;834      assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000006  4916              LDR      r1,|L19.96|
000008  428c              CMP      r4,r1
00000a  d00b              BEQ      |L19.36|
00000c  4915              LDR      r1,|L19.100|
00000e  428c              CMP      r4,r1
000010  d008              BEQ      |L19.36|
000012  4915              LDR      r1,|L19.104|
000014  428c              CMP      r4,r1
000016  d005              BEQ      |L19.36|
000018  4914              LDR      r1,|L19.108|
00001a  428c              CMP      r4,r1
00001c  d002              BEQ      |L19.36|
00001e  4914              LDR      r1,|L19.112|
000020  428c              CMP      r4,r1
000022  d101              BNE      |L19.40|
                  |L19.36|
000024  2101              MOVS     r1,#1
000026  e000              B        |L19.42|
                  |L19.40|
000028  2100              MOVS     r1,#0
                  |L19.42|
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       assert_param
;;;835      assert_param(IS_FUNCTIONAL_STATE(NewState));
000030  b10d              CBZ      r5,|L19.54|
000032  2d01              CMP      r5,#1
000034  d101              BNE      |L19.58|
                  |L19.54|
000036  2101              MOVS     r1,#1
000038  e000              B        |L19.60|
                  |L19.58|
00003a  2100              MOVS     r1,#0
                  |L19.60|
00003c  4608              MOV      r0,r1
00003e  f7fffffe          BL       assert_param
;;;836      if (NewState != DISABLE)
000042  b135              CBZ      r5,|L19.82|
;;;837      {
;;;838        /* Enable the TIM Main Output */
;;;839        TIMx->BDTR |= TIM_BDTR_MOE;
000044  f8b40044          LDRH     r0,[r4,#0x44]
000048  f4404000          ORR      r0,r0,#0x8000
00004c  f8a40044          STRH     r0,[r4,#0x44]
000050  e005              B        |L19.94|
                  |L19.82|
;;;840      }
;;;841      else
;;;842      {
;;;843        /* Disable the TIM Main Output */
;;;844        TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
000052  f8b40044          LDRH     r0,[r4,#0x44]
000056  f3c0000e          UBFX     r0,r0,#0,#15
00005a  f8a40044          STRH     r0,[r4,#0x44]
                  |L19.94|
;;;845      }  
;;;846    }
00005e  bd70              POP      {r4-r6,pc}
;;;847    
                          ENDP

                  |L19.96|
                          DCD      0x40012c00
                  |L19.100|
                          DCD      0x40013400
                  |L19.104|
                          DCD      0x40014000
                  |L19.108|
                          DCD      0x40014400
                  |L19.112|
                          DCD      0x40014800

                          AREA ||i.TIM_DMACmd||, CODE, READONLY, ALIGN=2

                  TIM_DMACmd PROC
;;;963      */
;;;964    void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;965    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;966      /* Check the parameters */
;;;967      assert_param(IS_TIM_LIST9_PERIPH(TIMx));
000008  4921              LDR      r1,|L20.144|
00000a  428c              CMP      r4,r1
00000c  d01d              BEQ      |L20.74|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d01a              BEQ      |L20.74|
000014  491f              LDR      r1,|L20.148|
000016  428c              CMP      r4,r1
000018  d017              BEQ      |L20.74|
00001a  491f              LDR      r1,|L20.152|
00001c  428c              CMP      r4,r1
00001e  d014              BEQ      |L20.74|
000020  491e              LDR      r1,|L20.156|
000022  428c              CMP      r4,r1
000024  d011              BEQ      |L20.74|
000026  491e              LDR      r1,|L20.160|
000028  428c              CMP      r4,r1
00002a  d00e              BEQ      |L20.74|
00002c  491d              LDR      r1,|L20.164|
00002e  428c              CMP      r4,r1
000030  d00b              BEQ      |L20.74|
000032  491d              LDR      r1,|L20.168|
000034  428c              CMP      r4,r1
000036  d008              BEQ      |L20.74|
000038  491c              LDR      r1,|L20.172|
00003a  428c              CMP      r4,r1
00003c  d005              BEQ      |L20.74|
00003e  491c              LDR      r1,|L20.176|
000040  428c              CMP      r4,r1
000042  d002              BEQ      |L20.74|
000044  491b              LDR      r1,|L20.180|
000046  428c              CMP      r4,r1
000048  d101              BNE      |L20.78|
                  |L20.74|
00004a  2101              MOVS     r1,#1
00004c  e000              B        |L20.80|
                  |L20.78|
00004e  2100              MOVS     r1,#0
                  |L20.80|
000050  4608              MOV      r0,r1
000052  f7fffffe          BL       assert_param
;;;968      assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
000056  f24801ff          MOV      r1,#0x80ff
00005a  4029              ANDS     r1,r1,r5
00005c  b911              CBNZ     r1,|L20.100|
00005e  b10d              CBZ      r5,|L20.100|
000060  2101              MOVS     r1,#1
000062  e000              B        |L20.102|
                  |L20.100|
000064  2100              MOVS     r1,#0
                  |L20.102|
000066  4608              MOV      r0,r1
000068  f7fffffe          BL       assert_param
;;;969      assert_param(IS_FUNCTIONAL_STATE(NewState));
00006c  b10e              CBZ      r6,|L20.114|
00006e  2e01              CMP      r6,#1
000070  d101              BNE      |L20.118|
                  |L20.114|
000072  2101              MOVS     r1,#1
000074  e000              B        |L20.120|
                  |L20.118|
000076  2100              MOVS     r1,#0
                  |L20.120|
000078  4608              MOV      r0,r1
00007a  f7fffffe          BL       assert_param
;;;970      
;;;971      if (NewState != DISABLE)
00007e  b11e              CBZ      r6,|L20.136|
;;;972      {
;;;973        /* Enable the DMA sources */
;;;974        TIMx->DIER |= TIM_DMASource; 
000080  89a0              LDRH     r0,[r4,#0xc]
000082  4328              ORRS     r0,r0,r5
000084  81a0              STRH     r0,[r4,#0xc]
000086  e002              B        |L20.142|
                  |L20.136|
;;;975      }
;;;976      else
;;;977      {
;;;978        /* Disable the DMA sources */
;;;979        TIMx->DIER &= (uint16_t)~TIM_DMASource;
000088  89a0              LDRH     r0,[r4,#0xc]
00008a  43a8              BICS     r0,r0,r5
00008c  81a0              STRH     r0,[r4,#0xc]
                  |L20.142|
;;;980      }
;;;981    }
00008e  bd70              POP      {r4-r6,pc}
;;;982    
                          ENDP

                  |L20.144|
                          DCD      0x40012c00
                  |L20.148|
                          DCD      0x40000400
                  |L20.152|
                          DCD      0x40000800
                  |L20.156|
                          DCD      0x40000c00
                  |L20.160|
                          DCD      0x40001000
                  |L20.164|
                          DCD      0x40001400
                  |L20.168|
                          DCD      0x40013400
                  |L20.172|
                          DCD      0x40014000
                  |L20.176|
                          DCD      0x40014400
                  |L20.180|
                          DCD      0x40014800

                          AREA ||i.TIM_DMAConfig||, CODE, READONLY, ALIGN=2

                  TIM_DMAConfig PROC
;;;936      */
;;;937    void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
000000  b570              PUSH     {r4-r6,lr}
;;;938    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;939      /* Check the parameters */
;;;940      assert_param(IS_TIM_LIST4_PERIPH(TIMx));
000008  4945              LDR      r1,|L21.288|
00000a  428e              CMP      r6,r1
00000c  d017              BEQ      |L21.62|
00000e  f1b64f80          CMP      r6,#0x40000000
000012  d014              BEQ      |L21.62|
000014  4943              LDR      r1,|L21.292|
000016  428e              CMP      r6,r1
000018  d011              BEQ      |L21.62|
00001a  4943              LDR      r1,|L21.296|
00001c  428e              CMP      r6,r1
00001e  d00e              BEQ      |L21.62|
000020  4942              LDR      r1,|L21.300|
000022  428e              CMP      r6,r1
000024  d00b              BEQ      |L21.62|
000026  4942              LDR      r1,|L21.304|
000028  428e              CMP      r6,r1
00002a  d008              BEQ      |L21.62|
00002c  4941              LDR      r1,|L21.308|
00002e  428e              CMP      r6,r1
000030  d005              BEQ      |L21.62|
000032  4941              LDR      r1,|L21.312|
000034  428e              CMP      r6,r1
000036  d002              BEQ      |L21.62|
000038  4940              LDR      r1,|L21.316|
00003a  428e              CMP      r6,r1
00003c  d101              BNE      |L21.66|
                  |L21.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L21.68|
                  |L21.66|
000042  2100              MOVS     r1,#0
                  |L21.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;941      assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
00004a  b31c              CBZ      r4,|L21.148|
00004c  2c01              CMP      r4,#1
00004e  d021              BEQ      |L21.148|
000050  2c02              CMP      r4,#2
000052  d01f              BEQ      |L21.148|
000054  2c03              CMP      r4,#3
000056  d01d              BEQ      |L21.148|
000058  2c04              CMP      r4,#4
00005a  d01b              BEQ      |L21.148|
00005c  2c05              CMP      r4,#5
00005e  d019              BEQ      |L21.148|
000060  2c06              CMP      r4,#6
000062  d017              BEQ      |L21.148|
000064  2c07              CMP      r4,#7
000066  d015              BEQ      |L21.148|
000068  2c08              CMP      r4,#8
00006a  d013              BEQ      |L21.148|
00006c  2c09              CMP      r4,#9
00006e  d011              BEQ      |L21.148|
000070  2c0a              CMP      r4,#0xa
000072  d00f              BEQ      |L21.148|
000074  2c0b              CMP      r4,#0xb
000076  d00d              BEQ      |L21.148|
000078  2c0c              CMP      r4,#0xc
00007a  d00b              BEQ      |L21.148|
00007c  2c0d              CMP      r4,#0xd
00007e  d009              BEQ      |L21.148|
000080  2c0e              CMP      r4,#0xe
000082  d007              BEQ      |L21.148|
000084  2c0f              CMP      r4,#0xf
000086  d005              BEQ      |L21.148|
000088  2c10              CMP      r4,#0x10
00008a  d003              BEQ      |L21.148|
00008c  2c11              CMP      r4,#0x11
00008e  d001              BEQ      |L21.148|
000090  2c12              CMP      r4,#0x12
000092  d101              BNE      |L21.152|
                  |L21.148|
000094  2101              MOVS     r1,#1
000096  e000              B        |L21.154|
                  |L21.152|
000098  2100              MOVS     r1,#0
                  |L21.154|
00009a  4608              MOV      r0,r1
00009c  f7fffffe          BL       assert_param
;;;942      assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
0000a0  b395              CBZ      r5,|L21.264|
0000a2  f5b57f80          CMP      r5,#0x100
0000a6  d02f              BEQ      |L21.264|
0000a8  f5b57f00          CMP      r5,#0x200
0000ac  d02c              BEQ      |L21.264|
0000ae  f5b57f40          CMP      r5,#0x300
0000b2  d029              BEQ      |L21.264|
0000b4  f5b56f80          CMP      r5,#0x400
0000b8  d026              BEQ      |L21.264|
0000ba  f5b56fa0          CMP      r5,#0x500
0000be  d023              BEQ      |L21.264|
0000c0  f5b56fc0          CMP      r5,#0x600
0000c4  d020              BEQ      |L21.264|
0000c6  f5b56fe0          CMP      r5,#0x700
0000ca  d01d              BEQ      |L21.264|
0000cc  f5b56f00          CMP      r5,#0x800
0000d0  d01a              BEQ      |L21.264|
0000d2  f5b56f10          CMP      r5,#0x900
0000d6  d017              BEQ      |L21.264|
0000d8  f5b56f20          CMP      r5,#0xa00
0000dc  d014              BEQ      |L21.264|
0000de  f5b56f30          CMP      r5,#0xb00
0000e2  d011              BEQ      |L21.264|
0000e4  f5b56f40          CMP      r5,#0xc00
0000e8  d00e              BEQ      |L21.264|
0000ea  f5b56f50          CMP      r5,#0xd00
0000ee  d00b              BEQ      |L21.264|
0000f0  f5b56f60          CMP      r5,#0xe00
0000f4  d008              BEQ      |L21.264|
0000f6  f5b56f70          CMP      r5,#0xf00
0000fa  d005              BEQ      |L21.264|
0000fc  f5b55f80          CMP      r5,#0x1000
000100  d002              BEQ      |L21.264|
000102  f5b55f88          CMP      r5,#0x1100
000106  d101              BNE      |L21.268|
                  |L21.264|
000108  2101              MOVS     r1,#1
00010a  e000              B        |L21.270|
                  |L21.268|
00010c  2100              MOVS     r1,#0
                  |L21.270|
00010e  4608              MOV      r0,r1
000110  f7fffffe          BL       assert_param
;;;943      /* Set the DMA Base and the DMA Burst Length */
;;;944      TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
000114  ea440005          ORR      r0,r4,r5
000118  f8a60048          STRH     r0,[r6,#0x48]
;;;945    }
00011c  bd70              POP      {r4-r6,pc}
;;;946    
                          ENDP

00011e  0000              DCW      0x0000
                  |L21.288|
                          DCD      0x40012c00
                  |L21.292|
                          DCD      0x40000400
                  |L21.296|
                          DCD      0x40000800
                  |L21.300|
                          DCD      0x40000c00
                  |L21.304|
                          DCD      0x40013400
                  |L21.308|
                          DCD      0x40014000
                  |L21.312|
                          DCD      0x40014400
                  |L21.316|
                          DCD      0x40014800

                          AREA ||i.TIM_DeInit||, CODE, READONLY, ALIGN=2

                  TIM_DeInit PROC
;;;121      */
;;;122    void TIM_DeInit(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;123    {
000002  4604              MOV      r4,r0
;;;124      /* Check the parameters */
;;;125      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
000004  4985              LDR      r1,|L22.540|
000006  428c              CMP      r4,r1
000008  d02f              BEQ      |L22.106|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d02c              BEQ      |L22.106|
000010  4983              LDR      r1,|L22.544|
000012  428c              CMP      r4,r1
000014  d029              BEQ      |L22.106|
000016  4983              LDR      r1,|L22.548|
000018  428c              CMP      r4,r1
00001a  d026              BEQ      |L22.106|
00001c  4982              LDR      r1,|L22.552|
00001e  428c              CMP      r4,r1
000020  d023              BEQ      |L22.106|
000022  4982              LDR      r1,|L22.556|
000024  428c              CMP      r4,r1
000026  d020              BEQ      |L22.106|
000028  4981              LDR      r1,|L22.560|
00002a  428c              CMP      r4,r1
00002c  d01d              BEQ      |L22.106|
00002e  4981              LDR      r1,|L22.564|
000030  428c              CMP      r4,r1
000032  d01a              BEQ      |L22.106|
000034  4980              LDR      r1,|L22.568|
000036  428c              CMP      r4,r1
000038  d017              BEQ      |L22.106|
00003a  4980              LDR      r1,|L22.572|
00003c  428c              CMP      r4,r1
00003e  d014              BEQ      |L22.106|
000040  497f              LDR      r1,|L22.576|
000042  428c              CMP      r4,r1
000044  d011              BEQ      |L22.106|
000046  497f              LDR      r1,|L22.580|
000048  428c              CMP      r4,r1
00004a  d00e              BEQ      |L22.106|
00004c  497e              LDR      r1,|L22.584|
00004e  428c              CMP      r4,r1
000050  d00b              BEQ      |L22.106|
000052  497e              LDR      r1,|L22.588|
000054  428c              CMP      r4,r1
000056  d008              BEQ      |L22.106|
000058  497d              LDR      r1,|L22.592|
00005a  428c              CMP      r4,r1
00005c  d005              BEQ      |L22.106|
00005e  497d              LDR      r1,|L22.596|
000060  428c              CMP      r4,r1
000062  d002              BEQ      |L22.106|
000064  497c              LDR      r1,|L22.600|
000066  428c              CMP      r4,r1
000068  d101              BNE      |L22.110|
                  |L22.106|
00006a  2101              MOVS     r1,#1
00006c  e000              B        |L22.112|
                  |L22.110|
00006e  2100              MOVS     r1,#0
                  |L22.112|
000070  4608              MOV      r0,r1
000072  f7fffffe          BL       assert_param
;;;126     
;;;127      if (TIMx == TIM1)
000076  4869              LDR      r0,|L22.540|
000078  4284              CMP      r4,r0
00007a  d108              BNE      |L22.142|
;;;128      {
;;;129        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
00007c  2101              MOVS     r1,#1
00007e  14c0              ASRS     r0,r0,#19
000080  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
000084  2100              MOVS     r1,#0
000086  14e0              ASRS     r0,r4,#19
000088  f7fffffe          BL       RCC_APB2PeriphResetCmd
00008c  e0c4              B        |L22.536|
                  |L22.142|
;;;131      }     
;;;132      else if (TIMx == TIM2)
00008e  f1b44f80          CMP      r4,#0x40000000
000092  d108              BNE      |L22.166|
;;;133      {
;;;134        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
000094  2101              MOVS     r1,#1
000096  4608              MOV      r0,r1
000098  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;135        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
00009c  2100              MOVS     r1,#0
00009e  2001              MOVS     r0,#1
0000a0  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000a4  e0b8              B        |L22.536|
                  |L22.166|
;;;136      }
;;;137      else if (TIMx == TIM3)
0000a6  485e              LDR      r0,|L22.544|
0000a8  4284              CMP      r4,r0
0000aa  d108              BNE      |L22.190|
;;;138      {
;;;139        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
0000ac  2101              MOVS     r1,#1
0000ae  2002              MOVS     r0,#2
0000b0  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;140        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
0000b4  2100              MOVS     r1,#0
0000b6  2002              MOVS     r0,#2
0000b8  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000bc  e0ac              B        |L22.536|
                  |L22.190|
;;;141      }
;;;142      else if (TIMx == TIM4)
0000be  4859              LDR      r0,|L22.548|
0000c0  4284              CMP      r4,r0
0000c2  d108              BNE      |L22.214|
;;;143      {
;;;144        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
0000c4  2101              MOVS     r1,#1
0000c6  2004              MOVS     r0,#4
0000c8  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;145        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
0000cc  2100              MOVS     r1,#0
0000ce  2004              MOVS     r0,#4
0000d0  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000d4  e0a0              B        |L22.536|
                  |L22.214|
;;;146      } 
;;;147      else if (TIMx == TIM5)
0000d6  4854              LDR      r0,|L22.552|
0000d8  4284              CMP      r4,r0
0000da  d108              BNE      |L22.238|
;;;148      {
;;;149        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
0000dc  2101              MOVS     r1,#1
0000de  2008              MOVS     r0,#8
0000e0  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;150        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
0000e4  2100              MOVS     r1,#0
0000e6  2008              MOVS     r0,#8
0000e8  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000ec  e094              B        |L22.536|
                  |L22.238|
;;;151      } 
;;;152      else if (TIMx == TIM6)
0000ee  484f              LDR      r0,|L22.556|
0000f0  4284              CMP      r4,r0
0000f2  d108              BNE      |L22.262|
;;;153      {
;;;154        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
0000f4  2101              MOVS     r1,#1
0000f6  2010              MOVS     r0,#0x10
0000f8  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;155        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
0000fc  2100              MOVS     r1,#0
0000fe  2010              MOVS     r0,#0x10
000100  f7fffffe          BL       RCC_APB1PeriphResetCmd
000104  e088              B        |L22.536|
                  |L22.262|
;;;156      } 
;;;157      else if (TIMx == TIM7)
000106  484a              LDR      r0,|L22.560|
000108  4284              CMP      r4,r0
00010a  d108              BNE      |L22.286|
;;;158      {
;;;159        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
00010c  2101              MOVS     r1,#1
00010e  2020              MOVS     r0,#0x20
000110  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;160        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
000114  2100              MOVS     r1,#0
000116  2020              MOVS     r0,#0x20
000118  f7fffffe          BL       RCC_APB1PeriphResetCmd
00011c  e07c              B        |L22.536|
                  |L22.286|
;;;161      } 
;;;162      else if (TIMx == TIM8)
00011e  4845              LDR      r0,|L22.564|
000120  4284              CMP      r4,r0
000122  d108              BNE      |L22.310|
;;;163      {
;;;164        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
000124  2101              MOVS     r1,#1
000126  1440              ASRS     r0,r0,#17
000128  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;165        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
00012c  2100              MOVS     r1,#0
00012e  1460              ASRS     r0,r4,#17
000130  f7fffffe          BL       RCC_APB2PeriphResetCmd
000134  e070              B        |L22.536|
                  |L22.310|
;;;166      }
;;;167      else if (TIMx == TIM9)
000136  4840              LDR      r0,|L22.568|
000138  4284              CMP      r4,r0
00013a  d109              BNE      |L22.336|
;;;168      {      
;;;169        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
00013c  2101              MOVS     r1,#1
00013e  04c8              LSLS     r0,r1,#19
000140  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;170        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
000144  2100              MOVS     r1,#0
000146  f44f2000          MOV      r0,#0x80000
00014a  f7fffffe          BL       RCC_APB2PeriphResetCmd
00014e  e063              B        |L22.536|
                  |L22.336|
;;;171       }  
;;;172      else if (TIMx == TIM10)
000150  483a              LDR      r0,|L22.572|
000152  4284              CMP      r4,r0
000154  d109              BNE      |L22.362|
;;;173      {      
;;;174        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
000156  2101              MOVS     r1,#1
000158  0508              LSLS     r0,r1,#20
00015a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;175        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
00015e  2100              MOVS     r1,#0
000160  f44f1080          MOV      r0,#0x100000
000164  f7fffffe          BL       RCC_APB2PeriphResetCmd
000168  e056              B        |L22.536|
                  |L22.362|
;;;176      }  
;;;177      else if (TIMx == TIM11) 
00016a  4835              LDR      r0,|L22.576|
00016c  4284              CMP      r4,r0
00016e  d109              BNE      |L22.388|
;;;178      {     
;;;179        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
000170  2101              MOVS     r1,#1
000172  0548              LSLS     r0,r1,#21
000174  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;180        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
000178  2100              MOVS     r1,#0
00017a  f44f1000          MOV      r0,#0x200000
00017e  f7fffffe          BL       RCC_APB2PeriphResetCmd
000182  e049              B        |L22.536|
                  |L22.388|
;;;181      }  
;;;182      else if (TIMx == TIM12)
000184  482f              LDR      r0,|L22.580|
000186  4284              CMP      r4,r0
000188  d108              BNE      |L22.412|
;;;183      {      
;;;184        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
00018a  2101              MOVS     r1,#1
00018c  2040              MOVS     r0,#0x40
00018e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;185        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
000192  2100              MOVS     r1,#0
000194  2040              MOVS     r0,#0x40
000196  f7fffffe          BL       RCC_APB1PeriphResetCmd
00019a  e03d              B        |L22.536|
                  |L22.412|
;;;186      }  
;;;187      else if (TIMx == TIM13) 
00019c  482a              LDR      r0,|L22.584|
00019e  4284              CMP      r4,r0
0001a0  d108              BNE      |L22.436|
;;;188      {       
;;;189        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
0001a2  2101              MOVS     r1,#1
0001a4  2080              MOVS     r0,#0x80
0001a6  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;190        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
0001aa  2100              MOVS     r1,#0
0001ac  2080              MOVS     r0,#0x80
0001ae  f7fffffe          BL       RCC_APB1PeriphResetCmd
0001b2  e031              B        |L22.536|
                  |L22.436|
;;;191      }
;;;192      else if (TIMx == TIM14) 
0001b4  4825              LDR      r0,|L22.588|
0001b6  4284              CMP      r4,r0
0001b8  d108              BNE      |L22.460|
;;;193      {       
;;;194        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
0001ba  2101              MOVS     r1,#1
0001bc  1580              ASRS     r0,r0,#22
0001be  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;195        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
0001c2  2100              MOVS     r1,#0
0001c4  15a0              ASRS     r0,r4,#22
0001c6  f7fffffe          BL       RCC_APB1PeriphResetCmd
0001ca  e025              B        |L22.536|
                  |L22.460|
;;;196      }        
;;;197      else if (TIMx == TIM15)
0001cc  4820              LDR      r0,|L22.592|
0001ce  4284              CMP      r4,r0
0001d0  d109              BNE      |L22.486|
;;;198      {
;;;199        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
0001d2  2101              MOVS     r1,#1
0001d4  0408              LSLS     r0,r1,#16
0001d6  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;200        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
0001da  2100              MOVS     r1,#0
0001dc  f44f3080          MOV      r0,#0x10000
0001e0  f7fffffe          BL       RCC_APB2PeriphResetCmd
0001e4  e018              B        |L22.536|
                  |L22.486|
;;;201      } 
;;;202      else if (TIMx == TIM16)
0001e6  481b              LDR      r0,|L22.596|
0001e8  4284              CMP      r4,r0
0001ea  d109              BNE      |L22.512|
;;;203      {
;;;204        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
0001ec  2101              MOVS     r1,#1
0001ee  0448              LSLS     r0,r1,#17
0001f0  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;205        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
0001f4  2100              MOVS     r1,#0
0001f6  f44f3000          MOV      r0,#0x20000
0001fa  f7fffffe          BL       RCC_APB2PeriphResetCmd
0001fe  e00b              B        |L22.536|
                  |L22.512|
;;;206      } 
;;;207      else
;;;208      {
;;;209        if (TIMx == TIM17)
000200  4815              LDR      r0,|L22.600|
000202  4284              CMP      r4,r0
000204  d108              BNE      |L22.536|
;;;210        {
;;;211          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
000206  2101              MOVS     r1,#1
000208  0488              LSLS     r0,r1,#18
00020a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;212          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
00020e  2100              MOVS     r1,#0
000210  f44f2080          MOV      r0,#0x40000
000214  f7fffffe          BL       RCC_APB2PeriphResetCmd
                  |L22.536|
;;;213        }  
;;;214      }
;;;215    }
000218  bd10              POP      {r4,pc}
;;;216    
                          ENDP

00021a  0000              DCW      0x0000
                  |L22.540|
                          DCD      0x40012c00
                  |L22.544|
                          DCD      0x40000400
                  |L22.548|
                          DCD      0x40000800
                  |L22.552|
                          DCD      0x40000c00
                  |L22.556|
                          DCD      0x40001000
                  |L22.560|
                          DCD      0x40001400
                  |L22.564|
                          DCD      0x40013400
                  |L22.568|
                          DCD      0x40014c00
                  |L22.572|
                          DCD      0x40015000
                  |L22.576|
                          DCD      0x40015400
                  |L22.580|
                          DCD      0x40001800
                  |L22.584|
                          DCD      0x40001c00
                  |L22.588|
                          DCD      0x40002000
                  |L22.592|
                          DCD      0x40014000
                  |L22.596|
                          DCD      0x40014400
                  |L22.600|
                          DCD      0x40014800

                          AREA ||i.TIM_ETRClockMode1Config||, CODE, READONLY, ALIGN=2

                  TIM_ETRClockMode1Config PROC
;;;1074     */
;;;1075   void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1076                                uint16_t ExtTRGFilter)
;;;1077   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;1078     uint16_t tmpsmcr = 0;
00000c  2600              MOVS     r6,#0
;;;1079     /* Check the parameters */
;;;1080     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
00000e  4927              LDR      r1,|L23.172|
000010  428c              CMP      r4,r1
000012  d00e              BEQ      |L23.50|
000014  f1b44f80          CMP      r4,#0x40000000
000018  d00b              BEQ      |L23.50|
00001a  4925              LDR      r1,|L23.176|
00001c  428c              CMP      r4,r1
00001e  d008              BEQ      |L23.50|
000020  4924              LDR      r1,|L23.180|
000022  428c              CMP      r4,r1
000024  d005              BEQ      |L23.50|
000026  4924              LDR      r1,|L23.184|
000028  428c              CMP      r4,r1
00002a  d002              BEQ      |L23.50|
00002c  4923              LDR      r1,|L23.188|
00002e  428c              CMP      r4,r1
000030  d101              BNE      |L23.54|
                  |L23.50|
000032  2101              MOVS     r1,#1
000034  e000              B        |L23.56|
                  |L23.54|
000036  2100              MOVS     r1,#0
                  |L23.56|
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       assert_param
;;;1081     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
00003e  b145              CBZ      r5,|L23.82|
000040  f5b55f80          CMP      r5,#0x1000
000044  d005              BEQ      |L23.82|
000046  f5b55f00          CMP      r5,#0x2000
00004a  d002              BEQ      |L23.82|
00004c  f5b55f40          CMP      r5,#0x3000
000050  d101              BNE      |L23.86|
                  |L23.82|
000052  2101              MOVS     r1,#1
000054  e000              B        |L23.88|
                  |L23.86|
000056  2100              MOVS     r1,#0
                  |L23.88|
000058  4608              MOV      r0,r1
00005a  f7fffffe          BL       assert_param
;;;1082     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
00005e  f5b74f00          CMP      r7,#0x8000
000062  d000              BEQ      |L23.102|
000064  b90f              CBNZ     r7,|L23.106|
                  |L23.102|
000066  2101              MOVS     r1,#1
000068  e000              B        |L23.108|
                  |L23.106|
00006a  2100              MOVS     r1,#0
                  |L23.108|
00006c  4608              MOV      r0,r1
00006e  f7fffffe          BL       assert_param
;;;1083     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
000072  f1b80f0f          CMP      r8,#0xf
000076  dc01              BGT      |L23.124|
000078  2101              MOVS     r1,#1
00007a  e000              B        |L23.126|
                  |L23.124|
00007c  2100              MOVS     r1,#0
                  |L23.126|
00007e  4608              MOV      r0,r1
000080  f7fffffe          BL       assert_param
;;;1084     /* Configure the ETR Clock source */
;;;1085     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
000084  4643              MOV      r3,r8
000086  463a              MOV      r2,r7
000088  4629              MOV      r1,r5
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       TIM_ETRConfig
;;;1086     
;;;1087     /* Get the TIMx SMCR register value */
;;;1088     tmpsmcr = TIMx->SMCR;
000090  8926              LDRH     r6,[r4,#8]
;;;1089     /* Reset the SMS Bits */
;;;1090     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
000092  f64f70f8          MOV      r0,#0xfff8
000096  4006              ANDS     r6,r6,r0
;;;1091     /* Select the External clock mode1 */
;;;1092     tmpsmcr |= TIM_SlaveMode_External1;
000098  f0460607          ORR      r6,r6,#7
;;;1093     /* Select the Trigger selection : ETRF */
;;;1094     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
00009c  f64f708f          MOV      r0,#0xff8f
0000a0  4006              ANDS     r6,r6,r0
;;;1095     tmpsmcr |= TIM_TS_ETRF;
0000a2  f0460670          ORR      r6,r6,#0x70
;;;1096     /* Write to TIMx SMCR */
;;;1097     TIMx->SMCR = tmpsmcr;
0000a6  8126              STRH     r6,[r4,#8]
;;;1098   }
0000a8  e8bd81f0          POP      {r4-r8,pc}
;;;1099   
                          ENDP

                  |L23.172|
                          DCD      0x40012c00
                  |L23.176|
                          DCD      0x40000400
                  |L23.180|
                          DCD      0x40000800
                  |L23.184|
                          DCD      0x40000c00
                  |L23.188|
                          DCD      0x40013400

                          AREA ||i.TIM_ETRClockMode2Config||, CODE, READONLY, ALIGN=2

                  TIM_ETRClockMode2Config PROC
;;;1116     */
;;;1117   void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1118                                uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
;;;1119   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;1120     /* Check the parameters */
;;;1121     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
00000c  4922              LDR      r1,|L24.152|
00000e  428c              CMP      r4,r1
000010  d00e              BEQ      |L24.48|
000012  f1b44f80          CMP      r4,#0x40000000
000016  d00b              BEQ      |L24.48|
000018  4920              LDR      r1,|L24.156|
00001a  428c              CMP      r4,r1
00001c  d008              BEQ      |L24.48|
00001e  4920              LDR      r1,|L24.160|
000020  428c              CMP      r4,r1
000022  d005              BEQ      |L24.48|
000024  491f              LDR      r1,|L24.164|
000026  428c              CMP      r4,r1
000028  d002              BEQ      |L24.48|
00002a  491f              LDR      r1,|L24.168|
00002c  428c              CMP      r4,r1
00002e  d101              BNE      |L24.52|
                  |L24.48|
000030  2101              MOVS     r1,#1
000032  e000              B        |L24.54|
                  |L24.52|
000034  2100              MOVS     r1,#0
                  |L24.54|
000036  4608              MOV      r0,r1
000038  f7fffffe          BL       assert_param
;;;1122     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
00003c  b145              CBZ      r5,|L24.80|
00003e  f5b55f80          CMP      r5,#0x1000
000042  d005              BEQ      |L24.80|
000044  f5b55f00          CMP      r5,#0x2000
000048  d002              BEQ      |L24.80|
00004a  f5b55f40          CMP      r5,#0x3000
00004e  d101              BNE      |L24.84|
                  |L24.80|
000050  2101              MOVS     r1,#1
000052  e000              B        |L24.86|
                  |L24.84|
000054  2100              MOVS     r1,#0
                  |L24.86|
000056  4608              MOV      r0,r1
000058  f7fffffe          BL       assert_param
;;;1123     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
00005c  f5b64f00          CMP      r6,#0x8000
000060  d000              BEQ      |L24.100|
000062  b90e              CBNZ     r6,|L24.104|
                  |L24.100|
000064  2101              MOVS     r1,#1
000066  e000              B        |L24.106|
                  |L24.104|
000068  2100              MOVS     r1,#0
                  |L24.106|
00006a  4608              MOV      r0,r1
00006c  f7fffffe          BL       assert_param
;;;1124     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
000070  2f0f              CMP      r7,#0xf
000072  dc01              BGT      |L24.120|
000074  2101              MOVS     r1,#1
000076  e000              B        |L24.122|
                  |L24.120|
000078  2100              MOVS     r1,#0
                  |L24.122|
00007a  4608              MOV      r0,r1
00007c  f7fffffe          BL       assert_param
;;;1125     /* Configure the ETR Clock source */
;;;1126     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
000080  463b              MOV      r3,r7
000082  4632              MOV      r2,r6
000084  4629              MOV      r1,r5
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       TIM_ETRConfig
;;;1127     /* Enable the External clock mode2 */
;;;1128     TIMx->SMCR |= TIM_SMCR_ECE;
00008c  8920              LDRH     r0,[r4,#8]
00008e  f4404080          ORR      r0,r0,#0x4000
000092  8120              STRH     r0,[r4,#8]
;;;1129   }
000094  e8bd81f0          POP      {r4-r8,pc}
;;;1130   
                          ENDP

                  |L24.152|
                          DCD      0x40012c00
                  |L24.156|
                          DCD      0x40000400
                  |L24.160|
                          DCD      0x40000800
                  |L24.164|
                          DCD      0x40000c00
                  |L24.168|
                          DCD      0x40013400

                          AREA ||i.TIM_ETRConfig||, CODE, READONLY, ALIGN=2

                  TIM_ETRConfig PROC
;;;1147     */
;;;1148   void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1149                      uint16_t ExtTRGFilter)
;;;1150   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;1151     uint16_t tmpsmcr = 0;
00000c  f04f0800          MOV      r8,#0
;;;1152     /* Check the parameters */
;;;1153     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000010  4924              LDR      r1,|L25.164|
000012  428c              CMP      r4,r1
000014  d00e              BEQ      |L25.52|
000016  f1b44f80          CMP      r4,#0x40000000
00001a  d00b              BEQ      |L25.52|
00001c  4922              LDR      r1,|L25.168|
00001e  428c              CMP      r4,r1
000020  d008              BEQ      |L25.52|
000022  4922              LDR      r1,|L25.172|
000024  428c              CMP      r4,r1
000026  d005              BEQ      |L25.52|
000028  4921              LDR      r1,|L25.176|
00002a  428c              CMP      r4,r1
00002c  d002              BEQ      |L25.52|
00002e  4921              LDR      r1,|L25.180|
000030  428c              CMP      r4,r1
000032  d101              BNE      |L25.56|
                  |L25.52|
000034  2101              MOVS     r1,#1
000036  e000              B        |L25.58|
                  |L25.56|
000038  2100              MOVS     r1,#0
                  |L25.58|
00003a  4608              MOV      r0,r1
00003c  f7fffffe          BL       assert_param
;;;1154     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
000040  b145              CBZ      r5,|L25.84|
000042  f5b55f80          CMP      r5,#0x1000
000046  d005              BEQ      |L25.84|
000048  f5b55f00          CMP      r5,#0x2000
00004c  d002              BEQ      |L25.84|
00004e  f5b55f40          CMP      r5,#0x3000
000052  d101              BNE      |L25.88|
                  |L25.84|
000054  2101              MOVS     r1,#1
000056  e000              B        |L25.90|
                  |L25.88|
000058  2100              MOVS     r1,#0
                  |L25.90|
00005a  4608              MOV      r0,r1
00005c  f7fffffe          BL       assert_param
;;;1155     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
000060  f5b64f00          CMP      r6,#0x8000
000064  d000              BEQ      |L25.104|
000066  b90e              CBNZ     r6,|L25.108|
                  |L25.104|
000068  2101              MOVS     r1,#1
00006a  e000              B        |L25.110|
                  |L25.108|
00006c  2100              MOVS     r1,#0
                  |L25.110|
00006e  4608              MOV      r0,r1
000070  f7fffffe          BL       assert_param
;;;1156     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
000074  2f0f              CMP      r7,#0xf
000076  dc01              BGT      |L25.124|
000078  2101              MOVS     r1,#1
00007a  e000              B        |L25.126|
                  |L25.124|
00007c  2100              MOVS     r1,#0
                  |L25.126|
00007e  4608              MOV      r0,r1
000080  f7fffffe          BL       assert_param
;;;1157     tmpsmcr = TIMx->SMCR;
000084  f8b48008          LDRH     r8,[r4,#8]
;;;1158     /* Reset the ETR Bits */
;;;1159     tmpsmcr &= SMCR_ETR_Mask;
000088  f00808ff          AND      r8,r8,#0xff
;;;1160     /* Set the Prescaler, the Filter value and the Polarity */
;;;1161     tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
00008c  f64f70ff          MOV      r0,#0xffff
000090  ea002007          AND      r0,r0,r7,LSL #8
000094  4330              ORRS     r0,r0,r6
000096  4328              ORRS     r0,r0,r5
000098  ea400808          ORR      r8,r0,r8
;;;1162     /* Write to TIMx SMCR */
;;;1163     TIMx->SMCR = tmpsmcr;
00009c  f8a48008          STRH     r8,[r4,#8]
;;;1164   }
0000a0  e8bd81f0          POP      {r4-r8,pc}
;;;1165   
                          ENDP

                  |L25.164|
                          DCD      0x40012c00
                  |L25.168|
                          DCD      0x40000400
                  |L25.172|
                          DCD      0x40000800
                  |L25.176|
                          DCD      0x40000c00
                  |L25.180|
                          DCD      0x40013400

                          AREA ||i.TIM_EncoderInterfaceConfig||, CODE, READONLY, ALIGN=2

                  TIM_EncoderInterfaceConfig PROC
;;;1263     */
;;;1264   void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1265                                   uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
;;;1266   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;1267     uint16_t tmpsmcr = 0;
00000c  f04f0800          MOV      r8,#0
;;;1268     uint16_t tmpccmr1 = 0;
000010  46c1              MOV      r9,r8
;;;1269     uint16_t tmpccer = 0;
000012  46c2              MOV      r10,r8
;;;1270       
;;;1271     /* Check the parameters */
;;;1272     assert_param(IS_TIM_LIST5_PERIPH(TIMx));
000014  492f              LDR      r1,|L26.212|
000016  428c              CMP      r4,r1
000018  d011              BEQ      |L26.62|
00001a  f1b44f80          CMP      r4,#0x40000000
00001e  d00e              BEQ      |L26.62|
000020  492d              LDR      r1,|L26.216|
000022  428c              CMP      r4,r1
000024  d00b              BEQ      |L26.62|
000026  492d              LDR      r1,|L26.220|
000028  428c              CMP      r4,r1
00002a  d008              BEQ      |L26.62|
00002c  492c              LDR      r1,|L26.224|
00002e  428c              CMP      r4,r1
000030  d005              BEQ      |L26.62|
000032  492c              LDR      r1,|L26.228|
000034  428c              CMP      r4,r1
000036  d002              BEQ      |L26.62|
000038  492b              LDR      r1,|L26.232|
00003a  428c              CMP      r4,r1
00003c  d101              BNE      |L26.66|
                  |L26.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L26.68|
                  |L26.66|
000042  2100              MOVS     r1,#0
                  |L26.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1273     assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
00004a  2d01              CMP      r5,#1
00004c  d003              BEQ      |L26.86|
00004e  2d02              CMP      r5,#2
000050  d001              BEQ      |L26.86|
000052  2d03              CMP      r5,#3
000054  d101              BNE      |L26.90|
                  |L26.86|
000056  2101              MOVS     r1,#1
000058  e000              B        |L26.92|
                  |L26.90|
00005a  2100              MOVS     r1,#0
                  |L26.92|
00005c  4608              MOV      r0,r1
00005e  f7fffffe          BL       assert_param
;;;1274     assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
000062  b10e              CBZ      r6,|L26.104|
000064  2e02              CMP      r6,#2
000066  d101              BNE      |L26.108|
                  |L26.104|
000068  2101              MOVS     r1,#1
00006a  e000              B        |L26.110|
                  |L26.108|
00006c  2100              MOVS     r1,#0
                  |L26.110|
00006e  4608              MOV      r0,r1
000070  f7fffffe          BL       assert_param
;;;1275     assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
000074  b10f              CBZ      r7,|L26.122|
000076  2f02              CMP      r7,#2
000078  d101              BNE      |L26.126|
                  |L26.122|
00007a  2101              MOVS     r1,#1
00007c  e000              B        |L26.128|
                  |L26.126|
00007e  2100              MOVS     r1,#0
                  |L26.128|
000080  4608              MOV      r0,r1
000082  f7fffffe          BL       assert_param
;;;1276   
;;;1277     /* Get the TIMx SMCR register value */
;;;1278     tmpsmcr = TIMx->SMCR;
000086  f8b48008          LDRH     r8,[r4,#8]
;;;1279     
;;;1280     /* Get the TIMx CCMR1 register value */
;;;1281     tmpccmr1 = TIMx->CCMR1;
00008a  f8b49018          LDRH     r9,[r4,#0x18]
;;;1282     
;;;1283     /* Get the TIMx CCER register value */
;;;1284     tmpccer = TIMx->CCER;
00008e  f8b4a020          LDRH     r10,[r4,#0x20]
;;;1285     
;;;1286     /* Set the encoder Mode */
;;;1287     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
000092  f64f70f8          MOV      r0,#0xfff8
000096  ea080800          AND      r8,r8,r0
;;;1288     tmpsmcr |= TIM_EncoderMode;
00009a  ea480805          ORR      r8,r8,r5
;;;1289     
;;;1290     /* Select the Capture Compare 1 and the Capture Compare 2 as input */
;;;1291     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
00009e  f64f40fc          MOV      r0,#0xfcfc
0000a2  ea090900          AND      r9,r9,r0
;;;1292     tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
0000a6  f2401001          MOV      r0,#0x101
0000aa  ea490900          ORR      r9,r9,r0
;;;1293     
;;;1294     /* Set the TI1 and the TI2 Polarities */
;;;1295     tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
0000ae  f64f70dd          MOV      r0,#0xffdd
0000b2  ea0a0a00          AND      r10,r10,r0
;;;1296     tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
0000b6  f64f70ff          MOV      r0,#0xffff
0000ba  ea001007          AND      r0,r0,r7,LSL #4
0000be  4330              ORRS     r0,r0,r6
0000c0  ea400a0a          ORR      r10,r0,r10
;;;1297     
;;;1298     /* Write to TIMx SMCR */
;;;1299     TIMx->SMCR = tmpsmcr;
0000c4  f8a48008          STRH     r8,[r4,#8]
;;;1300     /* Write to TIMx CCMR1 */
;;;1301     TIMx->CCMR1 = tmpccmr1;
0000c8  f8a49018          STRH     r9,[r4,#0x18]
;;;1302     /* Write to TIMx CCER */
;;;1303     TIMx->CCER = tmpccer;
0000cc  f8a4a020          STRH     r10,[r4,#0x20]
;;;1304   }
0000d0  e8bd87f0          POP      {r4-r10,pc}
;;;1305   
                          ENDP

                  |L26.212|
                          DCD      0x40012c00
                  |L26.216|
                          DCD      0x40000400
                  |L26.220|
                          DCD      0x40000800
                  |L26.224|
                          DCD      0x40000c00
                  |L26.228|
                          DCD      0x40013400
                  |L26.232|
                          DCD      0x40014000

                          AREA ||i.TIM_ForcedOC1Config||, CODE, READONLY, ALIGN=2

                  TIM_ForcedOC1Config PROC
;;;1314     */
;;;1315   void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  b570              PUSH     {r4-r6,lr}
;;;1316   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1317     uint16_t tmpccmr1 = 0;
000006  2600              MOVS     r6,#0
;;;1318     /* Check the parameters */
;;;1319     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
000008  4921              LDR      r1,|L27.144|
00000a  428c              CMP      r4,r1
00000c  d029              BEQ      |L27.98|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d026              BEQ      |L27.98|
000014  491f              LDR      r1,|L27.148|
000016  428c              CMP      r4,r1
000018  d023              BEQ      |L27.98|
00001a  491f              LDR      r1,|L27.152|
00001c  428c              CMP      r4,r1
00001e  d020              BEQ      |L27.98|
000020  491e              LDR      r1,|L27.156|
000022  428c              CMP      r4,r1
000024  d01d              BEQ      |L27.98|
000026  491e              LDR      r1,|L27.160|
000028  428c              CMP      r4,r1
00002a  d01a              BEQ      |L27.98|
00002c  491d              LDR      r1,|L27.164|
00002e  428c              CMP      r4,r1
000030  d017              BEQ      |L27.98|
000032  491d              LDR      r1,|L27.168|
000034  428c              CMP      r4,r1
000036  d014              BEQ      |L27.98|
000038  491c              LDR      r1,|L27.172|
00003a  428c              CMP      r4,r1
00003c  d011              BEQ      |L27.98|
00003e  491c              LDR      r1,|L27.176|
000040  428c              CMP      r4,r1
000042  d00e              BEQ      |L27.98|
000044  491b              LDR      r1,|L27.180|
000046  428c              CMP      r4,r1
000048  d00b              BEQ      |L27.98|
00004a  491b              LDR      r1,|L27.184|
00004c  428c              CMP      r4,r1
00004e  d008              BEQ      |L27.98|
000050  491a              LDR      r1,|L27.188|
000052  428c              CMP      r4,r1
000054  d005              BEQ      |L27.98|
000056  491a              LDR      r1,|L27.192|
000058  428c              CMP      r4,r1
00005a  d002              BEQ      |L27.98|
00005c  4919              LDR      r1,|L27.196|
00005e  428c              CMP      r4,r1
000060  d101              BNE      |L27.102|
                  |L27.98|
000062  2101              MOVS     r1,#1
000064  e000              B        |L27.104|
                  |L27.102|
000066  2100              MOVS     r1,#0
                  |L27.104|
000068  4608              MOV      r0,r1
00006a  f7fffffe          BL       assert_param
;;;1320     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
00006e  2d50              CMP      r5,#0x50
000070  d001              BEQ      |L27.118|
000072  2d40              CMP      r5,#0x40
000074  d101              BNE      |L27.122|
                  |L27.118|
000076  2101              MOVS     r1,#1
000078  e000              B        |L27.124|
                  |L27.122|
00007a  2100              MOVS     r1,#0
                  |L27.124|
00007c  4608              MOV      r0,r1
00007e  f7fffffe          BL       assert_param
;;;1321     tmpccmr1 = TIMx->CCMR1;
000082  8b26              LDRH     r6,[r4,#0x18]
;;;1322     /* Reset the OC1M Bits */
;;;1323     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
000084  f64f708f          MOV      r0,#0xff8f
000088  4006              ANDS     r6,r6,r0
;;;1324     /* Configure The Forced output Mode */
;;;1325     tmpccmr1 |= TIM_ForcedAction;
00008a  432e              ORRS     r6,r6,r5
;;;1326     /* Write to TIMx CCMR1 register */
;;;1327     TIMx->CCMR1 = tmpccmr1;
00008c  8326              STRH     r6,[r4,#0x18]
;;;1328   }
00008e  bd70              POP      {r4-r6,pc}
;;;1329   
                          ENDP

                  |L27.144|
                          DCD      0x40012c00
                  |L27.148|
                          DCD      0x40000400
                  |L27.152|
                          DCD      0x40000800
                  |L27.156|
                          DCD      0x40000c00
                  |L27.160|
                          DCD      0x40013400
                  |L27.164|
                          DCD      0x40014c00
                  |L27.168|
                          DCD      0x40015000
                  |L27.172|
                          DCD      0x40015400
                  |L27.176|
                          DCD      0x40001800
                  |L27.180|
                          DCD      0x40001c00
                  |L27.184|
                          DCD      0x40002000
                  |L27.188|
                          DCD      0x40014000
                  |L27.192|
                          DCD      0x40014400
                  |L27.196|
                          DCD      0x40014800

                          AREA ||i.TIM_ForcedOC2Config||, CODE, READONLY, ALIGN=2

                  TIM_ForcedOC2Config PROC
;;;1338     */
;;;1339   void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  b570              PUSH     {r4-r6,lr}
;;;1340   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1341     uint16_t tmpccmr1 = 0;
000006  2600              MOVS     r6,#0
;;;1342     /* Check the parameters */
;;;1343     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000008  491a              LDR      r1,|L28.116|
00000a  428c              CMP      r4,r1
00000c  d017              BEQ      |L28.62|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d014              BEQ      |L28.62|
000014  4918              LDR      r1,|L28.120|
000016  428c              CMP      r4,r1
000018  d011              BEQ      |L28.62|
00001a  4918              LDR      r1,|L28.124|
00001c  428c              CMP      r4,r1
00001e  d00e              BEQ      |L28.62|
000020  4917              LDR      r1,|L28.128|
000022  428c              CMP      r4,r1
000024  d00b              BEQ      |L28.62|
000026  4917              LDR      r1,|L28.132|
000028  428c              CMP      r4,r1
00002a  d008              BEQ      |L28.62|
00002c  4916              LDR      r1,|L28.136|
00002e  428c              CMP      r4,r1
000030  d005              BEQ      |L28.62|
000032  4916              LDR      r1,|L28.140|
000034  428c              CMP      r4,r1
000036  d002              BEQ      |L28.62|
000038  4915              LDR      r1,|L28.144|
00003a  428c              CMP      r4,r1
00003c  d101              BNE      |L28.66|
                  |L28.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L28.68|
                  |L28.66|
000042  2100              MOVS     r1,#0
                  |L28.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1344     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
00004a  2d50              CMP      r5,#0x50
00004c  d001              BEQ      |L28.82|
00004e  2d40              CMP      r5,#0x40
000050  d101              BNE      |L28.86|
                  |L28.82|
000052  2101              MOVS     r1,#1
000054  e000              B        |L28.88|
                  |L28.86|
000056  2100              MOVS     r1,#0
                  |L28.88|
000058  4608              MOV      r0,r1
00005a  f7fffffe          BL       assert_param
;;;1345     tmpccmr1 = TIMx->CCMR1;
00005e  8b26              LDRH     r6,[r4,#0x18]
;;;1346     /* Reset the OC2M Bits */
;;;1347     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
000060  f64870ff          MOV      r0,#0x8fff
000064  4006              ANDS     r6,r6,r0
;;;1348     /* Configure The Forced output Mode */
;;;1349     tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
000066  f64f70ff          MOV      r0,#0xffff
00006a  ea002005          AND      r0,r0,r5,LSL #8
00006e  4306              ORRS     r6,r6,r0
;;;1350     /* Write to TIMx CCMR1 register */
;;;1351     TIMx->CCMR1 = tmpccmr1;
000070  8326              STRH     r6,[r4,#0x18]
;;;1352   }
000072  bd70              POP      {r4-r6,pc}
;;;1353   
                          ENDP

                  |L28.116|
                          DCD      0x40012c00
                  |L28.120|
                          DCD      0x40000400
                  |L28.124|
                          DCD      0x40000800
                  |L28.128|
                          DCD      0x40000c00
                  |L28.132|
                          DCD      0x40013400
                  |L28.136|
                          DCD      0x40014c00
                  |L28.140|
                          DCD      0x40001800
                  |L28.144|
                          DCD      0x40014000

                          AREA ||i.TIM_ForcedOC3Config||, CODE, READONLY, ALIGN=2

                  TIM_ForcedOC3Config PROC
;;;1362     */
;;;1363   void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  b570              PUSH     {r4-r6,lr}
;;;1364   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1365     uint16_t tmpccmr2 = 0;
000006  2600              MOVS     r6,#0
;;;1366     /* Check the parameters */
;;;1367     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4914              LDR      r1,|L29.92|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L29.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L29.44|
000014  4912              LDR      r1,|L29.96|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L29.44|
00001a  4912              LDR      r1,|L29.100|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L29.44|
000020  4911              LDR      r1,|L29.104|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L29.44|
000026  4911              LDR      r1,|L29.108|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L29.48|
                  |L29.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L29.50|
                  |L29.48|
000030  2100              MOVS     r1,#0
                  |L29.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1368     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
000038  2d50              CMP      r5,#0x50
00003a  d001              BEQ      |L29.64|
00003c  2d40              CMP      r5,#0x40
00003e  d101              BNE      |L29.68|
                  |L29.64|
000040  2101              MOVS     r1,#1
000042  e000              B        |L29.70|
                  |L29.68|
000044  2100              MOVS     r1,#0
                  |L29.70|
000046  4608              MOV      r0,r1
000048  f7fffffe          BL       assert_param
;;;1369     tmpccmr2 = TIMx->CCMR2;
00004c  8ba6              LDRH     r6,[r4,#0x1c]
;;;1370     /* Reset the OC1M Bits */
;;;1371     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
00004e  f64f708f          MOV      r0,#0xff8f
000052  4006              ANDS     r6,r6,r0
;;;1372     /* Configure The Forced output Mode */
;;;1373     tmpccmr2 |= TIM_ForcedAction;
000054  432e              ORRS     r6,r6,r5
;;;1374     /* Write to TIMx CCMR2 register */
;;;1375     TIMx->CCMR2 = tmpccmr2;
000056  83a6              STRH     r6,[r4,#0x1c]
;;;1376   }
000058  bd70              POP      {r4-r6,pc}
;;;1377   
                          ENDP

00005a  0000              DCW      0x0000
                  |L29.92|
                          DCD      0x40012c00
                  |L29.96|
                          DCD      0x40000400
                  |L29.100|
                          DCD      0x40000800
                  |L29.104|
                          DCD      0x40000c00
                  |L29.108|
                          DCD      0x40013400

                          AREA ||i.TIM_ForcedOC4Config||, CODE, READONLY, ALIGN=2

                  TIM_ForcedOC4Config PROC
;;;1386     */
;;;1387   void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  b570              PUSH     {r4-r6,lr}
;;;1388   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1389     uint16_t tmpccmr2 = 0;
000006  2600              MOVS     r6,#0
;;;1390     /* Check the parameters */
;;;1391     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4916              LDR      r1,|L30.100|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L30.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L30.44|
000014  4914              LDR      r1,|L30.104|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L30.44|
00001a  4914              LDR      r1,|L30.108|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L30.44|
000020  4913              LDR      r1,|L30.112|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L30.44|
000026  4913              LDR      r1,|L30.116|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L30.48|
                  |L30.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L30.50|
                  |L30.48|
000030  2100              MOVS     r1,#0
                  |L30.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1392     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
000038  2d50              CMP      r5,#0x50
00003a  d001              BEQ      |L30.64|
00003c  2d40              CMP      r5,#0x40
00003e  d101              BNE      |L30.68|
                  |L30.64|
000040  2101              MOVS     r1,#1
000042  e000              B        |L30.70|
                  |L30.68|
000044  2100              MOVS     r1,#0
                  |L30.70|
000046  4608              MOV      r0,r1
000048  f7fffffe          BL       assert_param
;;;1393     tmpccmr2 = TIMx->CCMR2;
00004c  8ba6              LDRH     r6,[r4,#0x1c]
;;;1394     /* Reset the OC2M Bits */
;;;1395     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
00004e  f64870ff          MOV      r0,#0x8fff
000052  4006              ANDS     r6,r6,r0
;;;1396     /* Configure The Forced output Mode */
;;;1397     tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
000054  f64f70ff          MOV      r0,#0xffff
000058  ea002005          AND      r0,r0,r5,LSL #8
00005c  4306              ORRS     r6,r6,r0
;;;1398     /* Write to TIMx CCMR2 register */
;;;1399     TIMx->CCMR2 = tmpccmr2;
00005e  83a6              STRH     r6,[r4,#0x1c]
;;;1400   }
000060  bd70              POP      {r4-r6,pc}
;;;1401   
                          ENDP

000062  0000              DCW      0x0000
                  |L30.100|
                          DCD      0x40012c00
                  |L30.104|
                          DCD      0x40000400
                  |L30.108|
                          DCD      0x40000800
                  |L30.112|
                          DCD      0x40000c00
                  |L30.116|
                          DCD      0x40013400

                          AREA ||i.TIM_GenerateEvent||, CODE, READONLY, ALIGN=2

                  TIM_GenerateEvent PROC
;;;908      */
;;;909    void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
000000  b570              PUSH     {r4-r6,lr}
;;;910    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;911      /* Check the parameters */
;;;912      assert_param(IS_TIM_ALL_PERIPH(TIMx));
000006  4922              LDR      r1,|L31.144|
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L31.108|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d02c              BEQ      |L31.108|
000012  4920              LDR      r1,|L31.148|
000014  428c              CMP      r4,r1
000016  d029              BEQ      |L31.108|
000018  491f              LDR      r1,|L31.152|
00001a  428c              CMP      r4,r1
00001c  d026              BEQ      |L31.108|
00001e  491f              LDR      r1,|L31.156|
000020  428c              CMP      r4,r1
000022  d023              BEQ      |L31.108|
000024  491e              LDR      r1,|L31.160|
000026  428c              CMP      r4,r1
000028  d020              BEQ      |L31.108|
00002a  491e              LDR      r1,|L31.164|
00002c  428c              CMP      r4,r1
00002e  d01d              BEQ      |L31.108|
000030  491d              LDR      r1,|L31.168|
000032  428c              CMP      r4,r1
000034  d01a              BEQ      |L31.108|
000036  491d              LDR      r1,|L31.172|
000038  428c              CMP      r4,r1
00003a  d017              BEQ      |L31.108|
00003c  491c              LDR      r1,|L31.176|
00003e  428c              CMP      r4,r1
000040  d014              BEQ      |L31.108|
000042  491c              LDR      r1,|L31.180|
000044  428c              CMP      r4,r1
000046  d011              BEQ      |L31.108|
000048  491b              LDR      r1,|L31.184|
00004a  428c              CMP      r4,r1
00004c  d00e              BEQ      |L31.108|
00004e  491b              LDR      r1,|L31.188|
000050  428c              CMP      r4,r1
000052  d00b              BEQ      |L31.108|
000054  491a              LDR      r1,|L31.192|
000056  428c              CMP      r4,r1
000058  d008              BEQ      |L31.108|
00005a  491a              LDR      r1,|L31.196|
00005c  428c              CMP      r4,r1
00005e  d005              BEQ      |L31.108|
000060  4919              LDR      r1,|L31.200|
000062  428c              CMP      r4,r1
000064  d002              BEQ      |L31.108|
000066  4919              LDR      r1,|L31.204|
000068  428c              CMP      r4,r1
00006a  d101              BNE      |L31.112|
                  |L31.108|
00006c  2101              MOVS     r1,#1
00006e  e000              B        |L31.114|
                  |L31.112|
000070  2100              MOVS     r1,#0
                  |L31.114|
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       assert_param
;;;913      assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
000078  f405417f          AND      r1,r5,#0xff00
00007c  b911              CBNZ     r1,|L31.132|
00007e  b10d              CBZ      r5,|L31.132|
000080  2101              MOVS     r1,#1
000082  e000              B        |L31.134|
                  |L31.132|
000084  2100              MOVS     r1,#0
                  |L31.134|
000086  4608              MOV      r0,r1
000088  f7fffffe          BL       assert_param
;;;914      
;;;915      /* Set the event sources */
;;;916      TIMx->EGR = TIM_EventSource;
00008c  82a5              STRH     r5,[r4,#0x14]
;;;917    }
00008e  bd70              POP      {r4-r6,pc}
;;;918    
                          ENDP

                  |L31.144|
                          DCD      0x40012c00
                  |L31.148|
                          DCD      0x40000400
                  |L31.152|
                          DCD      0x40000800
                  |L31.156|
                          DCD      0x40000c00
                  |L31.160|
                          DCD      0x40001000
                  |L31.164|
                          DCD      0x40001400
                  |L31.168|
                          DCD      0x40013400
                  |L31.172|
                          DCD      0x40014c00
                  |L31.176|
                          DCD      0x40015000
                  |L31.180|
                          DCD      0x40015400
                  |L31.184|
                          DCD      0x40001800
                  |L31.188|
                          DCD      0x40001c00
                  |L31.192|
                          DCD      0x40002000
                  |L31.196|
                          DCD      0x40014000
                  |L31.200|
                          DCD      0x40014400
                  |L31.204|
                          DCD      0x40014800

                          AREA ||i.TIM_GetCapture1||, CODE, READONLY, ALIGN=2

                  TIM_GetCapture1 PROC
;;;2456     */
;;;2457   uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;2458   {
000002  4604              MOV      r4,r0
;;;2459     /* Check the parameters */
;;;2460     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
000004  491a              LDR      r1,|L32.112|
000006  428c              CMP      r4,r1
000008  d029              BEQ      |L32.94|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d026              BEQ      |L32.94|
000010  4918              LDR      r1,|L32.116|
000012  428c              CMP      r4,r1
000014  d023              BEQ      |L32.94|
000016  4918              LDR      r1,|L32.120|
000018  428c              CMP      r4,r1
00001a  d020              BEQ      |L32.94|
00001c  4917              LDR      r1,|L32.124|
00001e  428c              CMP      r4,r1
000020  d01d              BEQ      |L32.94|
000022  4917              LDR      r1,|L32.128|
000024  428c              CMP      r4,r1
000026  d01a              BEQ      |L32.94|
000028  4916              LDR      r1,|L32.132|
00002a  428c              CMP      r4,r1
00002c  d017              BEQ      |L32.94|
00002e  4916              LDR      r1,|L32.136|
000030  428c              CMP      r4,r1
000032  d014              BEQ      |L32.94|
000034  4915              LDR      r1,|L32.140|
000036  428c              CMP      r4,r1
000038  d011              BEQ      |L32.94|
00003a  4915              LDR      r1,|L32.144|
00003c  428c              CMP      r4,r1
00003e  d00e              BEQ      |L32.94|
000040  4914              LDR      r1,|L32.148|
000042  428c              CMP      r4,r1
000044  d00b              BEQ      |L32.94|
000046  4914              LDR      r1,|L32.152|
000048  428c              CMP      r4,r1
00004a  d008              BEQ      |L32.94|
00004c  4913              LDR      r1,|L32.156|
00004e  428c              CMP      r4,r1
000050  d005              BEQ      |L32.94|
000052  4913              LDR      r1,|L32.160|
000054  428c              CMP      r4,r1
000056  d002              BEQ      |L32.94|
000058  4912              LDR      r1,|L32.164|
00005a  428c              CMP      r4,r1
00005c  d101              BNE      |L32.98|
                  |L32.94|
00005e  2101              MOVS     r1,#1
000060  e000              B        |L32.100|
                  |L32.98|
000062  2100              MOVS     r1,#0
                  |L32.100|
000064  4608              MOV      r0,r1
000066  f7fffffe          BL       assert_param
;;;2461     /* Get the Capture 1 Register value */
;;;2462     return TIMx->CCR1;
00006a  8ea0              LDRH     r0,[r4,#0x34]
;;;2463   }
00006c  bd10              POP      {r4,pc}
;;;2464   
                          ENDP

00006e  0000              DCW      0x0000
                  |L32.112|
                          DCD      0x40012c00
                  |L32.116|
                          DCD      0x40000400
                  |L32.120|
                          DCD      0x40000800
                  |L32.124|
                          DCD      0x40000c00
                  |L32.128|
                          DCD      0x40013400
                  |L32.132|
                          DCD      0x40014c00
                  |L32.136|
                          DCD      0x40015000
                  |L32.140|
                          DCD      0x40015400
                  |L32.144|
                          DCD      0x40001800
                  |L32.148|
                          DCD      0x40001c00
                  |L32.152|
                          DCD      0x40002000
                  |L32.156|
                          DCD      0x40014000
                  |L32.160|
                          DCD      0x40014400
                  |L32.164|
                          DCD      0x40014800

                          AREA ||i.TIM_GetCapture2||, CODE, READONLY, ALIGN=2

                  TIM_GetCapture2 PROC
;;;2469     */
;;;2470   uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;2471   {
000002  4604              MOV      r4,r0
;;;2472     /* Check the parameters */
;;;2473     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000004  4911              LDR      r1,|L33.76|
000006  428c              CMP      r4,r1
000008  d017              BEQ      |L33.58|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d014              BEQ      |L33.58|
000010  490f              LDR      r1,|L33.80|
000012  428c              CMP      r4,r1
000014  d011              BEQ      |L33.58|
000016  490f              LDR      r1,|L33.84|
000018  428c              CMP      r4,r1
00001a  d00e              BEQ      |L33.58|
00001c  490e              LDR      r1,|L33.88|
00001e  428c              CMP      r4,r1
000020  d00b              BEQ      |L33.58|
000022  490e              LDR      r1,|L33.92|
000024  428c              CMP      r4,r1
000026  d008              BEQ      |L33.58|
000028  490d              LDR      r1,|L33.96|
00002a  428c              CMP      r4,r1
00002c  d005              BEQ      |L33.58|
00002e  490d              LDR      r1,|L33.100|
000030  428c              CMP      r4,r1
000032  d002              BEQ      |L33.58|
000034  490c              LDR      r1,|L33.104|
000036  428c              CMP      r4,r1
000038  d101              BNE      |L33.62|
                  |L33.58|
00003a  2101              MOVS     r1,#1
00003c  e000              B        |L33.64|
                  |L33.62|
00003e  2100              MOVS     r1,#0
                  |L33.64|
000040  4608              MOV      r0,r1
000042  f7fffffe          BL       assert_param
;;;2474     /* Get the Capture 2 Register value */
;;;2475     return TIMx->CCR2;
000046  8f20              LDRH     r0,[r4,#0x38]
;;;2476   }
000048  bd10              POP      {r4,pc}
;;;2477   
                          ENDP

00004a  0000              DCW      0x0000
                  |L33.76|
                          DCD      0x40012c00
                  |L33.80|
                          DCD      0x40000400
                  |L33.84|
                          DCD      0x40000800
                  |L33.88|
                          DCD      0x40000c00
                  |L33.92|
                          DCD      0x40013400
                  |L33.96|
                          DCD      0x40014c00
                  |L33.100|
                          DCD      0x40001800
                  |L33.104|
                          DCD      0x40014000

                          AREA ||i.TIM_GetCapture3||, CODE, READONLY, ALIGN=2

                  TIM_GetCapture3 PROC
;;;2482     */
;;;2483   uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;2484   {
000002  4604              MOV      r4,r0
;;;2485     /* Check the parameters */
;;;2486     assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
000004  490c              LDR      r1,|L34.56|
000006  428c              CMP      r4,r1
000008  d00e              BEQ      |L34.40|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d00b              BEQ      |L34.40|
000010  490a              LDR      r1,|L34.60|
000012  428c              CMP      r4,r1
000014  d008              BEQ      |L34.40|
000016  490a              LDR      r1,|L34.64|
000018  428c              CMP      r4,r1
00001a  d005              BEQ      |L34.40|
00001c  4909              LDR      r1,|L34.68|
00001e  428c              CMP      r4,r1
000020  d002              BEQ      |L34.40|
000022  4909              LDR      r1,|L34.72|
000024  428c              CMP      r4,r1
000026  d101              BNE      |L34.44|
                  |L34.40|
000028  2101              MOVS     r1,#1
00002a  e000              B        |L34.46|
                  |L34.44|
00002c  2100              MOVS     r1,#0
                  |L34.46|
00002e  4608              MOV      r0,r1
000030  f7fffffe          BL       assert_param
;;;2487     /* Get the Capture 3 Register value */
;;;2488     return TIMx->CCR3;
000034  8fa0              LDRH     r0,[r4,#0x3c]
;;;2489   }
000036  bd10              POP      {r4,pc}
;;;2490   
                          ENDP

                  |L34.56|
                          DCD      0x40012c00
                  |L34.60|
                          DCD      0x40000400
                  |L34.64|
                          DCD      0x40000800
                  |L34.68|
                          DCD      0x40000c00
                  |L34.72|
                          DCD      0x40013400

                          AREA ||i.TIM_GetCapture4||, CODE, READONLY, ALIGN=2

                  TIM_GetCapture4 PROC
;;;2495     */
;;;2496   uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;2497   {
000002  4604              MOV      r4,r0
;;;2498     /* Check the parameters */
;;;2499     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  490d              LDR      r1,|L35.60|
000006  428c              CMP      r4,r1
000008  d00e              BEQ      |L35.40|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d00b              BEQ      |L35.40|
000010  490b              LDR      r1,|L35.64|
000012  428c              CMP      r4,r1
000014  d008              BEQ      |L35.40|
000016  490b              LDR      r1,|L35.68|
000018  428c              CMP      r4,r1
00001a  d005              BEQ      |L35.40|
00001c  490a              LDR      r1,|L35.72|
00001e  428c              CMP      r4,r1
000020  d002              BEQ      |L35.40|
000022  490a              LDR      r1,|L35.76|
000024  428c              CMP      r4,r1
000026  d101              BNE      |L35.44|
                  |L35.40|
000028  2101              MOVS     r1,#1
00002a  e000              B        |L35.46|
                  |L35.44|
00002c  2100              MOVS     r1,#0
                  |L35.46|
00002e  4608              MOV      r0,r1
000030  f7fffffe          BL       assert_param
;;;2500     /* Get the Capture 4 Register value */
;;;2501     return TIMx->CCR4;
000034  f8b40040          LDRH     r0,[r4,#0x40]
;;;2502   }
000038  bd10              POP      {r4,pc}
;;;2503   
                          ENDP

00003a  0000              DCW      0x0000
                  |L35.60|
                          DCD      0x40012c00
                  |L35.64|
                          DCD      0x40000400
                  |L35.68|
                          DCD      0x40000800
                  |L35.72|
                          DCD      0x40000c00
                  |L35.76|
                          DCD      0x40013400

                          AREA ||i.TIM_GetCounter||, CODE, READONLY, ALIGN=2

                  TIM_GetCounter PROC
;;;2508     */
;;;2509   uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;2510   {
000002  4604              MOV      r4,r0
;;;2511     /* Check the parameters */
;;;2512     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  491d              LDR      r1,|L36.124|
000006  428c              CMP      r4,r1
000008  d02f              BEQ      |L36.106|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d02c              BEQ      |L36.106|
000010  491b              LDR      r1,|L36.128|
000012  428c              CMP      r4,r1
000014  d029              BEQ      |L36.106|
000016  491b              LDR      r1,|L36.132|
000018  428c              CMP      r4,r1
00001a  d026              BEQ      |L36.106|
00001c  491a              LDR      r1,|L36.136|
00001e  428c              CMP      r4,r1
000020  d023              BEQ      |L36.106|
000022  491a              LDR      r1,|L36.140|
000024  428c              CMP      r4,r1
000026  d020              BEQ      |L36.106|
000028  4919              LDR      r1,|L36.144|
00002a  428c              CMP      r4,r1
00002c  d01d              BEQ      |L36.106|
00002e  4919              LDR      r1,|L36.148|
000030  428c              CMP      r4,r1
000032  d01a              BEQ      |L36.106|
000034  4918              LDR      r1,|L36.152|
000036  428c              CMP      r4,r1
000038  d017              BEQ      |L36.106|
00003a  4918              LDR      r1,|L36.156|
00003c  428c              CMP      r4,r1
00003e  d014              BEQ      |L36.106|
000040  4917              LDR      r1,|L36.160|
000042  428c              CMP      r4,r1
000044  d011              BEQ      |L36.106|
000046  4917              LDR      r1,|L36.164|
000048  428c              CMP      r4,r1
00004a  d00e              BEQ      |L36.106|
00004c  4916              LDR      r1,|L36.168|
00004e  428c              CMP      r4,r1
000050  d00b              BEQ      |L36.106|
000052  4916              LDR      r1,|L36.172|
000054  428c              CMP      r4,r1
000056  d008              BEQ      |L36.106|
000058  4915              LDR      r1,|L36.176|
00005a  428c              CMP      r4,r1
00005c  d005              BEQ      |L36.106|
00005e  4915              LDR      r1,|L36.180|
000060  428c              CMP      r4,r1
000062  d002              BEQ      |L36.106|
000064  4914              LDR      r1,|L36.184|
000066  428c              CMP      r4,r1
000068  d101              BNE      |L36.110|
                  |L36.106|
00006a  2101              MOVS     r1,#1
00006c  e000              B        |L36.112|
                  |L36.110|
00006e  2100              MOVS     r1,#0
                  |L36.112|
000070  4608              MOV      r0,r1
000072  f7fffffe          BL       assert_param
;;;2513     /* Get the Counter Register value */
;;;2514     return TIMx->CNT;
000076  8ca0              LDRH     r0,[r4,#0x24]
;;;2515   }
000078  bd10              POP      {r4,pc}
;;;2516   
                          ENDP

00007a  0000              DCW      0x0000
                  |L36.124|
                          DCD      0x40012c00
                  |L36.128|
                          DCD      0x40000400
                  |L36.132|
                          DCD      0x40000800
                  |L36.136|
                          DCD      0x40000c00
                  |L36.140|
                          DCD      0x40001000
                  |L36.144|
                          DCD      0x40001400
                  |L36.148|
                          DCD      0x40013400
                  |L36.152|
                          DCD      0x40014c00
                  |L36.156|
                          DCD      0x40015000
                  |L36.160|
                          DCD      0x40015400
                  |L36.164|
                          DCD      0x40001800
                  |L36.168|
                          DCD      0x40001c00
                  |L36.172|
                          DCD      0x40002000
                  |L36.176|
                          DCD      0x40014000
                  |L36.180|
                          DCD      0x40014400
                  |L36.184|
                          DCD      0x40014800

                          AREA ||i.TIM_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  TIM_GetFlagStatus PROC
;;;2555     */
;;;2556   FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;2557   { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2558     ITStatus bitstatus = RESET;  
000006  2600              MOVS     r6,#0
;;;2559     /* Check the parameters */
;;;2560     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000008  4931              LDR      r1,|L37.208|
00000a  428c              CMP      r4,r1
00000c  d02f              BEQ      |L37.110|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d02c              BEQ      |L37.110|
000014  492f              LDR      r1,|L37.212|
000016  428c              CMP      r4,r1
000018  d029              BEQ      |L37.110|
00001a  492f              LDR      r1,|L37.216|
00001c  428c              CMP      r4,r1
00001e  d026              BEQ      |L37.110|
000020  492e              LDR      r1,|L37.220|
000022  428c              CMP      r4,r1
000024  d023              BEQ      |L37.110|
000026  492e              LDR      r1,|L37.224|
000028  428c              CMP      r4,r1
00002a  d020              BEQ      |L37.110|
00002c  492d              LDR      r1,|L37.228|
00002e  428c              CMP      r4,r1
000030  d01d              BEQ      |L37.110|
000032  492d              LDR      r1,|L37.232|
000034  428c              CMP      r4,r1
000036  d01a              BEQ      |L37.110|
000038  492c              LDR      r1,|L37.236|
00003a  428c              CMP      r4,r1
00003c  d017              BEQ      |L37.110|
00003e  492c              LDR      r1,|L37.240|
000040  428c              CMP      r4,r1
000042  d014              BEQ      |L37.110|
000044  492b              LDR      r1,|L37.244|
000046  428c              CMP      r4,r1
000048  d011              BEQ      |L37.110|
00004a  492b              LDR      r1,|L37.248|
00004c  428c              CMP      r4,r1
00004e  d00e              BEQ      |L37.110|
000050  492a              LDR      r1,|L37.252|
000052  428c              CMP      r4,r1
000054  d00b              BEQ      |L37.110|
000056  492a              LDR      r1,|L37.256|
000058  428c              CMP      r4,r1
00005a  d008              BEQ      |L37.110|
00005c  4929              LDR      r1,|L37.260|
00005e  428c              CMP      r4,r1
000060  d005              BEQ      |L37.110|
000062  4929              LDR      r1,|L37.264|
000064  428c              CMP      r4,r1
000066  d002              BEQ      |L37.110|
000068  4928              LDR      r1,|L37.268|
00006a  428c              CMP      r4,r1
00006c  d101              BNE      |L37.114|
                  |L37.110|
00006e  2101              MOVS     r1,#1
000070  e000              B        |L37.116|
                  |L37.114|
000072  2100              MOVS     r1,#0
                  |L37.116|
000074  4608              MOV      r0,r1
000076  f7fffffe          BL       assert_param
;;;2561     assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
00007a  2d01              CMP      r5,#1
00007c  d019              BEQ      |L37.178|
00007e  2d02              CMP      r5,#2
000080  d017              BEQ      |L37.178|
000082  2d04              CMP      r5,#4
000084  d015              BEQ      |L37.178|
000086  2d08              CMP      r5,#8
000088  d013              BEQ      |L37.178|
00008a  2d10              CMP      r5,#0x10
00008c  d011              BEQ      |L37.178|
00008e  2d20              CMP      r5,#0x20
000090  d00f              BEQ      |L37.178|
000092  2d40              CMP      r5,#0x40
000094  d00d              BEQ      |L37.178|
000096  2d80              CMP      r5,#0x80
000098  d00b              BEQ      |L37.178|
00009a  f5b57f00          CMP      r5,#0x200
00009e  d008              BEQ      |L37.178|
0000a0  f5b56f80          CMP      r5,#0x400
0000a4  d005              BEQ      |L37.178|
0000a6  f5b56f00          CMP      r5,#0x800
0000aa  d002              BEQ      |L37.178|
0000ac  f5b55f80          CMP      r5,#0x1000
0000b0  d101              BNE      |L37.182|
                  |L37.178|
0000b2  2101              MOVS     r1,#1
0000b4  e000              B        |L37.184|
                  |L37.182|
0000b6  2100              MOVS     r1,#0
                  |L37.184|
0000b8  4608              MOV      r0,r1
0000ba  f7fffffe          BL       assert_param
;;;2562     
;;;2563     if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
0000be  8a20              LDRH     r0,[r4,#0x10]
0000c0  4028              ANDS     r0,r0,r5
0000c2  b108              CBZ      r0,|L37.200|
;;;2564     {
;;;2565       bitstatus = SET;
0000c4  2601              MOVS     r6,#1
0000c6  e000              B        |L37.202|
                  |L37.200|
;;;2566     }
;;;2567     else
;;;2568     {
;;;2569       bitstatus = RESET;
0000c8  2600              MOVS     r6,#0
                  |L37.202|
;;;2570     }
;;;2571     return bitstatus;
0000ca  4630              MOV      r0,r6
;;;2572   }
0000cc  bd70              POP      {r4-r6,pc}
;;;2573   
                          ENDP

0000ce  0000              DCW      0x0000
                  |L37.208|
                          DCD      0x40012c00
                  |L37.212|
                          DCD      0x40000400
                  |L37.216|
                          DCD      0x40000800
                  |L37.220|
                          DCD      0x40000c00
                  |L37.224|
                          DCD      0x40001000
                  |L37.228|
                          DCD      0x40001400
                  |L37.232|
                          DCD      0x40013400
                  |L37.236|
                          DCD      0x40014c00
                  |L37.240|
                          DCD      0x40015000
                  |L37.244|
                          DCD      0x40015400
                  |L37.248|
                          DCD      0x40001800
                  |L37.252|
                          DCD      0x40001c00
                  |L37.256|
                          DCD      0x40002000
                  |L37.260|
                          DCD      0x40014000
                  |L37.264|
                          DCD      0x40014400
                  |L37.268|
                          DCD      0x40014800

                          AREA ||i.TIM_GetITStatus||, CODE, READONLY, ALIGN=2

                  TIM_GetITStatus PROC
;;;2631     */
;;;2632   ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2633   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;2634     ITStatus bitstatus = RESET;  
000008  2600              MOVS     r6,#0
;;;2635     uint16_t itstatus = 0x0, itenable = 0x0;
00000a  2700              MOVS     r7,#0
00000c  46b0              MOV      r8,r6
;;;2636     /* Check the parameters */
;;;2637     assert_param(IS_TIM_ALL_PERIPH(TIMx));
00000e  492f              LDR      r1,|L38.204|
000010  428c              CMP      r4,r1
000012  d02f              BEQ      |L38.116|
000014  f1b44f80          CMP      r4,#0x40000000
000018  d02c              BEQ      |L38.116|
00001a  492d              LDR      r1,|L38.208|
00001c  428c              CMP      r4,r1
00001e  d029              BEQ      |L38.116|
000020  492c              LDR      r1,|L38.212|
000022  428c              CMP      r4,r1
000024  d026              BEQ      |L38.116|
000026  492c              LDR      r1,|L38.216|
000028  428c              CMP      r4,r1
00002a  d023              BEQ      |L38.116|
00002c  492b              LDR      r1,|L38.220|
00002e  428c              CMP      r4,r1
000030  d020              BEQ      |L38.116|
000032  492b              LDR      r1,|L38.224|
000034  428c              CMP      r4,r1
000036  d01d              BEQ      |L38.116|
000038  492a              LDR      r1,|L38.228|
00003a  428c              CMP      r4,r1
00003c  d01a              BEQ      |L38.116|
00003e  492a              LDR      r1,|L38.232|
000040  428c              CMP      r4,r1
000042  d017              BEQ      |L38.116|
000044  4929              LDR      r1,|L38.236|
000046  428c              CMP      r4,r1
000048  d014              BEQ      |L38.116|
00004a  4929              LDR      r1,|L38.240|
00004c  428c              CMP      r4,r1
00004e  d011              BEQ      |L38.116|
000050  4928              LDR      r1,|L38.244|
000052  428c              CMP      r4,r1
000054  d00e              BEQ      |L38.116|
000056  4928              LDR      r1,|L38.248|
000058  428c              CMP      r4,r1
00005a  d00b              BEQ      |L38.116|
00005c  4927              LDR      r1,|L38.252|
00005e  428c              CMP      r4,r1
000060  d008              BEQ      |L38.116|
000062  4927              LDR      r1,|L38.256|
000064  428c              CMP      r4,r1
000066  d005              BEQ      |L38.116|
000068  4926              LDR      r1,|L38.260|
00006a  428c              CMP      r4,r1
00006c  d002              BEQ      |L38.116|
00006e  4926              LDR      r1,|L38.264|
000070  428c              CMP      r4,r1
000072  d101              BNE      |L38.120|
                  |L38.116|
000074  2101              MOVS     r1,#1
000076  e000              B        |L38.122|
                  |L38.120|
000078  2100              MOVS     r1,#0
                  |L38.122|
00007a  4608              MOV      r0,r1
00007c  f7fffffe          BL       assert_param
;;;2638     assert_param(IS_TIM_GET_IT(TIM_IT));
000080  2d01              CMP      r5,#1
000082  d00d              BEQ      |L38.160|
000084  2d02              CMP      r5,#2
000086  d00b              BEQ      |L38.160|
000088  2d04              CMP      r5,#4
00008a  d009              BEQ      |L38.160|
00008c  2d08              CMP      r5,#8
00008e  d007              BEQ      |L38.160|
000090  2d10              CMP      r5,#0x10
000092  d005              BEQ      |L38.160|
000094  2d20              CMP      r5,#0x20
000096  d003              BEQ      |L38.160|
000098  2d40              CMP      r5,#0x40
00009a  d001              BEQ      |L38.160|
00009c  2d80              CMP      r5,#0x80
00009e  d101              BNE      |L38.164|
                  |L38.160|
0000a0  2101              MOVS     r1,#1
0000a2  e000              B        |L38.166|
                  |L38.164|
0000a4  2100              MOVS     r1,#0
                  |L38.166|
0000a6  4608              MOV      r0,r1
0000a8  f7fffffe          BL       assert_param
;;;2639      
;;;2640     itstatus = TIMx->SR & TIM_IT;
0000ac  8a20              LDRH     r0,[r4,#0x10]
0000ae  ea000705          AND      r7,r0,r5
;;;2641     
;;;2642     itenable = TIMx->DIER & TIM_IT;
0000b2  89a0              LDRH     r0,[r4,#0xc]
0000b4  ea000805          AND      r8,r0,r5
;;;2643     if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
0000b8  b127              CBZ      r7,|L38.196|
0000ba  f1b80f00          CMP      r8,#0
0000be  d001              BEQ      |L38.196|
;;;2644     {
;;;2645       bitstatus = SET;
0000c0  2601              MOVS     r6,#1
0000c2  e000              B        |L38.198|
                  |L38.196|
;;;2646     }
;;;2647     else
;;;2648     {
;;;2649       bitstatus = RESET;
0000c4  2600              MOVS     r6,#0
                  |L38.198|
;;;2650     }
;;;2651     return bitstatus;
0000c6  4630              MOV      r0,r6
;;;2652   }
0000c8  e8bd81f0          POP      {r4-r8,pc}
;;;2653   
                          ENDP

                  |L38.204|
                          DCD      0x40012c00
                  |L38.208|
                          DCD      0x40000400
                  |L38.212|
                          DCD      0x40000800
                  |L38.216|
                          DCD      0x40000c00
                  |L38.220|
                          DCD      0x40001000
                  |L38.224|
                          DCD      0x40001400
                  |L38.228|
                          DCD      0x40013400
                  |L38.232|
                          DCD      0x40014c00
                  |L38.236|
                          DCD      0x40015000
                  |L38.240|
                          DCD      0x40015400
                  |L38.244|
                          DCD      0x40001800
                  |L38.248|
                          DCD      0x40001c00
                  |L38.252|
                          DCD      0x40002000
                  |L38.256|
                          DCD      0x40014000
                  |L38.260|
                          DCD      0x40014400
                  |L38.264|
                          DCD      0x40014800

                          AREA ||i.TIM_GetPrescaler||, CODE, READONLY, ALIGN=2

                  TIM_GetPrescaler PROC
;;;2521     */
;;;2522   uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;2523   {
000002  4604              MOV      r4,r0
;;;2524     /* Check the parameters */
;;;2525     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  491d              LDR      r1,|L39.124|
000006  428c              CMP      r4,r1
000008  d02f              BEQ      |L39.106|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d02c              BEQ      |L39.106|
000010  491b              LDR      r1,|L39.128|
000012  428c              CMP      r4,r1
000014  d029              BEQ      |L39.106|
000016  491b              LDR      r1,|L39.132|
000018  428c              CMP      r4,r1
00001a  d026              BEQ      |L39.106|
00001c  491a              LDR      r1,|L39.136|
00001e  428c              CMP      r4,r1
000020  d023              BEQ      |L39.106|
000022  491a              LDR      r1,|L39.140|
000024  428c              CMP      r4,r1
000026  d020              BEQ      |L39.106|
000028  4919              LDR      r1,|L39.144|
00002a  428c              CMP      r4,r1
00002c  d01d              BEQ      |L39.106|
00002e  4919              LDR      r1,|L39.148|
000030  428c              CMP      r4,r1
000032  d01a              BEQ      |L39.106|
000034  4918              LDR      r1,|L39.152|
000036  428c              CMP      r4,r1
000038  d017              BEQ      |L39.106|
00003a  4918              LDR      r1,|L39.156|
00003c  428c              CMP      r4,r1
00003e  d014              BEQ      |L39.106|
000040  4917              LDR      r1,|L39.160|
000042  428c              CMP      r4,r1
000044  d011              BEQ      |L39.106|
000046  4917              LDR      r1,|L39.164|
000048  428c              CMP      r4,r1
00004a  d00e              BEQ      |L39.106|
00004c  4916              LDR      r1,|L39.168|
00004e  428c              CMP      r4,r1
000050  d00b              BEQ      |L39.106|
000052  4916              LDR      r1,|L39.172|
000054  428c              CMP      r4,r1
000056  d008              BEQ      |L39.106|
000058  4915              LDR      r1,|L39.176|
00005a  428c              CMP      r4,r1
00005c  d005              BEQ      |L39.106|
00005e  4915              LDR      r1,|L39.180|
000060  428c              CMP      r4,r1
000062  d002              BEQ      |L39.106|
000064  4914              LDR      r1,|L39.184|
000066  428c              CMP      r4,r1
000068  d101              BNE      |L39.110|
                  |L39.106|
00006a  2101              MOVS     r1,#1
00006c  e000              B        |L39.112|
                  |L39.110|
00006e  2100              MOVS     r1,#0
                  |L39.112|
000070  4608              MOV      r0,r1
000072  f7fffffe          BL       assert_param
;;;2526     /* Get the Prescaler Register value */
;;;2527     return TIMx->PSC;
000076  8d20              LDRH     r0,[r4,#0x28]
;;;2528   }
000078  bd10              POP      {r4,pc}
;;;2529   
                          ENDP

00007a  0000              DCW      0x0000
                  |L39.124|
                          DCD      0x40012c00
                  |L39.128|
                          DCD      0x40000400
                  |L39.132|
                          DCD      0x40000800
                  |L39.136|
                          DCD      0x40000c00
                  |L39.140|
                          DCD      0x40001000
                  |L39.144|
                          DCD      0x40001400
                  |L39.148|
                          DCD      0x40013400
                  |L39.152|
                          DCD      0x40014c00
                  |L39.156|
                          DCD      0x40015000
                  |L39.160|
                          DCD      0x40015400
                  |L39.164|
                          DCD      0x40001800
                  |L39.168|
                          DCD      0x40001c00
                  |L39.172|
                          DCD      0x40002000
                  |L39.176|
                          DCD      0x40014000
                  |L39.180|
                          DCD      0x40014400
                  |L39.184|
                          DCD      0x40014800

                          AREA ||i.TIM_ICInit||, CODE, READONLY, ALIGN=2

                  TIM_ICInit PROC
;;;586      */
;;;587    void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;588    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;589      /* Check the parameters */
;;;590      assert_param(IS_TIM_CHANNEL(TIM_ICInitStruct->TIM_Channel));  
000006  8829              LDRH     r1,[r5,#0]
000008  b141              CBZ      r1,|L40.28|
00000a  8829              LDRH     r1,[r5,#0]
00000c  2904              CMP      r1,#4
00000e  d005              BEQ      |L40.28|
000010  8829              LDRH     r1,[r5,#0]
000012  2908              CMP      r1,#8
000014  d002              BEQ      |L40.28|
000016  8829              LDRH     r1,[r5,#0]
000018  290c              CMP      r1,#0xc
00001a  d101              BNE      |L40.32|
                  |L40.28|
00001c  2101              MOVS     r1,#1
00001e  e000              B        |L40.34|
                  |L40.32|
000020  2100              MOVS     r1,#0
                  |L40.34|
000022  4608              MOV      r0,r1
000024  f7fffffe          BL       assert_param
;;;591      assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
000028  88a9              LDRH     r1,[r5,#4]
00002a  2901              CMP      r1,#1
00002c  d005              BEQ      |L40.58|
00002e  88a9              LDRH     r1,[r5,#4]
000030  2902              CMP      r1,#2
000032  d002              BEQ      |L40.58|
000034  88a9              LDRH     r1,[r5,#4]
000036  2903              CMP      r1,#3
000038  d101              BNE      |L40.62|
                  |L40.58|
00003a  2101              MOVS     r1,#1
00003c  e000              B        |L40.64|
                  |L40.62|
00003e  2100              MOVS     r1,#0
                  |L40.64|
000040  4608              MOV      r0,r1
000042  f7fffffe          BL       assert_param
;;;592      assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
000046  88e9              LDRH     r1,[r5,#6]
000048  b141              CBZ      r1,|L40.92|
00004a  88e9              LDRH     r1,[r5,#6]
00004c  2904              CMP      r1,#4
00004e  d005              BEQ      |L40.92|
000050  88e9              LDRH     r1,[r5,#6]
000052  2908              CMP      r1,#8
000054  d002              BEQ      |L40.92|
000056  88e9              LDRH     r1,[r5,#6]
000058  290c              CMP      r1,#0xc
00005a  d101              BNE      |L40.96|
                  |L40.92|
00005c  2101              MOVS     r1,#1
00005e  e000              B        |L40.98|
                  |L40.96|
000060  2100              MOVS     r1,#0
                  |L40.98|
000062  4608              MOV      r0,r1
000064  f7fffffe          BL       assert_param
;;;593      assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
000068  8929              LDRH     r1,[r5,#8]
00006a  290f              CMP      r1,#0xf
00006c  dc01              BGT      |L40.114|
00006e  2101              MOVS     r1,#1
000070  e000              B        |L40.116|
                  |L40.114|
000072  2100              MOVS     r1,#0
                  |L40.116|
000074  4608              MOV      r0,r1
000076  f7fffffe          BL       assert_param
;;;594      
;;;595      if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
00007a  4872              LDR      r0,|L40.580|
00007c  4284              CMP      r4,r0
00007e  d00e              BEQ      |L40.158|
000080  4871              LDR      r0,|L40.584|
000082  4284              CMP      r4,r0
000084  d00b              BEQ      |L40.158|
000086  f1b44f80          CMP      r4,#0x40000000
00008a  d008              BEQ      |L40.158|
00008c  486f              LDR      r0,|L40.588|
00008e  4284              CMP      r4,r0
000090  d005              BEQ      |L40.158|
;;;596         (TIMx == TIM4) ||(TIMx == TIM5))
000092  486f              LDR      r0,|L40.592|
000094  4284              CMP      r4,r0
000096  d002              BEQ      |L40.158|
000098  486e              LDR      r0,|L40.596|
00009a  4284              CMP      r4,r0
00009c  d10b              BNE      |L40.182|
                  |L40.158|
;;;597      {
;;;598        assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
00009e  8869              LDRH     r1,[r5,#2]
0000a0  b111              CBZ      r1,|L40.168|
0000a2  8869              LDRH     r1,[r5,#2]
0000a4  2902              CMP      r1,#2
0000a6  d101              BNE      |L40.172|
                  |L40.168|
0000a8  2101              MOVS     r1,#1
0000aa  e000              B        |L40.174|
                  |L40.172|
0000ac  2100              MOVS     r1,#0
                  |L40.174|
0000ae  4608              MOV      r0,r1
0000b0  f7fffffe          BL       assert_param
0000b4  e00d              B        |L40.210|
                  |L40.182|
;;;599      }
;;;600      else
;;;601      {
;;;602        assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
0000b6  8869              LDRH     r1,[r5,#2]
0000b8  b129              CBZ      r1,|L40.198|
0000ba  8869              LDRH     r1,[r5,#2]
0000bc  2902              CMP      r1,#2
0000be  d002              BEQ      |L40.198|
0000c0  8869              LDRH     r1,[r5,#2]
0000c2  290a              CMP      r1,#0xa
0000c4  d101              BNE      |L40.202|
                  |L40.198|
0000c6  2101              MOVS     r1,#1
0000c8  e000              B        |L40.204|
                  |L40.202|
0000ca  2100              MOVS     r1,#0
                  |L40.204|
0000cc  4608              MOV      r0,r1
0000ce  f7fffffe          BL       assert_param
                  |L40.210|
;;;603      }
;;;604      if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
0000d2  8828              LDRH     r0,[r5,#0]
0000d4  bbe8              CBNZ     r0,|L40.338|
;;;605      {
;;;606        assert_param(IS_TIM_LIST8_PERIPH(TIMx));
0000d6  495b              LDR      r1,|L40.580|
0000d8  428c              CMP      r4,r1
0000da  d029              BEQ      |L40.304|
0000dc  f1b44f80          CMP      r4,#0x40000000
0000e0  d026              BEQ      |L40.304|
0000e2  495a              LDR      r1,|L40.588|
0000e4  428c              CMP      r4,r1
0000e6  d023              BEQ      |L40.304|
0000e8  4959              LDR      r1,|L40.592|
0000ea  428c              CMP      r4,r1
0000ec  d020              BEQ      |L40.304|
0000ee  4959              LDR      r1,|L40.596|
0000f0  428c              CMP      r4,r1
0000f2  d01d              BEQ      |L40.304|
0000f4  4954              LDR      r1,|L40.584|
0000f6  428c              CMP      r4,r1
0000f8  d01a              BEQ      |L40.304|
0000fa  4957              LDR      r1,|L40.600|
0000fc  428c              CMP      r4,r1
0000fe  d017              BEQ      |L40.304|
000100  4956              LDR      r1,|L40.604|
000102  428c              CMP      r4,r1
000104  d014              BEQ      |L40.304|
000106  4956              LDR      r1,|L40.608|
000108  428c              CMP      r4,r1
00010a  d011              BEQ      |L40.304|
00010c  4955              LDR      r1,|L40.612|
00010e  428c              CMP      r4,r1
000110  d00e              BEQ      |L40.304|
000112  4955              LDR      r1,|L40.616|
000114  428c              CMP      r4,r1
000116  d00b              BEQ      |L40.304|
000118  4954              LDR      r1,|L40.620|
00011a  428c              CMP      r4,r1
00011c  d008              BEQ      |L40.304|
00011e  4954              LDR      r1,|L40.624|
000120  428c              CMP      r4,r1
000122  d005              BEQ      |L40.304|
000124  4953              LDR      r1,|L40.628|
000126  428c              CMP      r4,r1
000128  d002              BEQ      |L40.304|
00012a  4953              LDR      r1,|L40.632|
00012c  428c              CMP      r4,r1
00012e  d101              BNE      |L40.308|
                  |L40.304|
000130  2101              MOVS     r1,#1
000132  e000              B        |L40.310|
                  |L40.308|
000134  2100              MOVS     r1,#0
                  |L40.310|
000136  4608              MOV      r0,r1
000138  f7fffffe          BL       assert_param
;;;607        /* TI1 Configuration */
;;;608        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
00013c  892b              LDRH     r3,[r5,#8]
00013e  88aa              LDRH     r2,[r5,#4]
000140  8869              LDRH     r1,[r5,#2]
000142  4620              MOV      r0,r4
000144  f7fffffe          BL       TI1_Config
;;;609                   TIM_ICInitStruct->TIM_ICSelection,
;;;610                   TIM_ICInitStruct->TIM_ICFilter);
;;;611        /* Set the Input Capture Prescaler value */
;;;612        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000148  88e9              LDRH     r1,[r5,#6]
00014a  4620              MOV      r0,r4
00014c  f7fffffe          BL       TIM_SetIC1Prescaler
000150  e077              B        |L40.578|
                  |L40.338|
000152  e7ff              B        |L40.340|
                  |L40.340|
;;;613      }
;;;614      else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
000154  8828              LDRH     r0,[r5,#0]
000156  2804              CMP      r0,#4
000158  d12b              BNE      |L40.434|
;;;615      {
;;;616        assert_param(IS_TIM_LIST6_PERIPH(TIMx));
00015a  493a              LDR      r1,|L40.580|
00015c  428c              CMP      r4,r1
00015e  d017              BEQ      |L40.400|
000160  f1b44f80          CMP      r4,#0x40000000
000164  d014              BEQ      |L40.400|
000166  4939              LDR      r1,|L40.588|
000168  428c              CMP      r4,r1
00016a  d011              BEQ      |L40.400|
00016c  4938              LDR      r1,|L40.592|
00016e  428c              CMP      r4,r1
000170  d00e              BEQ      |L40.400|
000172  4938              LDR      r1,|L40.596|
000174  428c              CMP      r4,r1
000176  d00b              BEQ      |L40.400|
000178  4933              LDR      r1,|L40.584|
00017a  428c              CMP      r4,r1
00017c  d008              BEQ      |L40.400|
00017e  4936              LDR      r1,|L40.600|
000180  428c              CMP      r4,r1
000182  d005              BEQ      |L40.400|
000184  4937              LDR      r1,|L40.612|
000186  428c              CMP      r4,r1
000188  d002              BEQ      |L40.400|
00018a  4939              LDR      r1,|L40.624|
00018c  428c              CMP      r4,r1
00018e  d101              BNE      |L40.404|
                  |L40.400|
000190  2101              MOVS     r1,#1
000192  e000              B        |L40.406|
                  |L40.404|
000194  2100              MOVS     r1,#0
                  |L40.406|
000196  4608              MOV      r0,r1
000198  f7fffffe          BL       assert_param
;;;617        /* TI2 Configuration */
;;;618        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
00019c  892b              LDRH     r3,[r5,#8]
00019e  88aa              LDRH     r2,[r5,#4]
0001a0  8869              LDRH     r1,[r5,#2]
0001a2  4620              MOV      r0,r4
0001a4  f7fffffe          BL       TI2_Config
;;;619                   TIM_ICInitStruct->TIM_ICSelection,
;;;620                   TIM_ICInitStruct->TIM_ICFilter);
;;;621        /* Set the Input Capture Prescaler value */
;;;622        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
0001a8  88e9              LDRH     r1,[r5,#6]
0001aa  4620              MOV      r0,r4
0001ac  f7fffffe          BL       TIM_SetIC2Prescaler
0001b0  e047              B        |L40.578|
                  |L40.434|
;;;623      }
;;;624      else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
0001b2  8828              LDRH     r0,[r5,#0]
0001b4  2808              CMP      r0,#8
0001b6  d122              BNE      |L40.510|
;;;625      {
;;;626        assert_param(IS_TIM_LIST3_PERIPH(TIMx));
0001b8  4922              LDR      r1,|L40.580|
0001ba  428c              CMP      r4,r1
0001bc  d00e              BEQ      |L40.476|
0001be  f1b44f80          CMP      r4,#0x40000000
0001c2  d00b              BEQ      |L40.476|
0001c4  4921              LDR      r1,|L40.588|
0001c6  428c              CMP      r4,r1
0001c8  d008              BEQ      |L40.476|
0001ca  4921              LDR      r1,|L40.592|
0001cc  428c              CMP      r4,r1
0001ce  d005              BEQ      |L40.476|
0001d0  4920              LDR      r1,|L40.596|
0001d2  428c              CMP      r4,r1
0001d4  d002              BEQ      |L40.476|
0001d6  491c              LDR      r1,|L40.584|
0001d8  428c              CMP      r4,r1
0001da  d101              BNE      |L40.480|
                  |L40.476|
0001dc  2101              MOVS     r1,#1
0001de  e000              B        |L40.482|
                  |L40.480|
0001e0  2100              MOVS     r1,#0
                  |L40.482|
0001e2  4608              MOV      r0,r1
0001e4  f7fffffe          BL       assert_param
;;;627        /* TI3 Configuration */
;;;628        TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
0001e8  892b              LDRH     r3,[r5,#8]
0001ea  88aa              LDRH     r2,[r5,#4]
0001ec  8869              LDRH     r1,[r5,#2]
0001ee  4620              MOV      r0,r4
0001f0  f7fffffe          BL       TI3_Config
;;;629                   TIM_ICInitStruct->TIM_ICSelection,
;;;630                   TIM_ICInitStruct->TIM_ICFilter);
;;;631        /* Set the Input Capture Prescaler value */
;;;632        TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
0001f4  88e9              LDRH     r1,[r5,#6]
0001f6  4620              MOV      r0,r4
0001f8  f7fffffe          BL       TIM_SetIC3Prescaler
0001fc  e021              B        |L40.578|
                  |L40.510|
;;;633      }
;;;634      else
;;;635      {
;;;636        assert_param(IS_TIM_LIST3_PERIPH(TIMx));
0001fe  4911              LDR      r1,|L40.580|
000200  428c              CMP      r4,r1
000202  d00e              BEQ      |L40.546|
000204  f1b44f80          CMP      r4,#0x40000000
000208  d00b              BEQ      |L40.546|
00020a  4910              LDR      r1,|L40.588|
00020c  428c              CMP      r4,r1
00020e  d008              BEQ      |L40.546|
000210  490f              LDR      r1,|L40.592|
000212  428c              CMP      r4,r1
000214  d005              BEQ      |L40.546|
000216  490f              LDR      r1,|L40.596|
000218  428c              CMP      r4,r1
00021a  d002              BEQ      |L40.546|
00021c  490a              LDR      r1,|L40.584|
00021e  428c              CMP      r4,r1
000220  d101              BNE      |L40.550|
                  |L40.546|
000222  2101              MOVS     r1,#1
000224  e000              B        |L40.552|
                  |L40.550|
000226  2100              MOVS     r1,#0
                  |L40.552|
000228  4608              MOV      r0,r1
00022a  f7fffffe          BL       assert_param
;;;637        /* TI4 Configuration */
;;;638        TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
00022e  892b              LDRH     r3,[r5,#8]
000230  88aa              LDRH     r2,[r5,#4]
000232  8869              LDRH     r1,[r5,#2]
000234  4620              MOV      r0,r4
000236  f7fffffe          BL       TI4_Config
;;;639                   TIM_ICInitStruct->TIM_ICSelection,
;;;640                   TIM_ICInitStruct->TIM_ICFilter);
;;;641        /* Set the Input Capture Prescaler value */
;;;642        TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
00023a  88e9              LDRH     r1,[r5,#6]
00023c  4620              MOV      r0,r4
00023e  f7fffffe          BL       TIM_SetIC4Prescaler
                  |L40.578|
;;;643      }
;;;644    }
000242  bd70              POP      {r4-r6,pc}
;;;645    
                          ENDP

                  |L40.580|
                          DCD      0x40012c00
                  |L40.584|
                          DCD      0x40013400
                  |L40.588|
                          DCD      0x40000400
                  |L40.592|
                          DCD      0x40000800
                  |L40.596|
                          DCD      0x40000c00
                  |L40.600|
                          DCD      0x40014c00
                  |L40.604|
                          DCD      0x40015000
                  |L40.608|
                          DCD      0x40015400
                  |L40.612|
                          DCD      0x40001800
                  |L40.616|
                          DCD      0x40001c00
                  |L40.620|
                          DCD      0x40002000
                  |L40.624|
                          DCD      0x40014000
                  |L40.628|
                          DCD      0x40014400
                  |L40.632|
                          DCD      0x40014800

                          AREA ||i.TIM_ICStructInit||, CODE, READONLY, ALIGN=1

                  TIM_ICStructInit PROC
;;;770      */
;;;771    void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
000000  2100              MOVS     r1,#0
;;;772    {
;;;773      /* Set the default configuration */
;;;774      TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
000002  8001              STRH     r1,[r0,#0]
;;;775      TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
000004  8041              STRH     r1,[r0,#2]
;;;776      TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
000006  2101              MOVS     r1,#1
000008  8081              STRH     r1,[r0,#4]
;;;777      TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
00000a  2100              MOVS     r1,#0
00000c  80c1              STRH     r1,[r0,#6]
;;;778      TIM_ICInitStruct->TIM_ICFilter = 0x00;
00000e  8101              STRH     r1,[r0,#8]
;;;779    }
000010  4770              BX       lr
;;;780    
                          ENDP


                          AREA ||i.TIM_ITConfig||, CODE, READONLY, ALIGN=2

                  TIM_ITConfig PROC
;;;871      */
;;;872    void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;873    {  
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;874      /* Check the parameters */
;;;875      assert_param(IS_TIM_ALL_PERIPH(TIMx));
000008  492a              LDR      r1,|L42.180|
00000a  428c              CMP      r4,r1
00000c  d02f              BEQ      |L42.110|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d02c              BEQ      |L42.110|
000014  4928              LDR      r1,|L42.184|
000016  428c              CMP      r4,r1
000018  d029              BEQ      |L42.110|
00001a  4928              LDR      r1,|L42.188|
00001c  428c              CMP      r4,r1
00001e  d026              BEQ      |L42.110|
000020  4927              LDR      r1,|L42.192|
000022  428c              CMP      r4,r1
000024  d023              BEQ      |L42.110|
000026  4927              LDR      r1,|L42.196|
000028  428c              CMP      r4,r1
00002a  d020              BEQ      |L42.110|
00002c  4926              LDR      r1,|L42.200|
00002e  428c              CMP      r4,r1
000030  d01d              BEQ      |L42.110|
000032  4926              LDR      r1,|L42.204|
000034  428c              CMP      r4,r1
000036  d01a              BEQ      |L42.110|
000038  4925              LDR      r1,|L42.208|
00003a  428c              CMP      r4,r1
00003c  d017              BEQ      |L42.110|
00003e  4925              LDR      r1,|L42.212|
000040  428c              CMP      r4,r1
000042  d014              BEQ      |L42.110|
000044  4924              LDR      r1,|L42.216|
000046  428c              CMP      r4,r1
000048  d011              BEQ      |L42.110|
00004a  4924              LDR      r1,|L42.220|
00004c  428c              CMP      r4,r1
00004e  d00e              BEQ      |L42.110|
000050  4923              LDR      r1,|L42.224|
000052  428c              CMP      r4,r1
000054  d00b              BEQ      |L42.110|
000056  4923              LDR      r1,|L42.228|
000058  428c              CMP      r4,r1
00005a  d008              BEQ      |L42.110|
00005c  4922              LDR      r1,|L42.232|
00005e  428c              CMP      r4,r1
000060  d005              BEQ      |L42.110|
000062  4922              LDR      r1,|L42.236|
000064  428c              CMP      r4,r1
000066  d002              BEQ      |L42.110|
000068  4921              LDR      r1,|L42.240|
00006a  428c              CMP      r4,r1
00006c  d101              BNE      |L42.114|
                  |L42.110|
00006e  2101              MOVS     r1,#1
000070  e000              B        |L42.116|
                  |L42.114|
000072  2100              MOVS     r1,#0
                  |L42.116|
000074  4608              MOV      r0,r1
000076  f7fffffe          BL       assert_param
;;;876      assert_param(IS_TIM_IT(TIM_IT));
00007a  f405417f          AND      r1,r5,#0xff00
00007e  b911              CBNZ     r1,|L42.134|
000080  b10d              CBZ      r5,|L42.134|
000082  2101              MOVS     r1,#1
000084  e000              B        |L42.136|
                  |L42.134|
000086  2100              MOVS     r1,#0
                  |L42.136|
000088  4608              MOV      r0,r1
00008a  f7fffffe          BL       assert_param
;;;877      assert_param(IS_FUNCTIONAL_STATE(NewState));
00008e  b10e              CBZ      r6,|L42.148|
000090  2e01              CMP      r6,#1
000092  d101              BNE      |L42.152|
                  |L42.148|
000094  2101              MOVS     r1,#1
000096  e000              B        |L42.154|
                  |L42.152|
000098  2100              MOVS     r1,#0
                  |L42.154|
00009a  4608              MOV      r0,r1
00009c  f7fffffe          BL       assert_param
;;;878      
;;;879      if (NewState != DISABLE)
0000a0  b11e              CBZ      r6,|L42.170|
;;;880      {
;;;881        /* Enable the Interrupt sources */
;;;882        TIMx->DIER |= TIM_IT;
0000a2  89a0              LDRH     r0,[r4,#0xc]
0000a4  4328              ORRS     r0,r0,r5
0000a6  81a0              STRH     r0,[r4,#0xc]
0000a8  e002              B        |L42.176|
                  |L42.170|
;;;883      }
;;;884      else
;;;885      {
;;;886        /* Disable the Interrupt sources */
;;;887        TIMx->DIER &= (uint16_t)~TIM_IT;
0000aa  89a0              LDRH     r0,[r4,#0xc]
0000ac  43a8              BICS     r0,r0,r5
0000ae  81a0              STRH     r0,[r4,#0xc]
                  |L42.176|
;;;888      }
;;;889    }
0000b0  bd70              POP      {r4-r6,pc}
;;;890    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L42.180|
                          DCD      0x40012c00
                  |L42.184|
                          DCD      0x40000400
                  |L42.188|
                          DCD      0x40000800
                  |L42.192|
                          DCD      0x40000c00
                  |L42.196|
                          DCD      0x40001000
                  |L42.200|
                          DCD      0x40001400
                  |L42.204|
                          DCD      0x40013400
                  |L42.208|
                          DCD      0x40014c00
                  |L42.212|
                          DCD      0x40015000
                  |L42.216|
                          DCD      0x40015400
                  |L42.220|
                          DCD      0x40001800
                  |L42.224|
                          DCD      0x40001c00
                  |L42.228|
                          DCD      0x40002000
                  |L42.232|
                          DCD      0x40014000
                  |L42.236|
                          DCD      0x40014400
                  |L42.240|
                          DCD      0x40014800

                          AREA ||i.TIM_ITRxExternalClockConfig||, CODE, READONLY, ALIGN=2

                  TIM_ITRxExternalClockConfig PROC
;;;1007     */
;;;1008   void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
000000  b570              PUSH     {r4-r6,lr}
;;;1009   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1010     /* Check the parameters */
;;;1011     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000006  491b              LDR      r1,|L43.116|
000008  428c              CMP      r4,r1
00000a  d017              BEQ      |L43.60|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d014              BEQ      |L43.60|
000012  4919              LDR      r1,|L43.120|
000014  428c              CMP      r4,r1
000016  d011              BEQ      |L43.60|
000018  4918              LDR      r1,|L43.124|
00001a  428c              CMP      r4,r1
00001c  d00e              BEQ      |L43.60|
00001e  4918              LDR      r1,|L43.128|
000020  428c              CMP      r4,r1
000022  d00b              BEQ      |L43.60|
000024  4917              LDR      r1,|L43.132|
000026  428c              CMP      r4,r1
000028  d008              BEQ      |L43.60|
00002a  4917              LDR      r1,|L43.136|
00002c  428c              CMP      r4,r1
00002e  d005              BEQ      |L43.60|
000030  4916              LDR      r1,|L43.140|
000032  428c              CMP      r4,r1
000034  d002              BEQ      |L43.60|
000036  4916              LDR      r1,|L43.144|
000038  428c              CMP      r4,r1
00003a  d101              BNE      |L43.64|
                  |L43.60|
00003c  2101              MOVS     r1,#1
00003e  e000              B        |L43.66|
                  |L43.64|
000040  2100              MOVS     r1,#0
                  |L43.66|
000042  4608              MOV      r0,r1
000044  f7fffffe          BL       assert_param
;;;1012     assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
000048  b12d              CBZ      r5,|L43.86|
00004a  2d10              CMP      r5,#0x10
00004c  d003              BEQ      |L43.86|
00004e  2d20              CMP      r5,#0x20
000050  d001              BEQ      |L43.86|
000052  2d30              CMP      r5,#0x30
000054  d101              BNE      |L43.90|
                  |L43.86|
000056  2101              MOVS     r1,#1
000058  e000              B        |L43.92|
                  |L43.90|
00005a  2100              MOVS     r1,#0
                  |L43.92|
00005c  4608              MOV      r0,r1
00005e  f7fffffe          BL       assert_param
;;;1013     /* Select the Internal Trigger */
;;;1014     TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
000062  4629              MOV      r1,r5
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       TIM_SelectInputTrigger
;;;1015     /* Select the External clock mode1 */
;;;1016     TIMx->SMCR |= TIM_SlaveMode_External1;
00006a  8920              LDRH     r0,[r4,#8]
00006c  f0400007          ORR      r0,r0,#7
000070  8120              STRH     r0,[r4,#8]
;;;1017   }
000072  bd70              POP      {r4-r6,pc}
;;;1018   
                          ENDP

                  |L43.116|
                          DCD      0x40012c00
                  |L43.120|
                          DCD      0x40000400
                  |L43.124|
                          DCD      0x40000800
                  |L43.128|
                          DCD      0x40000c00
                  |L43.132|
                          DCD      0x40013400
                  |L43.136|
                          DCD      0x40014c00
                  |L43.140|
                          DCD      0x40001800
                  |L43.144|
                          DCD      0x40014000

                          AREA ||i.TIM_InternalClockConfig||, CODE, READONLY, ALIGN=2

                  TIM_InternalClockConfig PROC
;;;988      */
;;;989    void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;990    {
000002  4604              MOV      r4,r0
;;;991      /* Check the parameters */
;;;992      assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000004  4913              LDR      r1,|L44.84|
000006  428c              CMP      r4,r1
000008  d017              BEQ      |L44.58|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d014              BEQ      |L44.58|
000010  4911              LDR      r1,|L44.88|
000012  428c              CMP      r4,r1
000014  d011              BEQ      |L44.58|
000016  4911              LDR      r1,|L44.92|
000018  428c              CMP      r4,r1
00001a  d00e              BEQ      |L44.58|
00001c  4910              LDR      r1,|L44.96|
00001e  428c              CMP      r4,r1
000020  d00b              BEQ      |L44.58|
000022  4910              LDR      r1,|L44.100|
000024  428c              CMP      r4,r1
000026  d008              BEQ      |L44.58|
000028  490f              LDR      r1,|L44.104|
00002a  428c              CMP      r4,r1
00002c  d005              BEQ      |L44.58|
00002e  490f              LDR      r1,|L44.108|
000030  428c              CMP      r4,r1
000032  d002              BEQ      |L44.58|
000034  490e              LDR      r1,|L44.112|
000036  428c              CMP      r4,r1
000038  d101              BNE      |L44.62|
                  |L44.58|
00003a  2101              MOVS     r1,#1
00003c  e000              B        |L44.64|
                  |L44.62|
00003e  2100              MOVS     r1,#0
                  |L44.64|
000040  4608              MOV      r0,r1
000042  f7fffffe          BL       assert_param
;;;993      /* Disable slave mode to clock the prescaler directly with the internal clock */
;;;994      TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
000046  8920              LDRH     r0,[r4,#8]
000048  f64f71f8          MOV      r1,#0xfff8
00004c  4008              ANDS     r0,r0,r1
00004e  8120              STRH     r0,[r4,#8]
;;;995    }
000050  bd10              POP      {r4,pc}
;;;996    
                          ENDP

000052  0000              DCW      0x0000
                  |L44.84|
                          DCD      0x40012c00
                  |L44.88|
                          DCD      0x40000400
                  |L44.92|
                          DCD      0x40000800
                  |L44.96|
                          DCD      0x40000c00
                  |L44.100|
                          DCD      0x40013400
                  |L44.104|
                          DCD      0x40014c00
                  |L44.108|
                          DCD      0x40001800
                  |L44.112|
                          DCD      0x40014000

                          AREA ||i.TIM_OC1FastConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC1FastConfig PROC
;;;1605     */
;;;1606   void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  b570              PUSH     {r4-r6,lr}
;;;1607   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1608     uint16_t tmpccmr1 = 0;
000006  2600              MOVS     r6,#0
;;;1609     /* Check the parameters */
;;;1610     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
000008  4921              LDR      r1,|L45.144|
00000a  428c              CMP      r4,r1
00000c  d029              BEQ      |L45.98|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d026              BEQ      |L45.98|
000014  491f              LDR      r1,|L45.148|
000016  428c              CMP      r4,r1
000018  d023              BEQ      |L45.98|
00001a  491f              LDR      r1,|L45.152|
00001c  428c              CMP      r4,r1
00001e  d020              BEQ      |L45.98|
000020  491e              LDR      r1,|L45.156|
000022  428c              CMP      r4,r1
000024  d01d              BEQ      |L45.98|
000026  491e              LDR      r1,|L45.160|
000028  428c              CMP      r4,r1
00002a  d01a              BEQ      |L45.98|
00002c  491d              LDR      r1,|L45.164|
00002e  428c              CMP      r4,r1
000030  d017              BEQ      |L45.98|
000032  491d              LDR      r1,|L45.168|
000034  428c              CMP      r4,r1
000036  d014              BEQ      |L45.98|
000038  491c              LDR      r1,|L45.172|
00003a  428c              CMP      r4,r1
00003c  d011              BEQ      |L45.98|
00003e  491c              LDR      r1,|L45.176|
000040  428c              CMP      r4,r1
000042  d00e              BEQ      |L45.98|
000044  491b              LDR      r1,|L45.180|
000046  428c              CMP      r4,r1
000048  d00b              BEQ      |L45.98|
00004a  491b              LDR      r1,|L45.184|
00004c  428c              CMP      r4,r1
00004e  d008              BEQ      |L45.98|
000050  491a              LDR      r1,|L45.188|
000052  428c              CMP      r4,r1
000054  d005              BEQ      |L45.98|
000056  491a              LDR      r1,|L45.192|
000058  428c              CMP      r4,r1
00005a  d002              BEQ      |L45.98|
00005c  4919              LDR      r1,|L45.196|
00005e  428c              CMP      r4,r1
000060  d101              BNE      |L45.102|
                  |L45.98|
000062  2101              MOVS     r1,#1
000064  e000              B        |L45.104|
                  |L45.102|
000066  2100              MOVS     r1,#0
                  |L45.104|
000068  4608              MOV      r0,r1
00006a  f7fffffe          BL       assert_param
;;;1611     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
00006e  2d04              CMP      r5,#4
000070  d000              BEQ      |L45.116|
000072  b90d              CBNZ     r5,|L45.120|
                  |L45.116|
000074  2101              MOVS     r1,#1
000076  e000              B        |L45.122|
                  |L45.120|
000078  2100              MOVS     r1,#0
                  |L45.122|
00007a  4608              MOV      r0,r1
00007c  f7fffffe          BL       assert_param
;;;1612     /* Get the TIMx CCMR1 register value */
;;;1613     tmpccmr1 = TIMx->CCMR1;
000080  8b26              LDRH     r6,[r4,#0x18]
;;;1614     /* Reset the OC1FE Bit */
;;;1615     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
000082  f64f70fb          MOV      r0,#0xfffb
000086  4006              ANDS     r6,r6,r0
;;;1616     /* Enable or Disable the Output Compare Fast Bit */
;;;1617     tmpccmr1 |= TIM_OCFast;
000088  432e              ORRS     r6,r6,r5
;;;1618     /* Write to TIMx CCMR1 */
;;;1619     TIMx->CCMR1 = tmpccmr1;
00008a  8326              STRH     r6,[r4,#0x18]
;;;1620   }
00008c  bd70              POP      {r4-r6,pc}
;;;1621   
                          ENDP

00008e  0000              DCW      0x0000
                  |L45.144|
                          DCD      0x40012c00
                  |L45.148|
                          DCD      0x40000400
                  |L45.152|
                          DCD      0x40000800
                  |L45.156|
                          DCD      0x40000c00
                  |L45.160|
                          DCD      0x40013400
                  |L45.164|
                          DCD      0x40014c00
                  |L45.168|
                          DCD      0x40015000
                  |L45.172|
                          DCD      0x40015400
                  |L45.176|
                          DCD      0x40001800
                  |L45.180|
                          DCD      0x40001c00
                  |L45.184|
                          DCD      0x40002000
                  |L45.188|
                          DCD      0x40014000
                  |L45.192|
                          DCD      0x40014400
                  |L45.196|
                          DCD      0x40014800

                          AREA ||i.TIM_OC1Init||, CODE, READONLY, ALIGN=2

                  TIM_OC1Init PROC
;;;278      */
;;;279    void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;280    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;281      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
000008  f04f0800          MOV      r8,#0
00000c  2600              MOVS     r6,#0
00000e  2700              MOVS     r7,#0
;;;282       
;;;283      /* Check the parameters */
;;;284      assert_param(IS_TIM_LIST8_PERIPH(TIMx));
000010  4968              LDR      r1,|L46.436|
000012  428c              CMP      r4,r1
000014  d029              BEQ      |L46.106|
000016  f1b44f80          CMP      r4,#0x40000000
00001a  d026              BEQ      |L46.106|
00001c  4966              LDR      r1,|L46.440|
00001e  428c              CMP      r4,r1
000020  d023              BEQ      |L46.106|
000022  4966              LDR      r1,|L46.444|
000024  428c              CMP      r4,r1
000026  d020              BEQ      |L46.106|
000028  4965              LDR      r1,|L46.448|
00002a  428c              CMP      r4,r1
00002c  d01d              BEQ      |L46.106|
00002e  4965              LDR      r1,|L46.452|
000030  428c              CMP      r4,r1
000032  d01a              BEQ      |L46.106|
000034  4964              LDR      r1,|L46.456|
000036  428c              CMP      r4,r1
000038  d017              BEQ      |L46.106|
00003a  4964              LDR      r1,|L46.460|
00003c  428c              CMP      r4,r1
00003e  d014              BEQ      |L46.106|
000040  4963              LDR      r1,|L46.464|
000042  428c              CMP      r4,r1
000044  d011              BEQ      |L46.106|
000046  4963              LDR      r1,|L46.468|
000048  428c              CMP      r4,r1
00004a  d00e              BEQ      |L46.106|
00004c  4962              LDR      r1,|L46.472|
00004e  428c              CMP      r4,r1
000050  d00b              BEQ      |L46.106|
000052  4962              LDR      r1,|L46.476|
000054  428c              CMP      r4,r1
000056  d008              BEQ      |L46.106|
000058  4961              LDR      r1,|L46.480|
00005a  428c              CMP      r4,r1
00005c  d005              BEQ      |L46.106|
00005e  4961              LDR      r1,|L46.484|
000060  428c              CMP      r4,r1
000062  d002              BEQ      |L46.106|
000064  4960              LDR      r1,|L46.488|
000066  428c              CMP      r4,r1
000068  d101              BNE      |L46.110|
                  |L46.106|
00006a  2101              MOVS     r1,#1
00006c  e000              B        |L46.112|
                  |L46.110|
00006e  2100              MOVS     r1,#0
                  |L46.112|
000070  4608              MOV      r0,r1
000072  f7fffffe          BL       assert_param
;;;285      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
000076  8829              LDRH     r1,[r5,#0]
000078  b171              CBZ      r1,|L46.152|
00007a  8829              LDRH     r1,[r5,#0]
00007c  2910              CMP      r1,#0x10
00007e  d00b              BEQ      |L46.152|
000080  8829              LDRH     r1,[r5,#0]
000082  2920              CMP      r1,#0x20
000084  d008              BEQ      |L46.152|
000086  8829              LDRH     r1,[r5,#0]
000088  2930              CMP      r1,#0x30
00008a  d005              BEQ      |L46.152|
00008c  8829              LDRH     r1,[r5,#0]
00008e  2960              CMP      r1,#0x60
000090  d002              BEQ      |L46.152|
000092  8829              LDRH     r1,[r5,#0]
000094  2970              CMP      r1,#0x70
000096  d101              BNE      |L46.156|
                  |L46.152|
000098  2101              MOVS     r1,#1
00009a  e000              B        |L46.158|
                  |L46.156|
00009c  2100              MOVS     r1,#0
                  |L46.158|
00009e  4608              MOV      r0,r1
0000a0  f7fffffe          BL       assert_param
;;;286      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
0000a4  8869              LDRH     r1,[r5,#2]
0000a6  b111              CBZ      r1,|L46.174|
0000a8  8869              LDRH     r1,[r5,#2]
0000aa  2901              CMP      r1,#1
0000ac  d101              BNE      |L46.178|
                  |L46.174|
0000ae  2101              MOVS     r1,#1
0000b0  e000              B        |L46.180|
                  |L46.178|
0000b2  2100              MOVS     r1,#0
                  |L46.180|
0000b4  4608              MOV      r0,r1
0000b6  f7fffffe          BL       assert_param
;;;287      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
0000ba  8929              LDRH     r1,[r5,#8]
0000bc  b111              CBZ      r1,|L46.196|
0000be  8929              LDRH     r1,[r5,#8]
0000c0  2902              CMP      r1,#2
0000c2  d101              BNE      |L46.200|
                  |L46.196|
0000c4  2101              MOVS     r1,#1
0000c6  e000              B        |L46.202|
                  |L46.200|
0000c8  2100              MOVS     r1,#0
                  |L46.202|
0000ca  4608              MOV      r0,r1
0000cc  f7fffffe          BL       assert_param
;;;288     /* Disable the Channel 1: Reset the CC1E Bit */
;;;289      TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
0000d0  8c20              LDRH     r0,[r4,#0x20]
0000d2  f64f71fe          MOV      r1,#0xfffe
0000d6  4008              ANDS     r0,r0,r1
0000d8  8420              STRH     r0,[r4,#0x20]
;;;290      /* Get the TIMx CCER register value */
;;;291      tmpccer = TIMx->CCER;
0000da  8c26              LDRH     r6,[r4,#0x20]
;;;292      /* Get the TIMx CR2 register value */
;;;293      tmpcr2 =  TIMx->CR2;
0000dc  88a7              LDRH     r7,[r4,#4]
;;;294      
;;;295      /* Get the TIMx CCMR1 register value */
;;;296      tmpccmrx = TIMx->CCMR1;
0000de  f8b48018          LDRH     r8,[r4,#0x18]
;;;297        
;;;298      /* Reset the Output Compare Mode Bits */
;;;299      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
0000e2  f64f708f          MOV      r0,#0xff8f
0000e6  ea080800          AND      r8,r8,r0
;;;300      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
0000ea  1e88              SUBS     r0,r1,#2
0000ec  ea080800          AND      r8,r8,r0
;;;301    
;;;302      /* Select the Output Compare Mode */
;;;303      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
0000f0  8828              LDRH     r0,[r5,#0]
0000f2  ea400808          ORR      r8,r0,r8
;;;304      
;;;305      /* Reset the Output Polarity level */
;;;306      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
0000f6  1e48              SUBS     r0,r1,#1
0000f8  4006              ANDS     r6,r6,r0
;;;307      /* Set the Output Compare Polarity */
;;;308      tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
0000fa  8928              LDRH     r0,[r5,#8]
0000fc  4306              ORRS     r6,r6,r0
;;;309      
;;;310      /* Set the Output State */
;;;311      tmpccer |= TIM_OCInitStruct->TIM_OutputState;
0000fe  8868              LDRH     r0,[r5,#2]
000100  4306              ORRS     r6,r6,r0
;;;312        
;;;313      if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
000102  482c              LDR      r0,|L46.436|
000104  4284              CMP      r4,r0
000106  d00b              BEQ      |L46.288|
000108  482e              LDR      r0,|L46.452|
00010a  4284              CMP      r4,r0
00010c  d008              BEQ      |L46.288|
00010e  4834              LDR      r0,|L46.480|
000110  4284              CMP      r4,r0
000112  d005              BEQ      |L46.288|
;;;314         (TIMx == TIM16)|| (TIMx == TIM17))
000114  4833              LDR      r0,|L46.484|
000116  4284              CMP      r4,r0
000118  d002              BEQ      |L46.288|
00011a  4833              LDR      r0,|L46.488|
00011c  4284              CMP      r4,r0
00011e  d141              BNE      |L46.420|
                  |L46.288|
;;;315      {
;;;316        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
000120  88a9              LDRH     r1,[r5,#4]
000122  b111              CBZ      r1,|L46.298|
000124  88a9              LDRH     r1,[r5,#4]
000126  2904              CMP      r1,#4
000128  d101              BNE      |L46.302|
                  |L46.298|
00012a  2101              MOVS     r1,#1
00012c  e000              B        |L46.304|
                  |L46.302|
00012e  2100              MOVS     r1,#0
                  |L46.304|
000130  4608              MOV      r0,r1
000132  f7fffffe          BL       assert_param
;;;317        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
000136  8969              LDRH     r1,[r5,#0xa]
000138  b111              CBZ      r1,|L46.320|
00013a  8969              LDRH     r1,[r5,#0xa]
00013c  2908              CMP      r1,#8
00013e  d101              BNE      |L46.324|
                  |L46.320|
000140  2101              MOVS     r1,#1
000142  e000              B        |L46.326|
                  |L46.324|
000144  2100              MOVS     r1,#0
                  |L46.326|
000146  4608              MOV      r0,r1
000148  f7fffffe          BL       assert_param
;;;318        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
00014c  89e9              LDRH     r1,[r5,#0xe]
00014e  f5b17f00          CMP      r1,#0x200
000152  d001              BEQ      |L46.344|
000154  89e9              LDRH     r1,[r5,#0xe]
000156  b909              CBNZ     r1,|L46.348|
                  |L46.344|
000158  2101              MOVS     r1,#1
00015a  e000              B        |L46.350|
                  |L46.348|
00015c  2100              MOVS     r1,#0
                  |L46.350|
00015e  4608              MOV      r0,r1
000160  f7fffffe          BL       assert_param
;;;319        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
000164  89a9              LDRH     r1,[r5,#0xc]
000166  f5b17f80          CMP      r1,#0x100
00016a  d001              BEQ      |L46.368|
00016c  89a9              LDRH     r1,[r5,#0xc]
00016e  b909              CBNZ     r1,|L46.372|
                  |L46.368|
000170  2101              MOVS     r1,#1
000172  e000              B        |L46.374|
                  |L46.372|
000174  2100              MOVS     r1,#0
                  |L46.374|
000176  4608              MOV      r0,r1
000178  f7fffffe          BL       assert_param
;;;320        
;;;321        /* Reset the Output N Polarity level */
;;;322        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
00017c  f64f70f7          MOV      r0,#0xfff7
000180  4006              ANDS     r6,r6,r0
;;;323        /* Set the Output N Polarity */
;;;324        tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
000182  8968              LDRH     r0,[r5,#0xa]
000184  4306              ORRS     r6,r6,r0
;;;325        
;;;326        /* Reset the Output N State */
;;;327        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
000186  f64f70fb          MOV      r0,#0xfffb
00018a  4006              ANDS     r6,r6,r0
;;;328        /* Set the Output N State */
;;;329        tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
00018c  88a8              LDRH     r0,[r5,#4]
00018e  4306              ORRS     r6,r6,r0
;;;330        
;;;331        /* Reset the Output Compare and Output Compare N IDLE State */
;;;332        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
000190  f64f60ff          MOV      r0,#0xfeff
000194  4007              ANDS     r7,r7,r0
;;;333        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
000196  f64f50ff          MOV      r0,#0xfdff
00019a  4007              ANDS     r7,r7,r0
;;;334        
;;;335        /* Set the Output Idle state */
;;;336        tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
00019c  89a8              LDRH     r0,[r5,#0xc]
00019e  4307              ORRS     r7,r7,r0
;;;337        /* Set the Output N Idle state */
;;;338        tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
0001a0  89e8              LDRH     r0,[r5,#0xe]
0001a2  4307              ORRS     r7,r7,r0
                  |L46.420|
;;;339      }
;;;340      /* Write to TIMx CR2 */
;;;341      TIMx->CR2 = tmpcr2;
0001a4  80a7              STRH     r7,[r4,#4]
;;;342      
;;;343      /* Write to TIMx CCMR1 */
;;;344      TIMx->CCMR1 = tmpccmrx;
0001a6  f8a48018          STRH     r8,[r4,#0x18]
;;;345    
;;;346      /* Set the Capture Compare Register value */
;;;347      TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
0001aa  88e8              LDRH     r0,[r5,#6]
0001ac  86a0              STRH     r0,[r4,#0x34]
;;;348     
;;;349      /* Write to TIMx CCER */
;;;350      TIMx->CCER = tmpccer;
0001ae  8426              STRH     r6,[r4,#0x20]
;;;351    }
0001b0  e8bd81f0          POP      {r4-r8,pc}
;;;352    
                          ENDP

                  |L46.436|
                          DCD      0x40012c00
                  |L46.440|
                          DCD      0x40000400
                  |L46.444|
                          DCD      0x40000800
                  |L46.448|
                          DCD      0x40000c00
                  |L46.452|
                          DCD      0x40013400
                  |L46.456|
                          DCD      0x40014c00
                  |L46.460|
                          DCD      0x40015000
                  |L46.464|
                          DCD      0x40015400
                  |L46.468|
                          DCD      0x40001800
                  |L46.472|
                          DCD      0x40001c00
                  |L46.476|
                          DCD      0x40002000
                  |L46.480|
                          DCD      0x40014000
                  |L46.484|
                          DCD      0x40014400
                  |L46.488|
                          DCD      0x40014800

                          AREA ||i.TIM_OC1NPolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC1NPolarityConfig PROC
;;;1827     */
;;;1828   void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1829   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1830     uint16_t tmpccer = 0;
000006  2600              MOVS     r6,#0
;;;1831     /* Check the parameters */
;;;1832     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000008  4912              LDR      r1,|L47.84|
00000a  428c              CMP      r4,r1
00000c  d00b              BEQ      |L47.38|
00000e  4912              LDR      r1,|L47.88|
000010  428c              CMP      r4,r1
000012  d008              BEQ      |L47.38|
000014  4911              LDR      r1,|L47.92|
000016  428c              CMP      r4,r1
000018  d005              BEQ      |L47.38|
00001a  4911              LDR      r1,|L47.96|
00001c  428c              CMP      r4,r1
00001e  d002              BEQ      |L47.38|
000020  4910              LDR      r1,|L47.100|
000022  428c              CMP      r4,r1
000024  d101              BNE      |L47.42|
                  |L47.38|
000026  2101              MOVS     r1,#1
000028  e000              B        |L47.44|
                  |L47.42|
00002a  2100              MOVS     r1,#0
                  |L47.44|
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       assert_param
;;;1833     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
000032  b10d              CBZ      r5,|L47.56|
000034  2d08              CMP      r5,#8
000036  d101              BNE      |L47.60|
                  |L47.56|
000038  2101              MOVS     r1,#1
00003a  e000              B        |L47.62|
                  |L47.60|
00003c  2100              MOVS     r1,#0
                  |L47.62|
00003e  4608              MOV      r0,r1
000040  f7fffffe          BL       assert_param
;;;1834      
;;;1835     tmpccer = TIMx->CCER;
000044  8c26              LDRH     r6,[r4,#0x20]
;;;1836     /* Set or Reset the CC1NP Bit */
;;;1837     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
000046  f64f70f7          MOV      r0,#0xfff7
00004a  4006              ANDS     r6,r6,r0
;;;1838     tmpccer |= TIM_OCNPolarity;
00004c  432e              ORRS     r6,r6,r5
;;;1839     /* Write to TIMx CCER register */
;;;1840     TIMx->CCER = tmpccer;
00004e  8426              STRH     r6,[r4,#0x20]
;;;1841   }
000050  bd70              POP      {r4-r6,pc}
;;;1842   
                          ENDP

000052  0000              DCW      0x0000
                  |L47.84|
                          DCD      0x40012c00
                  |L47.88|
                          DCD      0x40013400
                  |L47.92|
                          DCD      0x40014000
                  |L47.96|
                          DCD      0x40014400
                  |L47.100|
                          DCD      0x40014800

                          AREA ||i.TIM_OC1PolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC1PolarityConfig PROC
;;;1804     */
;;;1805   void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1806   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1807     uint16_t tmpccer = 0;
000006  2600              MOVS     r6,#0
;;;1808     /* Check the parameters */
;;;1809     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
000008  4921              LDR      r1,|L48.144|
00000a  428c              CMP      r4,r1
00000c  d029              BEQ      |L48.98|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d026              BEQ      |L48.98|
000014  491f              LDR      r1,|L48.148|
000016  428c              CMP      r4,r1
000018  d023              BEQ      |L48.98|
00001a  491f              LDR      r1,|L48.152|
00001c  428c              CMP      r4,r1
00001e  d020              BEQ      |L48.98|
000020  491e              LDR      r1,|L48.156|
000022  428c              CMP      r4,r1
000024  d01d              BEQ      |L48.98|
000026  491e              LDR      r1,|L48.160|
000028  428c              CMP      r4,r1
00002a  d01a              BEQ      |L48.98|
00002c  491d              LDR      r1,|L48.164|
00002e  428c              CMP      r4,r1
000030  d017              BEQ      |L48.98|
000032  491d              LDR      r1,|L48.168|
000034  428c              CMP      r4,r1
000036  d014              BEQ      |L48.98|
000038  491c              LDR      r1,|L48.172|
00003a  428c              CMP      r4,r1
00003c  d011              BEQ      |L48.98|
00003e  491c              LDR      r1,|L48.176|
000040  428c              CMP      r4,r1
000042  d00e              BEQ      |L48.98|
000044  491b              LDR      r1,|L48.180|
000046  428c              CMP      r4,r1
000048  d00b              BEQ      |L48.98|
00004a  491b              LDR      r1,|L48.184|
00004c  428c              CMP      r4,r1
00004e  d008              BEQ      |L48.98|
000050  491a              LDR      r1,|L48.188|
000052  428c              CMP      r4,r1
000054  d005              BEQ      |L48.98|
000056  491a              LDR      r1,|L48.192|
000058  428c              CMP      r4,r1
00005a  d002              BEQ      |L48.98|
00005c  4919              LDR      r1,|L48.196|
00005e  428c              CMP      r4,r1
000060  d101              BNE      |L48.102|
                  |L48.98|
000062  2101              MOVS     r1,#1
000064  e000              B        |L48.104|
                  |L48.102|
000066  2100              MOVS     r1,#0
                  |L48.104|
000068  4608              MOV      r0,r1
00006a  f7fffffe          BL       assert_param
;;;1810     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
00006e  b10d              CBZ      r5,|L48.116|
000070  2d02              CMP      r5,#2
000072  d101              BNE      |L48.120|
                  |L48.116|
000074  2101              MOVS     r1,#1
000076  e000              B        |L48.122|
                  |L48.120|
000078  2100              MOVS     r1,#0
                  |L48.122|
00007a  4608              MOV      r0,r1
00007c  f7fffffe          BL       assert_param
;;;1811     tmpccer = TIMx->CCER;
000080  8c26              LDRH     r6,[r4,#0x20]
;;;1812     /* Set or Reset the CC1P Bit */
;;;1813     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
000082  f64f70fd          MOV      r0,#0xfffd
000086  4006              ANDS     r6,r6,r0
;;;1814     tmpccer |= TIM_OCPolarity;
000088  432e              ORRS     r6,r6,r5
;;;1815     /* Write to TIMx CCER register */
;;;1816     TIMx->CCER = tmpccer;
00008a  8426              STRH     r6,[r4,#0x20]
;;;1817   }
00008c  bd70              POP      {r4-r6,pc}
;;;1818   
                          ENDP

00008e  0000              DCW      0x0000
                  |L48.144|
                          DCD      0x40012c00
                  |L48.148|
                          DCD      0x40000400
                  |L48.152|
                          DCD      0x40000800
                  |L48.156|
                          DCD      0x40000c00
                  |L48.160|
                          DCD      0x40013400
                  |L48.164|
                          DCD      0x40014c00
                  |L48.168|
                          DCD      0x40015000
                  |L48.172|
                          DCD      0x40015400
                  |L48.176|
                          DCD      0x40001800
                  |L48.180|
                          DCD      0x40001c00
                  |L48.184|
                          DCD      0x40002000
                  |L48.188|
                          DCD      0x40014000
                  |L48.192|
                          DCD      0x40014400
                  |L48.196|
                          DCD      0x40014800

                          AREA ||i.TIM_OC1PreloadConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC1PreloadConfig PROC
;;;1508     */
;;;1509   void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  b570              PUSH     {r4-r6,lr}
;;;1510   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1511     uint16_t tmpccmr1 = 0;
000006  2600              MOVS     r6,#0
;;;1512     /* Check the parameters */
;;;1513     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
000008  4921              LDR      r1,|L49.144|
00000a  428c              CMP      r4,r1
00000c  d029              BEQ      |L49.98|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d026              BEQ      |L49.98|
000014  491f              LDR      r1,|L49.148|
000016  428c              CMP      r4,r1
000018  d023              BEQ      |L49.98|
00001a  491f              LDR      r1,|L49.152|
00001c  428c              CMP      r4,r1
00001e  d020              BEQ      |L49.98|
000020  491e              LDR      r1,|L49.156|
000022  428c              CMP      r4,r1
000024  d01d              BEQ      |L49.98|
000026  491e              LDR      r1,|L49.160|
000028  428c              CMP      r4,r1
00002a  d01a              BEQ      |L49.98|
00002c  491d              LDR      r1,|L49.164|
00002e  428c              CMP      r4,r1
000030  d017              BEQ      |L49.98|
000032  491d              LDR      r1,|L49.168|
000034  428c              CMP      r4,r1
000036  d014              BEQ      |L49.98|
000038  491c              LDR      r1,|L49.172|
00003a  428c              CMP      r4,r1
00003c  d011              BEQ      |L49.98|
00003e  491c              LDR      r1,|L49.176|
000040  428c              CMP      r4,r1
000042  d00e              BEQ      |L49.98|
000044  491b              LDR      r1,|L49.180|
000046  428c              CMP      r4,r1
000048  d00b              BEQ      |L49.98|
00004a  491b              LDR      r1,|L49.184|
00004c  428c              CMP      r4,r1
00004e  d008              BEQ      |L49.98|
000050  491a              LDR      r1,|L49.188|
000052  428c              CMP      r4,r1
000054  d005              BEQ      |L49.98|
000056  491a              LDR      r1,|L49.192|
000058  428c              CMP      r4,r1
00005a  d002              BEQ      |L49.98|
00005c  4919              LDR      r1,|L49.196|
00005e  428c              CMP      r4,r1
000060  d101              BNE      |L49.102|
                  |L49.98|
000062  2101              MOVS     r1,#1
000064  e000              B        |L49.104|
                  |L49.102|
000066  2100              MOVS     r1,#0
                  |L49.104|
000068  4608              MOV      r0,r1
00006a  f7fffffe          BL       assert_param
;;;1514     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
00006e  2d08              CMP      r5,#8
000070  d000              BEQ      |L49.116|
000072  b90d              CBNZ     r5,|L49.120|
                  |L49.116|
000074  2101              MOVS     r1,#1
000076  e000              B        |L49.122|
                  |L49.120|
000078  2100              MOVS     r1,#0
                  |L49.122|
00007a  4608              MOV      r0,r1
00007c  f7fffffe          BL       assert_param
;;;1515     tmpccmr1 = TIMx->CCMR1;
000080  8b26              LDRH     r6,[r4,#0x18]
;;;1516     /* Reset the OC1PE Bit */
;;;1517     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
000082  f64f70f7          MOV      r0,#0xfff7
000086  4006              ANDS     r6,r6,r0
;;;1518     /* Enable or Disable the Output Compare Preload feature */
;;;1519     tmpccmr1 |= TIM_OCPreload;
000088  432e              ORRS     r6,r6,r5
;;;1520     /* Write to TIMx CCMR1 register */
;;;1521     TIMx->CCMR1 = tmpccmr1;
00008a  8326              STRH     r6,[r4,#0x18]
;;;1522   }
00008c  bd70              POP      {r4-r6,pc}
;;;1523   
                          ENDP

00008e  0000              DCW      0x0000
                  |L49.144|
                          DCD      0x40012c00
                  |L49.148|
                          DCD      0x40000400
                  |L49.152|
                          DCD      0x40000800
                  |L49.156|
                          DCD      0x40000c00
                  |L49.160|
                          DCD      0x40013400
                  |L49.164|
                          DCD      0x40014c00
                  |L49.168|
                          DCD      0x40015000
                  |L49.172|
                          DCD      0x40015400
                  |L49.176|
                          DCD      0x40001800
                  |L49.180|
                          DCD      0x40001c00
                  |L49.184|
                          DCD      0x40002000
                  |L49.188|
                          DCD      0x40014000
                  |L49.192|
                          DCD      0x40014400
                  |L49.196|
                          DCD      0x40014800

                          AREA ||i.TIM_OC2FastConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC2FastConfig PROC
;;;1631     */
;;;1632   void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  b570              PUSH     {r4-r6,lr}
;;;1633   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1634     uint16_t tmpccmr1 = 0;
000006  2600              MOVS     r6,#0
;;;1635     /* Check the parameters */
;;;1636     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000008  491a              LDR      r1,|L50.116|
00000a  428c              CMP      r4,r1
00000c  d017              BEQ      |L50.62|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d014              BEQ      |L50.62|
000014  4918              LDR      r1,|L50.120|
000016  428c              CMP      r4,r1
000018  d011              BEQ      |L50.62|
00001a  4918              LDR      r1,|L50.124|
00001c  428c              CMP      r4,r1
00001e  d00e              BEQ      |L50.62|
000020  4917              LDR      r1,|L50.128|
000022  428c              CMP      r4,r1
000024  d00b              BEQ      |L50.62|
000026  4917              LDR      r1,|L50.132|
000028  428c              CMP      r4,r1
00002a  d008              BEQ      |L50.62|
00002c  4916              LDR      r1,|L50.136|
00002e  428c              CMP      r4,r1
000030  d005              BEQ      |L50.62|
000032  4916              LDR      r1,|L50.140|
000034  428c              CMP      r4,r1
000036  d002              BEQ      |L50.62|
000038  4915              LDR      r1,|L50.144|
00003a  428c              CMP      r4,r1
00003c  d101              BNE      |L50.66|
                  |L50.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L50.68|
                  |L50.66|
000042  2100              MOVS     r1,#0
                  |L50.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1637     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
00004a  2d04              CMP      r5,#4
00004c  d000              BEQ      |L50.80|
00004e  b90d              CBNZ     r5,|L50.84|
                  |L50.80|
000050  2101              MOVS     r1,#1
000052  e000              B        |L50.86|
                  |L50.84|
000054  2100              MOVS     r1,#0
                  |L50.86|
000056  4608              MOV      r0,r1
000058  f7fffffe          BL       assert_param
;;;1638     /* Get the TIMx CCMR1 register value */
;;;1639     tmpccmr1 = TIMx->CCMR1;
00005c  8b26              LDRH     r6,[r4,#0x18]
;;;1640     /* Reset the OC2FE Bit */
;;;1641     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
00005e  f64f30ff          MOV      r0,#0xfbff
000062  4006              ANDS     r6,r6,r0
;;;1642     /* Enable or Disable the Output Compare Fast Bit */
;;;1643     tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
000064  f64f70ff          MOV      r0,#0xffff
000068  ea002005          AND      r0,r0,r5,LSL #8
00006c  4306              ORRS     r6,r6,r0
;;;1644     /* Write to TIMx CCMR1 */
;;;1645     TIMx->CCMR1 = tmpccmr1;
00006e  8326              STRH     r6,[r4,#0x18]
;;;1646   }
000070  bd70              POP      {r4-r6,pc}
;;;1647   
                          ENDP

000072  0000              DCW      0x0000
                  |L50.116|
                          DCD      0x40012c00
                  |L50.120|
                          DCD      0x40000400
                  |L50.124|
                          DCD      0x40000800
                  |L50.128|
                          DCD      0x40000c00
                  |L50.132|
                          DCD      0x40013400
                  |L50.136|
                          DCD      0x40014c00
                  |L50.140|
                          DCD      0x40001800
                  |L50.144|
                          DCD      0x40014000

                          AREA ||i.TIM_OC2Init||, CODE, READONLY, ALIGN=2

                  TIM_OC2Init PROC
;;;361      */
;;;362    void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;363    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;364      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
000008  f04f0800          MOV      r8,#0
00000c  2600              MOVS     r6,#0
00000e  2700              MOVS     r7,#0
;;;365       
;;;366      /* Check the parameters */
;;;367      assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
000010  4965              LDR      r1,|L51.424|
000012  428d              CMP      r5,r1
000014  d017              BEQ      |L51.70|
000016  f1b54f80          CMP      r5,#0x40000000
00001a  d014              BEQ      |L51.70|
00001c  4963              LDR      r1,|L51.428|
00001e  428d              CMP      r5,r1
000020  d011              BEQ      |L51.70|
000022  4963              LDR      r1,|L51.432|
000024  428d              CMP      r5,r1
000026  d00e              BEQ      |L51.70|
000028  4962              LDR      r1,|L51.436|
00002a  428d              CMP      r5,r1
00002c  d00b              BEQ      |L51.70|
00002e  4962              LDR      r1,|L51.440|
000030  428d              CMP      r5,r1
000032  d008              BEQ      |L51.70|
000034  4961              LDR      r1,|L51.444|
000036  428d              CMP      r5,r1
000038  d005              BEQ      |L51.70|
00003a  4961              LDR      r1,|L51.448|
00003c  428d              CMP      r5,r1
00003e  d002              BEQ      |L51.70|
000040  4960              LDR      r1,|L51.452|
000042  428d              CMP      r5,r1
000044  d101              BNE      |L51.74|
                  |L51.70|
000046  2101              MOVS     r1,#1
000048  e000              B        |L51.76|
                  |L51.74|
00004a  2100              MOVS     r1,#0
                  |L51.76|
00004c  4608              MOV      r0,r1
00004e  f7fffffe          BL       assert_param
;;;368      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
000052  8821              LDRH     r1,[r4,#0]
000054  b171              CBZ      r1,|L51.116|
000056  8821              LDRH     r1,[r4,#0]
000058  2910              CMP      r1,#0x10
00005a  d00b              BEQ      |L51.116|
00005c  8821              LDRH     r1,[r4,#0]
00005e  2920              CMP      r1,#0x20
000060  d008              BEQ      |L51.116|
000062  8821              LDRH     r1,[r4,#0]
000064  2930              CMP      r1,#0x30
000066  d005              BEQ      |L51.116|
000068  8821              LDRH     r1,[r4,#0]
00006a  2960              CMP      r1,#0x60
00006c  d002              BEQ      |L51.116|
00006e  8821              LDRH     r1,[r4,#0]
000070  2970              CMP      r1,#0x70
000072  d101              BNE      |L51.120|
                  |L51.116|
000074  2101              MOVS     r1,#1
000076  e000              B        |L51.122|
                  |L51.120|
000078  2100              MOVS     r1,#0
                  |L51.122|
00007a  4608              MOV      r0,r1
00007c  f7fffffe          BL       assert_param
;;;369      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
000080  8861              LDRH     r1,[r4,#2]
000082  b111              CBZ      r1,|L51.138|
000084  8861              LDRH     r1,[r4,#2]
000086  2901              CMP      r1,#1
000088  d101              BNE      |L51.142|
                  |L51.138|
00008a  2101              MOVS     r1,#1
00008c  e000              B        |L51.144|
                  |L51.142|
00008e  2100              MOVS     r1,#0
                  |L51.144|
000090  4608              MOV      r0,r1
000092  f7fffffe          BL       assert_param
;;;370      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
000096  8921              LDRH     r1,[r4,#8]
000098  b111              CBZ      r1,|L51.160|
00009a  8921              LDRH     r1,[r4,#8]
00009c  2902              CMP      r1,#2
00009e  d101              BNE      |L51.164|
                  |L51.160|
0000a0  2101              MOVS     r1,#1
0000a2  e000              B        |L51.166|
                  |L51.164|
0000a4  2100              MOVS     r1,#0
                  |L51.166|
0000a6  4608              MOV      r0,r1
0000a8  f7fffffe          BL       assert_param
;;;371       /* Disable the Channel 2: Reset the CC2E Bit */
;;;372      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
0000ac  8c28              LDRH     r0,[r5,#0x20]
0000ae  f64f71ef          MOV      r1,#0xffef
0000b2  4008              ANDS     r0,r0,r1
0000b4  8428              STRH     r0,[r5,#0x20]
;;;373      
;;;374      /* Get the TIMx CCER register value */  
;;;375      tmpccer = TIMx->CCER;
0000b6  8c2e              LDRH     r6,[r5,#0x20]
;;;376      /* Get the TIMx CR2 register value */
;;;377      tmpcr2 =  TIMx->CR2;
0000b8  88af              LDRH     r7,[r5,#4]
;;;378      
;;;379      /* Get the TIMx CCMR1 register value */
;;;380      tmpccmrx = TIMx->CCMR1;
0000ba  f8b58018          LDRH     r8,[r5,#0x18]
;;;381        
;;;382      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;383      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
0000be  f64870ff          MOV      r0,#0x8fff
0000c2  ea080800          AND      r8,r8,r0
;;;384      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
0000c6  f64f40ff          MOV      r0,#0xfcff
0000ca  ea080800          AND      r8,r8,r0
;;;385      
;;;386      /* Select the Output Compare Mode */
;;;387      tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
0000ce  8820              LDRH     r0,[r4,#0]
0000d0  f64f71ff          MOV      r1,#0xffff
0000d4  ea012000          AND      r0,r1,r0,LSL #8
0000d8  ea400808          ORR      r8,r0,r8
;;;388      
;;;389      /* Reset the Output Polarity level */
;;;390      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
0000dc  f64f70df          MOV      r0,#0xffdf
0000e0  4006              ANDS     r6,r6,r0
;;;391      /* Set the Output Compare Polarity */
;;;392      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
0000e2  8920              LDRH     r0,[r4,#8]
0000e4  ea011000          AND      r0,r1,r0,LSL #4
0000e8  4306              ORRS     r6,r6,r0
;;;393      
;;;394      /* Set the Output State */
;;;395      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
0000ea  8860              LDRH     r0,[r4,#2]
0000ec  ea011000          AND      r0,r1,r0,LSL #4
0000f0  4306              ORRS     r6,r6,r0
;;;396        
;;;397      if((TIMx == TIM1) || (TIMx == TIM8))
0000f2  482d              LDR      r0,|L51.424|
0000f4  4285              CMP      r5,r0
0000f6  d002              BEQ      |L51.254|
0000f8  482f              LDR      r0,|L51.440|
0000fa  4285              CMP      r5,r0
0000fc  d14b              BNE      |L51.406|
                  |L51.254|
;;;398      {
;;;399        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
0000fe  88a1              LDRH     r1,[r4,#4]
000100  b111              CBZ      r1,|L51.264|
000102  88a1              LDRH     r1,[r4,#4]
000104  2904              CMP      r1,#4
000106  d101              BNE      |L51.268|
                  |L51.264|
000108  2101              MOVS     r1,#1
00010a  e000              B        |L51.270|
                  |L51.268|
00010c  2100              MOVS     r1,#0
                  |L51.270|
00010e  4608              MOV      r0,r1
000110  f7fffffe          BL       assert_param
;;;400        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
000114  8961              LDRH     r1,[r4,#0xa]
000116  b111              CBZ      r1,|L51.286|
000118  8961              LDRH     r1,[r4,#0xa]
00011a  2908              CMP      r1,#8
00011c  d101              BNE      |L51.290|
                  |L51.286|
00011e  2101              MOVS     r1,#1
000120  e000              B        |L51.292|
                  |L51.290|
000122  2100              MOVS     r1,#0
                  |L51.292|
000124  4608              MOV      r0,r1
000126  f7fffffe          BL       assert_param
;;;401        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
00012a  89e1              LDRH     r1,[r4,#0xe]
00012c  f5b17f00          CMP      r1,#0x200
000130  d001              BEQ      |L51.310|
000132  89e1              LDRH     r1,[r4,#0xe]
000134  b909              CBNZ     r1,|L51.314|
                  |L51.310|
000136  2101              MOVS     r1,#1
000138  e000              B        |L51.316|
                  |L51.314|
00013a  2100              MOVS     r1,#0
                  |L51.316|
00013c  4608              MOV      r0,r1
00013e  f7fffffe          BL       assert_param
;;;402        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
000142  89a1              LDRH     r1,[r4,#0xc]
000144  f5b17f80          CMP      r1,#0x100
000148  d001              BEQ      |L51.334|
00014a  89a1              LDRH     r1,[r4,#0xc]
00014c  b909              CBNZ     r1,|L51.338|
                  |L51.334|
00014e  2101              MOVS     r1,#1
000150  e000              B        |L51.340|
                  |L51.338|
000152  2100              MOVS     r1,#0
                  |L51.340|
000154  4608              MOV      r0,r1
000156  f7fffffe          BL       assert_param
;;;403        
;;;404        /* Reset the Output N Polarity level */
;;;405        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
00015a  f64f707f          MOV      r0,#0xff7f
00015e  4006              ANDS     r6,r6,r0
;;;406        /* Set the Output N Polarity */
;;;407        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
000160  8960              LDRH     r0,[r4,#0xa]
000162  f64f71ff          MOV      r1,#0xffff
000166  ea011000          AND      r0,r1,r0,LSL #4
00016a  4306              ORRS     r6,r6,r0
;;;408        
;;;409        /* Reset the Output N State */
;;;410        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
00016c  f64f70bf          MOV      r0,#0xffbf
000170  4006              ANDS     r6,r6,r0
;;;411        /* Set the Output N State */
;;;412        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
000172  88a0              LDRH     r0,[r4,#4]
000174  ea011000          AND      r0,r1,r0,LSL #4
000178  4306              ORRS     r6,r6,r0
;;;413        
;;;414        /* Reset the Output Compare and Output Compare N IDLE State */
;;;415        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
00017a  f64f30ff          MOV      r0,#0xfbff
00017e  4007              ANDS     r7,r7,r0
;;;416        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
000180  f24f70ff          MOV      r0,#0xf7ff
000184  4007              ANDS     r7,r7,r0
;;;417        
;;;418        /* Set the Output Idle state */
;;;419        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
000186  89a0              LDRH     r0,[r4,#0xc]
000188  ea010080          AND      r0,r1,r0,LSL #2
00018c  4307              ORRS     r7,r7,r0
;;;420        /* Set the Output N Idle state */
;;;421        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
00018e  89e0              LDRH     r0,[r4,#0xe]
000190  ea010080          AND      r0,r1,r0,LSL #2
000194  4307              ORRS     r7,r7,r0
                  |L51.406|
;;;422      }
;;;423      /* Write to TIMx CR2 */
;;;424      TIMx->CR2 = tmpcr2;
000196  80af              STRH     r7,[r5,#4]
;;;425      
;;;426      /* Write to TIMx CCMR1 */
;;;427      TIMx->CCMR1 = tmpccmrx;
000198  f8a58018          STRH     r8,[r5,#0x18]
;;;428    
;;;429      /* Set the Capture Compare Register value */
;;;430      TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
00019c  88e0              LDRH     r0,[r4,#6]
00019e  8728              STRH     r0,[r5,#0x38]
;;;431      
;;;432      /* Write to TIMx CCER */
;;;433      TIMx->CCER = tmpccer;
0001a0  842e              STRH     r6,[r5,#0x20]
;;;434    }
0001a2  e8bd81f0          POP      {r4-r8,pc}
;;;435    
                          ENDP

0001a6  0000              DCW      0x0000
                  |L51.424|
                          DCD      0x40012c00
                  |L51.428|
                          DCD      0x40000400
                  |L51.432|
                          DCD      0x40000800
                  |L51.436|
                          DCD      0x40000c00
                  |L51.440|
                          DCD      0x40013400
                  |L51.444|
                          DCD      0x40014c00
                  |L51.448|
                          DCD      0x40001800
                  |L51.452|
                          DCD      0x40014000

                          AREA ||i.TIM_OC2NPolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC2NPolarityConfig PROC
;;;1874     */
;;;1875   void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1876   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1877     uint16_t tmpccer = 0;
000006  2600              MOVS     r6,#0
;;;1878     /* Check the parameters */
;;;1879     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000008  490f              LDR      r1,|L52.72|
00000a  428c              CMP      r4,r1
00000c  d002              BEQ      |L52.20|
00000e  490f              LDR      r1,|L52.76|
000010  428c              CMP      r4,r1
000012  d101              BNE      |L52.24|
                  |L52.20|
000014  2101              MOVS     r1,#1
000016  e000              B        |L52.26|
                  |L52.24|
000018  2100              MOVS     r1,#0
                  |L52.26|
00001a  4608              MOV      r0,r1
00001c  f7fffffe          BL       assert_param
;;;1880     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
000020  b10d              CBZ      r5,|L52.38|
000022  2d08              CMP      r5,#8
000024  d101              BNE      |L52.42|
                  |L52.38|
000026  2101              MOVS     r1,#1
000028  e000              B        |L52.44|
                  |L52.42|
00002a  2100              MOVS     r1,#0
                  |L52.44|
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       assert_param
;;;1881     
;;;1882     tmpccer = TIMx->CCER;
000032  8c26              LDRH     r6,[r4,#0x20]
;;;1883     /* Set or Reset the CC2NP Bit */
;;;1884     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
000034  f64f707f          MOV      r0,#0xff7f
000038  4006              ANDS     r6,r6,r0
;;;1885     tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
00003a  f64f70ff          MOV      r0,#0xffff
00003e  ea001005          AND      r0,r0,r5,LSL #4
000042  4306              ORRS     r6,r6,r0
;;;1886     /* Write to TIMx CCER register */
;;;1887     TIMx->CCER = tmpccer;
000044  8426              STRH     r6,[r4,#0x20]
;;;1888   }
000046  bd70              POP      {r4-r6,pc}
;;;1889   
                          ENDP

                  |L52.72|
                          DCD      0x40012c00
                  |L52.76|
                          DCD      0x40013400

                          AREA ||i.TIM_OC2PolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC2PolarityConfig PROC
;;;1851     */
;;;1852   void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1853   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1854     uint16_t tmpccer = 0;
000006  2600              MOVS     r6,#0
;;;1855     /* Check the parameters */
;;;1856     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000008  491a              LDR      r1,|L53.116|
00000a  428c              CMP      r4,r1
00000c  d017              BEQ      |L53.62|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d014              BEQ      |L53.62|
000014  4918              LDR      r1,|L53.120|
000016  428c              CMP      r4,r1
000018  d011              BEQ      |L53.62|
00001a  4918              LDR      r1,|L53.124|
00001c  428c              CMP      r4,r1
00001e  d00e              BEQ      |L53.62|
000020  4917              LDR      r1,|L53.128|
000022  428c              CMP      r4,r1
000024  d00b              BEQ      |L53.62|
000026  4917              LDR      r1,|L53.132|
000028  428c              CMP      r4,r1
00002a  d008              BEQ      |L53.62|
00002c  4916              LDR      r1,|L53.136|
00002e  428c              CMP      r4,r1
000030  d005              BEQ      |L53.62|
000032  4916              LDR      r1,|L53.140|
000034  428c              CMP      r4,r1
000036  d002              BEQ      |L53.62|
000038  4915              LDR      r1,|L53.144|
00003a  428c              CMP      r4,r1
00003c  d101              BNE      |L53.66|
                  |L53.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L53.68|
                  |L53.66|
000042  2100              MOVS     r1,#0
                  |L53.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1857     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
00004a  b10d              CBZ      r5,|L53.80|
00004c  2d02              CMP      r5,#2
00004e  d101              BNE      |L53.84|
                  |L53.80|
000050  2101              MOVS     r1,#1
000052  e000              B        |L53.86|
                  |L53.84|
000054  2100              MOVS     r1,#0
                  |L53.86|
000056  4608              MOV      r0,r1
000058  f7fffffe          BL       assert_param
;;;1858     tmpccer = TIMx->CCER;
00005c  8c26              LDRH     r6,[r4,#0x20]
;;;1859     /* Set or Reset the CC2P Bit */
;;;1860     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
00005e  f64f70df          MOV      r0,#0xffdf
000062  4006              ANDS     r6,r6,r0
;;;1861     tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
000064  f64f70ff          MOV      r0,#0xffff
000068  ea001005          AND      r0,r0,r5,LSL #4
00006c  4306              ORRS     r6,r6,r0
;;;1862     /* Write to TIMx CCER register */
;;;1863     TIMx->CCER = tmpccer;
00006e  8426              STRH     r6,[r4,#0x20]
;;;1864   }
000070  bd70              POP      {r4-r6,pc}
;;;1865   
                          ENDP

000072  0000              DCW      0x0000
                  |L53.116|
                          DCD      0x40012c00
                  |L53.120|
                          DCD      0x40000400
                  |L53.124|
                          DCD      0x40000800
                  |L53.128|
                          DCD      0x40000c00
                  |L53.132|
                          DCD      0x40013400
                  |L53.136|
                          DCD      0x40014c00
                  |L53.140|
                          DCD      0x40001800
                  |L53.144|
                          DCD      0x40014000

                          AREA ||i.TIM_OC2PreloadConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC2PreloadConfig PROC
;;;1533     */
;;;1534   void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  b570              PUSH     {r4-r6,lr}
;;;1535   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1536     uint16_t tmpccmr1 = 0;
000006  2600              MOVS     r6,#0
;;;1537     /* Check the parameters */
;;;1538     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000008  491a              LDR      r1,|L54.116|
00000a  428c              CMP      r4,r1
00000c  d017              BEQ      |L54.62|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d014              BEQ      |L54.62|
000014  4918              LDR      r1,|L54.120|
000016  428c              CMP      r4,r1
000018  d011              BEQ      |L54.62|
00001a  4918              LDR      r1,|L54.124|
00001c  428c              CMP      r4,r1
00001e  d00e              BEQ      |L54.62|
000020  4917              LDR      r1,|L54.128|
000022  428c              CMP      r4,r1
000024  d00b              BEQ      |L54.62|
000026  4917              LDR      r1,|L54.132|
000028  428c              CMP      r4,r1
00002a  d008              BEQ      |L54.62|
00002c  4916              LDR      r1,|L54.136|
00002e  428c              CMP      r4,r1
000030  d005              BEQ      |L54.62|
000032  4916              LDR      r1,|L54.140|
000034  428c              CMP      r4,r1
000036  d002              BEQ      |L54.62|
000038  4915              LDR      r1,|L54.144|
00003a  428c              CMP      r4,r1
00003c  d101              BNE      |L54.66|
                  |L54.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L54.68|
                  |L54.66|
000042  2100              MOVS     r1,#0
                  |L54.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1539     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
00004a  2d08              CMP      r5,#8
00004c  d000              BEQ      |L54.80|
00004e  b90d              CBNZ     r5,|L54.84|
                  |L54.80|
000050  2101              MOVS     r1,#1
000052  e000              B        |L54.86|
                  |L54.84|
000054  2100              MOVS     r1,#0
                  |L54.86|
000056  4608              MOV      r0,r1
000058  f7fffffe          BL       assert_param
;;;1540     tmpccmr1 = TIMx->CCMR1;
00005c  8b26              LDRH     r6,[r4,#0x18]
;;;1541     /* Reset the OC2PE Bit */
;;;1542     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
00005e  f24f70ff          MOV      r0,#0xf7ff
000062  4006              ANDS     r6,r6,r0
;;;1543     /* Enable or Disable the Output Compare Preload feature */
;;;1544     tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
000064  f64f70ff          MOV      r0,#0xffff
000068  ea002005          AND      r0,r0,r5,LSL #8
00006c  4306              ORRS     r6,r6,r0
;;;1545     /* Write to TIMx CCMR1 register */
;;;1546     TIMx->CCMR1 = tmpccmr1;
00006e  8326              STRH     r6,[r4,#0x18]
;;;1547   }
000070  bd70              POP      {r4-r6,pc}
;;;1548   
                          ENDP

000072  0000              DCW      0x0000
                  |L54.116|
                          DCD      0x40012c00
                  |L54.120|
                          DCD      0x40000400
                  |L54.124|
                          DCD      0x40000800
                  |L54.128|
                          DCD      0x40000c00
                  |L54.132|
                          DCD      0x40013400
                  |L54.136|
                          DCD      0x40014c00
                  |L54.140|
                          DCD      0x40001800
                  |L54.144|
                          DCD      0x40014000

                          AREA ||i.TIM_OC3FastConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC3FastConfig PROC
;;;1656     */
;;;1657   void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  b570              PUSH     {r4-r6,lr}
;;;1658   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1659     uint16_t tmpccmr2 = 0;
000006  2600              MOVS     r6,#0
;;;1660     /* Check the parameters */
;;;1661     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4913              LDR      r1,|L55.88|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L55.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L55.44|
000014  4911              LDR      r1,|L55.92|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L55.44|
00001a  4911              LDR      r1,|L55.96|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L55.44|
000020  4910              LDR      r1,|L55.100|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L55.44|
000026  4910              LDR      r1,|L55.104|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L55.48|
                  |L55.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L55.50|
                  |L55.48|
000030  2100              MOVS     r1,#0
                  |L55.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1662     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
000038  2d04              CMP      r5,#4
00003a  d000              BEQ      |L55.62|
00003c  b90d              CBNZ     r5,|L55.66|
                  |L55.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L55.68|
                  |L55.66|
000042  2100              MOVS     r1,#0
                  |L55.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1663     /* Get the TIMx CCMR2 register value */
;;;1664     tmpccmr2 = TIMx->CCMR2;
00004a  8ba6              LDRH     r6,[r4,#0x1c]
;;;1665     /* Reset the OC3FE Bit */
;;;1666     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
00004c  f64f70fb          MOV      r0,#0xfffb
000050  4006              ANDS     r6,r6,r0
;;;1667     /* Enable or Disable the Output Compare Fast Bit */
;;;1668     tmpccmr2 |= TIM_OCFast;
000052  432e              ORRS     r6,r6,r5
;;;1669     /* Write to TIMx CCMR2 */
;;;1670     TIMx->CCMR2 = tmpccmr2;
000054  83a6              STRH     r6,[r4,#0x1c]
;;;1671   }
000056  bd70              POP      {r4-r6,pc}
;;;1672   
                          ENDP

                  |L55.88|
                          DCD      0x40012c00
                  |L55.92|
                          DCD      0x40000400
                  |L55.96|
                          DCD      0x40000800
                  |L55.100|
                          DCD      0x40000c00
                  |L55.104|
                          DCD      0x40013400

                          AREA ||i.TIM_OC3Init||, CODE, READONLY, ALIGN=2

                  TIM_OC3Init PROC
;;;443      */
;;;444    void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;445    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;446      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
000008  f04f0800          MOV      r8,#0
00000c  2600              MOVS     r6,#0
00000e  2700              MOVS     r7,#0
;;;447       
;;;448      /* Check the parameters */
;;;449      assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
000010  495f              LDR      r1,|L56.400|
000012  428d              CMP      r5,r1
000014  d00e              BEQ      |L56.52|
000016  f1b54f80          CMP      r5,#0x40000000
00001a  d00b              BEQ      |L56.52|
00001c  495d              LDR      r1,|L56.404|
00001e  428d              CMP      r5,r1
000020  d008              BEQ      |L56.52|
000022  495d              LDR      r1,|L56.408|
000024  428d              CMP      r5,r1
000026  d005              BEQ      |L56.52|
000028  495c              LDR      r1,|L56.412|
00002a  428d              CMP      r5,r1
00002c  d002              BEQ      |L56.52|
00002e  495c              LDR      r1,|L56.416|
000030  428d              CMP      r5,r1
000032  d101              BNE      |L56.56|
                  |L56.52|
000034  2101              MOVS     r1,#1
000036  e000              B        |L56.58|
                  |L56.56|
000038  2100              MOVS     r1,#0
                  |L56.58|
00003a  4608              MOV      r0,r1
00003c  f7fffffe          BL       assert_param
;;;450      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
000040  8821              LDRH     r1,[r4,#0]
000042  b171              CBZ      r1,|L56.98|
000044  8821              LDRH     r1,[r4,#0]
000046  2910              CMP      r1,#0x10
000048  d00b              BEQ      |L56.98|
00004a  8821              LDRH     r1,[r4,#0]
00004c  2920              CMP      r1,#0x20
00004e  d008              BEQ      |L56.98|
000050  8821              LDRH     r1,[r4,#0]
000052  2930              CMP      r1,#0x30
000054  d005              BEQ      |L56.98|
000056  8821              LDRH     r1,[r4,#0]
000058  2960              CMP      r1,#0x60
00005a  d002              BEQ      |L56.98|
00005c  8821              LDRH     r1,[r4,#0]
00005e  2970              CMP      r1,#0x70
000060  d101              BNE      |L56.102|
                  |L56.98|
000062  2101              MOVS     r1,#1
000064  e000              B        |L56.104|
                  |L56.102|
000066  2100              MOVS     r1,#0
                  |L56.104|
000068  4608              MOV      r0,r1
00006a  f7fffffe          BL       assert_param
;;;451      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
00006e  8861              LDRH     r1,[r4,#2]
000070  b111              CBZ      r1,|L56.120|
000072  8861              LDRH     r1,[r4,#2]
000074  2901              CMP      r1,#1
000076  d101              BNE      |L56.124|
                  |L56.120|
000078  2101              MOVS     r1,#1
00007a  e000              B        |L56.126|
                  |L56.124|
00007c  2100              MOVS     r1,#0
                  |L56.126|
00007e  4608              MOV      r0,r1
000080  f7fffffe          BL       assert_param
;;;452      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
000084  8921              LDRH     r1,[r4,#8]
000086  b111              CBZ      r1,|L56.142|
000088  8921              LDRH     r1,[r4,#8]
00008a  2902              CMP      r1,#2
00008c  d101              BNE      |L56.146|
                  |L56.142|
00008e  2101              MOVS     r1,#1
000090  e000              B        |L56.148|
                  |L56.146|
000092  2100              MOVS     r1,#0
                  |L56.148|
000094  4608              MOV      r0,r1
000096  f7fffffe          BL       assert_param
;;;453      /* Disable the Channel 2: Reset the CC2E Bit */
;;;454      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
00009a  8c28              LDRH     r0,[r5,#0x20]
00009c  f64f61ff          MOV      r1,#0xfeff
0000a0  4008              ANDS     r0,r0,r1
0000a2  8428              STRH     r0,[r5,#0x20]
;;;455      
;;;456      /* Get the TIMx CCER register value */
;;;457      tmpccer = TIMx->CCER;
0000a4  8c2e              LDRH     r6,[r5,#0x20]
;;;458      /* Get the TIMx CR2 register value */
;;;459      tmpcr2 =  TIMx->CR2;
0000a6  88af              LDRH     r7,[r5,#4]
;;;460      
;;;461      /* Get the TIMx CCMR2 register value */
;;;462      tmpccmrx = TIMx->CCMR2;
0000a8  f8b5801c          LDRH     r8,[r5,#0x1c]
;;;463        
;;;464      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;465      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
0000ac  f64f708f          MOV      r0,#0xff8f
0000b0  ea080800          AND      r8,r8,r0
;;;466      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
0000b4  f64f70fc          MOV      r0,#0xfffc
0000b8  ea080800          AND      r8,r8,r0
;;;467      /* Select the Output Compare Mode */
;;;468      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
0000bc  8820              LDRH     r0,[r4,#0]
0000be  ea400808          ORR      r8,r0,r8
;;;469      
;;;470      /* Reset the Output Polarity level */
;;;471      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
0000c2  f64f50ff          MOV      r0,#0xfdff
0000c6  4006              ANDS     r6,r6,r0
;;;472      /* Set the Output Compare Polarity */
;;;473      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
0000c8  8920              LDRH     r0,[r4,#8]
0000ca  f64f71ff          MOV      r1,#0xffff
0000ce  ea012000          AND      r0,r1,r0,LSL #8
0000d2  4306              ORRS     r6,r6,r0
;;;474      
;;;475      /* Set the Output State */
;;;476      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
0000d4  8860              LDRH     r0,[r4,#2]
0000d6  ea012000          AND      r0,r1,r0,LSL #8
0000da  4306              ORRS     r6,r6,r0
;;;477        
;;;478      if((TIMx == TIM1) || (TIMx == TIM8))
0000dc  482c              LDR      r0,|L56.400|
0000de  4285              CMP      r5,r0
0000e0  d002              BEQ      |L56.232|
0000e2  482f              LDR      r0,|L56.416|
0000e4  4285              CMP      r5,r0
0000e6  d14b              BNE      |L56.384|
                  |L56.232|
;;;479      {
;;;480        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
0000e8  88a1              LDRH     r1,[r4,#4]
0000ea  b111              CBZ      r1,|L56.242|
0000ec  88a1              LDRH     r1,[r4,#4]
0000ee  2904              CMP      r1,#4
0000f0  d101              BNE      |L56.246|
                  |L56.242|
0000f2  2101              MOVS     r1,#1
0000f4  e000              B        |L56.248|
                  |L56.246|
0000f6  2100              MOVS     r1,#0
                  |L56.248|
0000f8  4608              MOV      r0,r1
0000fa  f7fffffe          BL       assert_param
;;;481        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
0000fe  8961              LDRH     r1,[r4,#0xa]
000100  b111              CBZ      r1,|L56.264|
000102  8961              LDRH     r1,[r4,#0xa]
000104  2908              CMP      r1,#8
000106  d101              BNE      |L56.268|
                  |L56.264|
000108  2101              MOVS     r1,#1
00010a  e000              B        |L56.270|
                  |L56.268|
00010c  2100              MOVS     r1,#0
                  |L56.270|
00010e  4608              MOV      r0,r1
000110  f7fffffe          BL       assert_param
;;;482        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
000114  89e1              LDRH     r1,[r4,#0xe]
000116  f5b17f00          CMP      r1,#0x200
00011a  d001              BEQ      |L56.288|
00011c  89e1              LDRH     r1,[r4,#0xe]
00011e  b909              CBNZ     r1,|L56.292|
                  |L56.288|
000120  2101              MOVS     r1,#1
000122  e000              B        |L56.294|
                  |L56.292|
000124  2100              MOVS     r1,#0
                  |L56.294|
000126  4608              MOV      r0,r1
000128  f7fffffe          BL       assert_param
;;;483        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
00012c  89a1              LDRH     r1,[r4,#0xc]
00012e  f5b17f80          CMP      r1,#0x100
000132  d001              BEQ      |L56.312|
000134  89a1              LDRH     r1,[r4,#0xc]
000136  b909              CBNZ     r1,|L56.316|
                  |L56.312|
000138  2101              MOVS     r1,#1
00013a  e000              B        |L56.318|
                  |L56.316|
00013c  2100              MOVS     r1,#0
                  |L56.318|
00013e  4608              MOV      r0,r1
000140  f7fffffe          BL       assert_param
;;;484        
;;;485        /* Reset the Output N Polarity level */
;;;486        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
000144  f24f70ff          MOV      r0,#0xf7ff
000148  4006              ANDS     r6,r6,r0
;;;487        /* Set the Output N Polarity */
;;;488        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
00014a  8960              LDRH     r0,[r4,#0xa]
00014c  f64f71ff          MOV      r1,#0xffff
000150  ea012000          AND      r0,r1,r0,LSL #8
000154  4306              ORRS     r6,r6,r0
;;;489        /* Reset the Output N State */
;;;490        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
000156  f64f30ff          MOV      r0,#0xfbff
00015a  4006              ANDS     r6,r6,r0
;;;491        
;;;492        /* Set the Output N State */
;;;493        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
00015c  88a0              LDRH     r0,[r4,#4]
00015e  ea012000          AND      r0,r1,r0,LSL #8
000162  4306              ORRS     r6,r6,r0
;;;494        /* Reset the Output Compare and Output Compare N IDLE State */
;;;495        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
000164  f64e70ff          MOV      r0,#0xefff
000168  4007              ANDS     r7,r7,r0
;;;496        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
00016a  f64d70ff          MOV      r0,#0xdfff
00016e  4007              ANDS     r7,r7,r0
;;;497        /* Set the Output Idle state */
;;;498        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
000170  89a0              LDRH     r0,[r4,#0xc]
000172  ea011000          AND      r0,r1,r0,LSL #4
000176  4307              ORRS     r7,r7,r0
;;;499        /* Set the Output N Idle state */
;;;500        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
000178  89e0              LDRH     r0,[r4,#0xe]
00017a  ea011000          AND      r0,r1,r0,LSL #4
00017e  4307              ORRS     r7,r7,r0
                  |L56.384|
;;;501      }
;;;502      /* Write to TIMx CR2 */
;;;503      TIMx->CR2 = tmpcr2;
000180  80af              STRH     r7,[r5,#4]
;;;504      
;;;505      /* Write to TIMx CCMR2 */
;;;506      TIMx->CCMR2 = tmpccmrx;
000182  f8a5801c          STRH     r8,[r5,#0x1c]
;;;507    
;;;508      /* Set the Capture Compare Register value */
;;;509      TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
000186  88e0              LDRH     r0,[r4,#6]
000188  87a8              STRH     r0,[r5,#0x3c]
;;;510      
;;;511      /* Write to TIMx CCER */
;;;512      TIMx->CCER = tmpccer;
00018a  842e              STRH     r6,[r5,#0x20]
;;;513    }
00018c  e8bd81f0          POP      {r4-r8,pc}
;;;514    
                          ENDP

                  |L56.400|
                          DCD      0x40012c00
                  |L56.404|
                          DCD      0x40000400
                  |L56.408|
                          DCD      0x40000800
                  |L56.412|
                          DCD      0x40000c00
                  |L56.416|
                          DCD      0x40013400

                          AREA ||i.TIM_OC3NPolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC3NPolarityConfig PROC
;;;1921     */
;;;1922   void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1923   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1924     uint16_t tmpccer = 0;
000006  2600              MOVS     r6,#0
;;;1925    
;;;1926     /* Check the parameters */
;;;1927     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000008  490f              LDR      r1,|L57.72|
00000a  428c              CMP      r4,r1
00000c  d002              BEQ      |L57.20|
00000e  490f              LDR      r1,|L57.76|
000010  428c              CMP      r4,r1
000012  d101              BNE      |L57.24|
                  |L57.20|
000014  2101              MOVS     r1,#1
000016  e000              B        |L57.26|
                  |L57.24|
000018  2100              MOVS     r1,#0
                  |L57.26|
00001a  4608              MOV      r0,r1
00001c  f7fffffe          BL       assert_param
;;;1928     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
000020  b10d              CBZ      r5,|L57.38|
000022  2d08              CMP      r5,#8
000024  d101              BNE      |L57.42|
                  |L57.38|
000026  2101              MOVS     r1,#1
000028  e000              B        |L57.44|
                  |L57.42|
00002a  2100              MOVS     r1,#0
                  |L57.44|
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       assert_param
;;;1929       
;;;1930     tmpccer = TIMx->CCER;
000032  8c26              LDRH     r6,[r4,#0x20]
;;;1931     /* Set or Reset the CC3NP Bit */
;;;1932     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
000034  f24f70ff          MOV      r0,#0xf7ff
000038  4006              ANDS     r6,r6,r0
;;;1933     tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
00003a  f64f70ff          MOV      r0,#0xffff
00003e  ea002005          AND      r0,r0,r5,LSL #8
000042  4306              ORRS     r6,r6,r0
;;;1934     /* Write to TIMx CCER register */
;;;1935     TIMx->CCER = tmpccer;
000044  8426              STRH     r6,[r4,#0x20]
;;;1936   }
000046  bd70              POP      {r4-r6,pc}
;;;1937   
                          ENDP

                  |L57.72|
                          DCD      0x40012c00
                  |L57.76|
                          DCD      0x40013400

                          AREA ||i.TIM_OC3PolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC3PolarityConfig PROC
;;;1898     */
;;;1899   void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1900   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1901     uint16_t tmpccer = 0;
000006  2600              MOVS     r6,#0
;;;1902     /* Check the parameters */
;;;1903     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4915              LDR      r1,|L58.96|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L58.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L58.44|
000014  4913              LDR      r1,|L58.100|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L58.44|
00001a  4913              LDR      r1,|L58.104|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L58.44|
000020  4912              LDR      r1,|L58.108|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L58.44|
000026  4912              LDR      r1,|L58.112|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L58.48|
                  |L58.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L58.50|
                  |L58.48|
000030  2100              MOVS     r1,#0
                  |L58.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1904     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
000038  b10d              CBZ      r5,|L58.62|
00003a  2d02              CMP      r5,#2
00003c  d101              BNE      |L58.66|
                  |L58.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L58.68|
                  |L58.66|
000042  2100              MOVS     r1,#0
                  |L58.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1905     tmpccer = TIMx->CCER;
00004a  8c26              LDRH     r6,[r4,#0x20]
;;;1906     /* Set or Reset the CC3P Bit */
;;;1907     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
00004c  f64f50ff          MOV      r0,#0xfdff
000050  4006              ANDS     r6,r6,r0
;;;1908     tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
000052  f64f70ff          MOV      r0,#0xffff
000056  ea002005          AND      r0,r0,r5,LSL #8
00005a  4306              ORRS     r6,r6,r0
;;;1909     /* Write to TIMx CCER register */
;;;1910     TIMx->CCER = tmpccer;
00005c  8426              STRH     r6,[r4,#0x20]
;;;1911   }
00005e  bd70              POP      {r4-r6,pc}
;;;1912   
                          ENDP

                  |L58.96|
                          DCD      0x40012c00
                  |L58.100|
                          DCD      0x40000400
                  |L58.104|
                          DCD      0x40000800
                  |L58.108|
                          DCD      0x40000c00
                  |L58.112|
                          DCD      0x40013400

                          AREA ||i.TIM_OC3PreloadConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC3PreloadConfig PROC
;;;1557     */
;;;1558   void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  b570              PUSH     {r4-r6,lr}
;;;1559   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1560     uint16_t tmpccmr2 = 0;
000006  2600              MOVS     r6,#0
;;;1561     /* Check the parameters */
;;;1562     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4913              LDR      r1,|L59.88|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L59.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L59.44|
000014  4911              LDR      r1,|L59.92|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L59.44|
00001a  4911              LDR      r1,|L59.96|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L59.44|
000020  4910              LDR      r1,|L59.100|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L59.44|
000026  4910              LDR      r1,|L59.104|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L59.48|
                  |L59.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L59.50|
                  |L59.48|
000030  2100              MOVS     r1,#0
                  |L59.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1563     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
000038  2d08              CMP      r5,#8
00003a  d000              BEQ      |L59.62|
00003c  b90d              CBNZ     r5,|L59.66|
                  |L59.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L59.68|
                  |L59.66|
000042  2100              MOVS     r1,#0
                  |L59.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1564     tmpccmr2 = TIMx->CCMR2;
00004a  8ba6              LDRH     r6,[r4,#0x1c]
;;;1565     /* Reset the OC3PE Bit */
;;;1566     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
00004c  f64f70f7          MOV      r0,#0xfff7
000050  4006              ANDS     r6,r6,r0
;;;1567     /* Enable or Disable the Output Compare Preload feature */
;;;1568     tmpccmr2 |= TIM_OCPreload;
000052  432e              ORRS     r6,r6,r5
;;;1569     /* Write to TIMx CCMR2 register */
;;;1570     TIMx->CCMR2 = tmpccmr2;
000054  83a6              STRH     r6,[r4,#0x1c]
;;;1571   }
000056  bd70              POP      {r4-r6,pc}
;;;1572   
                          ENDP

                  |L59.88|
                          DCD      0x40012c00
                  |L59.92|
                          DCD      0x40000400
                  |L59.96|
                          DCD      0x40000800
                  |L59.100|
                          DCD      0x40000c00
                  |L59.104|
                          DCD      0x40013400

                          AREA ||i.TIM_OC4FastConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC4FastConfig PROC
;;;1681     */
;;;1682   void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  b570              PUSH     {r4-r6,lr}
;;;1683   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1684     uint16_t tmpccmr2 = 0;
000006  2600              MOVS     r6,#0
;;;1685     /* Check the parameters */
;;;1686     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4915              LDR      r1,|L60.96|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L60.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L60.44|
000014  4913              LDR      r1,|L60.100|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L60.44|
00001a  4913              LDR      r1,|L60.104|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L60.44|
000020  4912              LDR      r1,|L60.108|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L60.44|
000026  4912              LDR      r1,|L60.112|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L60.48|
                  |L60.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L60.50|
                  |L60.48|
000030  2100              MOVS     r1,#0
                  |L60.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1687     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
000038  2d04              CMP      r5,#4
00003a  d000              BEQ      |L60.62|
00003c  b90d              CBNZ     r5,|L60.66|
                  |L60.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L60.68|
                  |L60.66|
000042  2100              MOVS     r1,#0
                  |L60.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1688     /* Get the TIMx CCMR2 register value */
;;;1689     tmpccmr2 = TIMx->CCMR2;
00004a  8ba6              LDRH     r6,[r4,#0x1c]
;;;1690     /* Reset the OC4FE Bit */
;;;1691     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
00004c  f64f30ff          MOV      r0,#0xfbff
000050  4006              ANDS     r6,r6,r0
;;;1692     /* Enable or Disable the Output Compare Fast Bit */
;;;1693     tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
000052  f64f70ff          MOV      r0,#0xffff
000056  ea002005          AND      r0,r0,r5,LSL #8
00005a  4306              ORRS     r6,r6,r0
;;;1694     /* Write to TIMx CCMR2 */
;;;1695     TIMx->CCMR2 = tmpccmr2;
00005c  83a6              STRH     r6,[r4,#0x1c]
;;;1696   }
00005e  bd70              POP      {r4-r6,pc}
;;;1697   
                          ENDP

                  |L60.96|
                          DCD      0x40012c00
                  |L60.100|
                          DCD      0x40000400
                  |L60.104|
                          DCD      0x40000800
                  |L60.108|
                          DCD      0x40000c00
                  |L60.112|
                          DCD      0x40013400

                          AREA ||i.TIM_OC4Init||, CODE, READONLY, ALIGN=2

                  TIM_OC4Init PROC
;;;522      */
;;;523    void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;524    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;525      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
000008  2600              MOVS     r6,#0
00000a  2700              MOVS     r7,#0
00000c  46b0              MOV      r8,r6
;;;526       
;;;527      /* Check the parameters */
;;;528      assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
00000e  4945              LDR      r1,|L61.292|
000010  428c              CMP      r4,r1
000012  d00e              BEQ      |L61.50|
000014  f1b44f80          CMP      r4,#0x40000000
000018  d00b              BEQ      |L61.50|
00001a  4943              LDR      r1,|L61.296|
00001c  428c              CMP      r4,r1
00001e  d008              BEQ      |L61.50|
000020  4942              LDR      r1,|L61.300|
000022  428c              CMP      r4,r1
000024  d005              BEQ      |L61.50|
000026  4942              LDR      r1,|L61.304|
000028  428c              CMP      r4,r1
00002a  d002              BEQ      |L61.50|
00002c  4941              LDR      r1,|L61.308|
00002e  428c              CMP      r4,r1
000030  d101              BNE      |L61.54|
                  |L61.50|
000032  2101              MOVS     r1,#1
000034  e000              B        |L61.56|
                  |L61.54|
000036  2100              MOVS     r1,#0
                  |L61.56|
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       assert_param
;;;529      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
00003e  8829              LDRH     r1,[r5,#0]
000040  b171              CBZ      r1,|L61.96|
000042  8829              LDRH     r1,[r5,#0]
000044  2910              CMP      r1,#0x10
000046  d00b              BEQ      |L61.96|
000048  8829              LDRH     r1,[r5,#0]
00004a  2920              CMP      r1,#0x20
00004c  d008              BEQ      |L61.96|
00004e  8829              LDRH     r1,[r5,#0]
000050  2930              CMP      r1,#0x30
000052  d005              BEQ      |L61.96|
000054  8829              LDRH     r1,[r5,#0]
000056  2960              CMP      r1,#0x60
000058  d002              BEQ      |L61.96|
00005a  8829              LDRH     r1,[r5,#0]
00005c  2970              CMP      r1,#0x70
00005e  d101              BNE      |L61.100|
                  |L61.96|
000060  2101              MOVS     r1,#1
000062  e000              B        |L61.102|
                  |L61.100|
000064  2100              MOVS     r1,#0
                  |L61.102|
000066  4608              MOV      r0,r1
000068  f7fffffe          BL       assert_param
;;;530      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
00006c  8869              LDRH     r1,[r5,#2]
00006e  b111              CBZ      r1,|L61.118|
000070  8869              LDRH     r1,[r5,#2]
000072  2901              CMP      r1,#1
000074  d101              BNE      |L61.122|
                  |L61.118|
000076  2101              MOVS     r1,#1
000078  e000              B        |L61.124|
                  |L61.122|
00007a  2100              MOVS     r1,#0
                  |L61.124|
00007c  4608              MOV      r0,r1
00007e  f7fffffe          BL       assert_param
;;;531      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
000082  8929              LDRH     r1,[r5,#8]
000084  b111              CBZ      r1,|L61.140|
000086  8929              LDRH     r1,[r5,#8]
000088  2902              CMP      r1,#2
00008a  d101              BNE      |L61.144|
                  |L61.140|
00008c  2101              MOVS     r1,#1
00008e  e000              B        |L61.146|
                  |L61.144|
000090  2100              MOVS     r1,#0
                  |L61.146|
000092  4608              MOV      r0,r1
000094  f7fffffe          BL       assert_param
;;;532      /* Disable the Channel 2: Reset the CC4E Bit */
;;;533      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
000098  8c20              LDRH     r0,[r4,#0x20]
00009a  f64e71ff          MOV      r1,#0xefff
00009e  4008              ANDS     r0,r0,r1
0000a0  8420              STRH     r0,[r4,#0x20]
;;;534      
;;;535      /* Get the TIMx CCER register value */
;;;536      tmpccer = TIMx->CCER;
0000a2  8c27              LDRH     r7,[r4,#0x20]
;;;537      /* Get the TIMx CR2 register value */
;;;538      tmpcr2 =  TIMx->CR2;
0000a4  f8b48004          LDRH     r8,[r4,#4]
;;;539      
;;;540      /* Get the TIMx CCMR2 register value */
;;;541      tmpccmrx = TIMx->CCMR2;
0000a8  8ba6              LDRH     r6,[r4,#0x1c]
;;;542        
;;;543      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;544      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
0000aa  f64870ff          MOV      r0,#0x8fff
0000ae  4006              ANDS     r6,r6,r0
;;;545      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
0000b0  f64f40ff          MOV      r0,#0xfcff
0000b4  4006              ANDS     r6,r6,r0
;;;546      
;;;547      /* Select the Output Compare Mode */
;;;548      tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
0000b6  8828              LDRH     r0,[r5,#0]
0000b8  f64f71ff          MOV      r1,#0xffff
0000bc  ea012000          AND      r0,r1,r0,LSL #8
0000c0  4306              ORRS     r6,r6,r0
;;;549      
;;;550      /* Reset the Output Polarity level */
;;;551      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
0000c2  f64d70ff          MOV      r0,#0xdfff
0000c6  4007              ANDS     r7,r7,r0
;;;552      /* Set the Output Compare Polarity */
;;;553      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
0000c8  8928              LDRH     r0,[r5,#8]
0000ca  ea013000          AND      r0,r1,r0,LSL #12
0000ce  4307              ORRS     r7,r7,r0
;;;554      
;;;555      /* Set the Output State */
;;;556      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
0000d0  8868              LDRH     r0,[r5,#2]
0000d2  ea013000          AND      r0,r1,r0,LSL #12
0000d6  4307              ORRS     r7,r7,r0
;;;557        
;;;558      if((TIMx == TIM1) || (TIMx == TIM8))
0000d8  4812              LDR      r0,|L61.292|
0000da  4284              CMP      r4,r0
0000dc  d002              BEQ      |L61.228|
0000de  4815              LDR      r0,|L61.308|
0000e0  4284              CMP      r4,r0
0000e2  d116              BNE      |L61.274|
                  |L61.228|
;;;559      {
;;;560        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
0000e4  89a9              LDRH     r1,[r5,#0xc]
0000e6  f5b17f80          CMP      r1,#0x100
0000ea  d001              BEQ      |L61.240|
0000ec  89a9              LDRH     r1,[r5,#0xc]
0000ee  b909              CBNZ     r1,|L61.244|
                  |L61.240|
0000f0  2101              MOVS     r1,#1
0000f2  e000              B        |L61.246|
                  |L61.244|
0000f4  2100              MOVS     r1,#0
                  |L61.246|
0000f6  4608              MOV      r0,r1
0000f8  f7fffffe          BL       assert_param
;;;561        /* Reset the Output Compare IDLE State */
;;;562        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
0000fc  f64b70ff          MOV      r0,#0xbfff
000100  ea080800          AND      r8,r8,r0
;;;563        /* Set the Output Idle state */
;;;564        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
000104  89a8              LDRH     r0,[r5,#0xc]
000106  f64f71ff          MOV      r1,#0xffff
00010a  ea011080          AND      r0,r1,r0,LSL #6
00010e  ea400808          ORR      r8,r0,r8
                  |L61.274|
;;;565      }
;;;566      /* Write to TIMx CR2 */
;;;567      TIMx->CR2 = tmpcr2;
000112  f8a48004          STRH     r8,[r4,#4]
;;;568      
;;;569      /* Write to TIMx CCMR2 */  
;;;570      TIMx->CCMR2 = tmpccmrx;
000116  83a6              STRH     r6,[r4,#0x1c]
;;;571    
;;;572      /* Set the Capture Compare Register value */
;;;573      TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
000118  88e8              LDRH     r0,[r5,#6]
00011a  f8a40040          STRH     r0,[r4,#0x40]
;;;574      
;;;575      /* Write to TIMx CCER */
;;;576      TIMx->CCER = tmpccer;
00011e  8427              STRH     r7,[r4,#0x20]
;;;577    }
000120  e8bd81f0          POP      {r4-r8,pc}
;;;578    
                          ENDP

                  |L61.292|
                          DCD      0x40012c00
                  |L61.296|
                          DCD      0x40000400
                  |L61.300|
                          DCD      0x40000800
                  |L61.304|
                          DCD      0x40000c00
                  |L61.308|
                          DCD      0x40013400

                          AREA ||i.TIM_OC4PolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC4PolarityConfig PROC
;;;1946     */
;;;1947   void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1948   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1949     uint16_t tmpccer = 0;
000006  2600              MOVS     r6,#0
;;;1950     /* Check the parameters */
;;;1951     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4915              LDR      r1,|L62.96|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L62.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L62.44|
000014  4913              LDR      r1,|L62.100|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L62.44|
00001a  4913              LDR      r1,|L62.104|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L62.44|
000020  4912              LDR      r1,|L62.108|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L62.44|
000026  4912              LDR      r1,|L62.112|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L62.48|
                  |L62.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L62.50|
                  |L62.48|
000030  2100              MOVS     r1,#0
                  |L62.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1952     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
000038  b10d              CBZ      r5,|L62.62|
00003a  2d02              CMP      r5,#2
00003c  d101              BNE      |L62.66|
                  |L62.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L62.68|
                  |L62.66|
000042  2100              MOVS     r1,#0
                  |L62.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1953     tmpccer = TIMx->CCER;
00004a  8c26              LDRH     r6,[r4,#0x20]
;;;1954     /* Set or Reset the CC4P Bit */
;;;1955     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
00004c  f64d70ff          MOV      r0,#0xdfff
000050  4006              ANDS     r6,r6,r0
;;;1956     tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
000052  f64f70ff          MOV      r0,#0xffff
000056  ea003005          AND      r0,r0,r5,LSL #12
00005a  4306              ORRS     r6,r6,r0
;;;1957     /* Write to TIMx CCER register */
;;;1958     TIMx->CCER = tmpccer;
00005c  8426              STRH     r6,[r4,#0x20]
;;;1959   }
00005e  bd70              POP      {r4-r6,pc}
;;;1960   
                          ENDP

                  |L62.96|
                          DCD      0x40012c00
                  |L62.100|
                          DCD      0x40000400
                  |L62.104|
                          DCD      0x40000800
                  |L62.108|
                          DCD      0x40000c00
                  |L62.112|
                          DCD      0x40013400

                          AREA ||i.TIM_OC4PreloadConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC4PreloadConfig PROC
;;;1581     */
;;;1582   void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  b570              PUSH     {r4-r6,lr}
;;;1583   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1584     uint16_t tmpccmr2 = 0;
000006  2600              MOVS     r6,#0
;;;1585     /* Check the parameters */
;;;1586     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000008  4915              LDR      r1,|L63.96|
00000a  428c              CMP      r4,r1
00000c  d00e              BEQ      |L63.44|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d00b              BEQ      |L63.44|
000014  4913              LDR      r1,|L63.100|
000016  428c              CMP      r4,r1
000018  d008              BEQ      |L63.44|
00001a  4913              LDR      r1,|L63.104|
00001c  428c              CMP      r4,r1
00001e  d005              BEQ      |L63.44|
000020  4912              LDR      r1,|L63.108|
000022  428c              CMP      r4,r1
000024  d002              BEQ      |L63.44|
000026  4912              LDR      r1,|L63.112|
000028  428c              CMP      r4,r1
00002a  d101              BNE      |L63.48|
                  |L63.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L63.50|
                  |L63.48|
000030  2100              MOVS     r1,#0
                  |L63.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;1587     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
000038  2d08              CMP      r5,#8
00003a  d000              BEQ      |L63.62|
00003c  b90d              CBNZ     r5,|L63.66|
                  |L63.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L63.68|
                  |L63.66|
000042  2100              MOVS     r1,#0
                  |L63.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1588     tmpccmr2 = TIMx->CCMR2;
00004a  8ba6              LDRH     r6,[r4,#0x1c]
;;;1589     /* Reset the OC4PE Bit */
;;;1590     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
00004c  f24f70ff          MOV      r0,#0xf7ff
000050  4006              ANDS     r6,r6,r0
;;;1591     /* Enable or Disable the Output Compare Preload feature */
;;;1592     tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
000052  f64f70ff          MOV      r0,#0xffff
000056  ea002005          AND      r0,r0,r5,LSL #8
00005a  4306              ORRS     r6,r6,r0
;;;1593     /* Write to TIMx CCMR2 register */
;;;1594     TIMx->CCMR2 = tmpccmr2;
00005c  83a6              STRH     r6,[r4,#0x1c]
;;;1595   }
00005e  bd70              POP      {r4-r6,pc}
;;;1596   
                          ENDP

                  |L63.96|
                          DCD      0x40012c00
                  |L63.100|
                          DCD      0x40000400
                  |L63.104|
                          DCD      0x40000800
                  |L63.108|
                          DCD      0x40000c00
                  |L63.112|
                          DCD      0x40013400

                          AREA ||i.TIM_OCStructInit||, CODE, READONLY, ALIGN=1

                  TIM_OCStructInit PROC
;;;751      */
;;;752    void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  2100              MOVS     r1,#0
;;;753    {
;;;754      /* Set the default configuration */
;;;755      TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
000002  8001              STRH     r1,[r0,#0]
;;;756      TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
000004  8041              STRH     r1,[r0,#2]
;;;757      TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
000006  8081              STRH     r1,[r0,#4]
;;;758      TIM_OCInitStruct->TIM_Pulse = 0x0000;
000008  80c1              STRH     r1,[r0,#6]
;;;759      TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
00000a  8101              STRH     r1,[r0,#8]
;;;760      TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
00000c  8141              STRH     r1,[r0,#0xa]
;;;761      TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
00000e  8181              STRH     r1,[r0,#0xc]
;;;762      TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
000010  81c1              STRH     r1,[r0,#0xe]
;;;763    }
000012  4770              BX       lr
;;;764    
                          ENDP


                          AREA ||i.TIM_PWMIConfig||, CODE, READONLY, ALIGN=2

                  TIM_PWMIConfig PROC
;;;653      */
;;;654    void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;655    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;656      uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
000008  2600              MOVS     r6,#0
;;;657      uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
00000a  2701              MOVS     r7,#1
;;;658      /* Check the parameters */
;;;659      assert_param(IS_TIM_LIST6_PERIPH(TIMx));
00000c  492c              LDR      r1,|L65.192|
00000e  428d              CMP      r5,r1
000010  d017              BEQ      |L65.66|
000012  f1b54f80          CMP      r5,#0x40000000
000016  d014              BEQ      |L65.66|
000018  492a              LDR      r1,|L65.196|
00001a  428d              CMP      r5,r1
00001c  d011              BEQ      |L65.66|
00001e  492a              LDR      r1,|L65.200|
000020  428d              CMP      r5,r1
000022  d00e              BEQ      |L65.66|
000024  4929              LDR      r1,|L65.204|
000026  428d              CMP      r5,r1
000028  d00b              BEQ      |L65.66|
00002a  4929              LDR      r1,|L65.208|
00002c  428d              CMP      r5,r1
00002e  d008              BEQ      |L65.66|
000030  4928              LDR      r1,|L65.212|
000032  428d              CMP      r5,r1
000034  d005              BEQ      |L65.66|
000036  4928              LDR      r1,|L65.216|
000038  428d              CMP      r5,r1
00003a  d002              BEQ      |L65.66|
00003c  4927              LDR      r1,|L65.220|
00003e  428d              CMP      r5,r1
000040  d101              BNE      |L65.70|
                  |L65.66|
000042  2101              MOVS     r1,#1
000044  e000              B        |L65.72|
                  |L65.70|
000046  2100              MOVS     r1,#0
                  |L65.72|
000048  4608              MOV      r0,r1
00004a  f7fffffe          BL       assert_param
;;;660      /* Select the Opposite Input Polarity */
;;;661      if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
00004e  8860              LDRH     r0,[r4,#2]
000050  b908              CBNZ     r0,|L65.86|
;;;662      {
;;;663        icoppositepolarity = TIM_ICPolarity_Falling;
000052  2602              MOVS     r6,#2
000054  e000              B        |L65.88|
                  |L65.86|
;;;664      }
;;;665      else
;;;666      {
;;;667        icoppositepolarity = TIM_ICPolarity_Rising;
000056  2600              MOVS     r6,#0
                  |L65.88|
;;;668      }
;;;669      /* Select the Opposite Input */
;;;670      if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
000058  88a0              LDRH     r0,[r4,#4]
00005a  2801              CMP      r0,#1
00005c  d101              BNE      |L65.98|
;;;671      {
;;;672        icoppositeselection = TIM_ICSelection_IndirectTI;
00005e  2702              MOVS     r7,#2
000060  e000              B        |L65.100|
                  |L65.98|
;;;673      }
;;;674      else
;;;675      {
;;;676        icoppositeselection = TIM_ICSelection_DirectTI;
000062  2701              MOVS     r7,#1
                  |L65.100|
;;;677      }
;;;678      if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
000064  8820              LDRH     r0,[r4,#0]
000066  b9a0              CBNZ     r0,|L65.146|
;;;679      {
;;;680        /* TI1 Configuration */
;;;681        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
000068  8923              LDRH     r3,[r4,#8]
00006a  88a2              LDRH     r2,[r4,#4]
00006c  8861              LDRH     r1,[r4,#2]
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       TI1_Config
;;;682                   TIM_ICInitStruct->TIM_ICFilter);
;;;683        /* Set the Input Capture Prescaler value */
;;;684        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000074  88e1              LDRH     r1,[r4,#6]
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       TIM_SetIC1Prescaler
;;;685        /* TI2 Configuration */
;;;686        TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
00007c  8923              LDRH     r3,[r4,#8]
00007e  463a              MOV      r2,r7
000080  4631              MOV      r1,r6
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       TI2_Config
;;;687        /* Set the Input Capture Prescaler value */
;;;688        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000088  88e1              LDRH     r1,[r4,#6]
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       TIM_SetIC2Prescaler
000090  e013              B        |L65.186|
                  |L65.146|
;;;689      }
;;;690      else
;;;691      { 
;;;692        /* TI2 Configuration */
;;;693        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
000092  8923              LDRH     r3,[r4,#8]
000094  88a2              LDRH     r2,[r4,#4]
000096  8861              LDRH     r1,[r4,#2]
000098  4628              MOV      r0,r5
00009a  f7fffffe          BL       TI2_Config
;;;694                   TIM_ICInitStruct->TIM_ICFilter);
;;;695        /* Set the Input Capture Prescaler value */
;;;696        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
00009e  88e1              LDRH     r1,[r4,#6]
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       TIM_SetIC2Prescaler
;;;697        /* TI1 Configuration */
;;;698        TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
0000a6  8923              LDRH     r3,[r4,#8]
0000a8  463a              MOV      r2,r7
0000aa  4631              MOV      r1,r6
0000ac  4628              MOV      r0,r5
0000ae  f7fffffe          BL       TI1_Config
;;;699        /* Set the Input Capture Prescaler value */
;;;700        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
0000b2  88e1              LDRH     r1,[r4,#6]
0000b4  4628              MOV      r0,r5
0000b6  f7fffffe          BL       TIM_SetIC1Prescaler
                  |L65.186|
;;;701      }
;;;702    }
0000ba  e8bd81f0          POP      {r4-r8,pc}
;;;703    
                          ENDP

0000be  0000              DCW      0x0000
                  |L65.192|
                          DCD      0x40012c00
                  |L65.196|
                          DCD      0x40000400
                  |L65.200|
                          DCD      0x40000800
                  |L65.204|
                          DCD      0x40000c00
                  |L65.208|
                          DCD      0x40013400
                  |L65.212|
                          DCD      0x40014c00
                  |L65.216|
                          DCD      0x40001800
                  |L65.220|
                          DCD      0x40014000

                          AREA ||i.TIM_PrescalerConfig||, CODE, READONLY, ALIGN=2

                  TIM_PrescalerConfig PROC
;;;1175     */
;;;1176   void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
000000  b570              PUSH     {r4-r6,lr}
;;;1177   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1178     /* Check the parameters */
;;;1179     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000008  4922              LDR      r1,|L66.148|
00000a  428c              CMP      r4,r1
00000c  d02f              BEQ      |L66.110|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d02c              BEQ      |L66.110|
000014  4920              LDR      r1,|L66.152|
000016  428c              CMP      r4,r1
000018  d029              BEQ      |L66.110|
00001a  4920              LDR      r1,|L66.156|
00001c  428c              CMP      r4,r1
00001e  d026              BEQ      |L66.110|
000020  491f              LDR      r1,|L66.160|
000022  428c              CMP      r4,r1
000024  d023              BEQ      |L66.110|
000026  491f              LDR      r1,|L66.164|
000028  428c              CMP      r4,r1
00002a  d020              BEQ      |L66.110|
00002c  491e              LDR      r1,|L66.168|
00002e  428c              CMP      r4,r1
000030  d01d              BEQ      |L66.110|
000032  491e              LDR      r1,|L66.172|
000034  428c              CMP      r4,r1
000036  d01a              BEQ      |L66.110|
000038  491d              LDR      r1,|L66.176|
00003a  428c              CMP      r4,r1
00003c  d017              BEQ      |L66.110|
00003e  491d              LDR      r1,|L66.180|
000040  428c              CMP      r4,r1
000042  d014              BEQ      |L66.110|
000044  491c              LDR      r1,|L66.184|
000046  428c              CMP      r4,r1
000048  d011              BEQ      |L66.110|
00004a  491c              LDR      r1,|L66.188|
00004c  428c              CMP      r4,r1
00004e  d00e              BEQ      |L66.110|
000050  491b              LDR      r1,|L66.192|
000052  428c              CMP      r4,r1
000054  d00b              BEQ      |L66.110|
000056  491b              LDR      r1,|L66.196|
000058  428c              CMP      r4,r1
00005a  d008              BEQ      |L66.110|
00005c  491a              LDR      r1,|L66.200|
00005e  428c              CMP      r4,r1
000060  d005              BEQ      |L66.110|
000062  491a              LDR      r1,|L66.204|
000064  428c              CMP      r4,r1
000066  d002              BEQ      |L66.110|
000068  4919              LDR      r1,|L66.208|
00006a  428c              CMP      r4,r1
00006c  d101              BNE      |L66.114|
                  |L66.110|
00006e  2101              MOVS     r1,#1
000070  e000              B        |L66.116|
                  |L66.114|
000072  2100              MOVS     r1,#0
                  |L66.116|
000074  4608              MOV      r0,r1
000076  f7fffffe          BL       assert_param
;;;1180     assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
00007a  b10d              CBZ      r5,|L66.128|
00007c  2d01              CMP      r5,#1
00007e  d101              BNE      |L66.132|
                  |L66.128|
000080  2101              MOVS     r1,#1
000082  e000              B        |L66.134|
                  |L66.132|
000084  2100              MOVS     r1,#0
                  |L66.134|
000086  4608              MOV      r0,r1
000088  f7fffffe          BL       assert_param
;;;1181     /* Set the Prescaler value */
;;;1182     TIMx->PSC = Prescaler;
00008c  8526              STRH     r6,[r4,#0x28]
;;;1183     /* Set or reset the UG Bit */
;;;1184     TIMx->EGR = TIM_PSCReloadMode;
00008e  82a5              STRH     r5,[r4,#0x14]
;;;1185   }
000090  bd70              POP      {r4-r6,pc}
;;;1186   
                          ENDP

000092  0000              DCW      0x0000
                  |L66.148|
                          DCD      0x40012c00
                  |L66.152|
                          DCD      0x40000400
                  |L66.156|
                          DCD      0x40000800
                  |L66.160|
                          DCD      0x40000c00
                  |L66.164|
                          DCD      0x40001000
                  |L66.168|
                          DCD      0x40001400
                  |L66.172|
                          DCD      0x40013400
                  |L66.176|
                          DCD      0x40014c00
                  |L66.180|
                          DCD      0x40015000
                  |L66.184|
                          DCD      0x40015400
                  |L66.188|
                          DCD      0x40001800
                  |L66.192|
                          DCD      0x40001c00
                  |L66.196|
                          DCD      0x40002000
                  |L66.200|
                          DCD      0x40014000
                  |L66.204|
                          DCD      0x40014400
                  |L66.208|
                          DCD      0x40014800

                          AREA ||i.TIM_SelectCCDMA||, CODE, READONLY, ALIGN=2

                  TIM_SelectCCDMA PROC
;;;1457     */
;;;1458   void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;1459   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1460     /* Check the parameters */
;;;1461     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
000006  491b              LDR      r1,|L67.116|
000008  428c              CMP      r4,r1
00000a  d017              BEQ      |L67.60|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d014              BEQ      |L67.60|
000012  4919              LDR      r1,|L67.120|
000014  428c              CMP      r4,r1
000016  d011              BEQ      |L67.60|
000018  4918              LDR      r1,|L67.124|
00001a  428c              CMP      r4,r1
00001c  d00e              BEQ      |L67.60|
00001e  4918              LDR      r1,|L67.128|
000020  428c              CMP      r4,r1
000022  d00b              BEQ      |L67.60|
000024  4917              LDR      r1,|L67.132|
000026  428c              CMP      r4,r1
000028  d008              BEQ      |L67.60|
00002a  4917              LDR      r1,|L67.136|
00002c  428c              CMP      r4,r1
00002e  d005              BEQ      |L67.60|
000030  4916              LDR      r1,|L67.140|
000032  428c              CMP      r4,r1
000034  d002              BEQ      |L67.60|
000036  4916              LDR      r1,|L67.144|
000038  428c              CMP      r4,r1
00003a  d101              BNE      |L67.64|
                  |L67.60|
00003c  2101              MOVS     r1,#1
00003e  e000              B        |L67.66|
                  |L67.64|
000040  2100              MOVS     r1,#0
                  |L67.66|
000042  4608              MOV      r0,r1
000044  f7fffffe          BL       assert_param
;;;1462     assert_param(IS_FUNCTIONAL_STATE(NewState));
000048  b10d              CBZ      r5,|L67.78|
00004a  2d01              CMP      r5,#1
00004c  d101              BNE      |L67.82|
                  |L67.78|
00004e  2101              MOVS     r1,#1
000050  e000              B        |L67.84|
                  |L67.82|
000052  2100              MOVS     r1,#0
                  |L67.84|
000054  4608              MOV      r0,r1
000056  f7fffffe          BL       assert_param
;;;1463     if (NewState != DISABLE)
00005a  b125              CBZ      r5,|L67.102|
;;;1464     {
;;;1465       /* Set the CCDS Bit */
;;;1466       TIMx->CR2 |= TIM_CR2_CCDS;
00005c  88a0              LDRH     r0,[r4,#4]
00005e  f0400008          ORR      r0,r0,#8
000062  80a0              STRH     r0,[r4,#4]
000064  e004              B        |L67.112|
                  |L67.102|
;;;1467     }
;;;1468     else
;;;1469     {
;;;1470       /* Reset the CCDS Bit */
;;;1471       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
000066  88a0              LDRH     r0,[r4,#4]
000068  f64f71f7          MOV      r1,#0xfff7
00006c  4008              ANDS     r0,r0,r1
00006e  80a0              STRH     r0,[r4,#4]
                  |L67.112|
;;;1472     }
;;;1473   }
000070  bd70              POP      {r4-r6,pc}
;;;1474   
                          ENDP

000072  0000              DCW      0x0000
                  |L67.116|
                          DCD      0x40012c00
                  |L67.120|
                          DCD      0x40000400
                  |L67.124|
                          DCD      0x40000800
                  |L67.128|
                          DCD      0x40000c00
                  |L67.132|
                          DCD      0x40013400
                  |L67.136|
                          DCD      0x40014000
                  |L67.140|
                          DCD      0x40014400
                  |L67.144|
                          DCD      0x40014800

                          AREA ||i.TIM_SelectCOM||, CODE, READONLY, ALIGN=2

                  TIM_SelectCOM PROC
;;;1432     */
;;;1433   void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;1434   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1435     /* Check the parameters */
;;;1436     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000006  4915              LDR      r1,|L68.92|
000008  428c              CMP      r4,r1
00000a  d00b              BEQ      |L68.36|
00000c  4914              LDR      r1,|L68.96|
00000e  428c              CMP      r4,r1
000010  d008              BEQ      |L68.36|
000012  4914              LDR      r1,|L68.100|
000014  428c              CMP      r4,r1
000016  d005              BEQ      |L68.36|
000018  4913              LDR      r1,|L68.104|
00001a  428c              CMP      r4,r1
00001c  d002              BEQ      |L68.36|
00001e  4913              LDR      r1,|L68.108|
000020  428c              CMP      r4,r1
000022  d101              BNE      |L68.40|
                  |L68.36|
000024  2101              MOVS     r1,#1
000026  e000              B        |L68.42|
                  |L68.40|
000028  2100              MOVS     r1,#0
                  |L68.42|
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       assert_param
;;;1437     assert_param(IS_FUNCTIONAL_STATE(NewState));
000030  b10d              CBZ      r5,|L68.54|
000032  2d01              CMP      r5,#1
000034  d101              BNE      |L68.58|
                  |L68.54|
000036  2101              MOVS     r1,#1
000038  e000              B        |L68.60|
                  |L68.58|
00003a  2100              MOVS     r1,#0
                  |L68.60|
00003c  4608              MOV      r0,r1
00003e  f7fffffe          BL       assert_param
;;;1438     if (NewState != DISABLE)
000042  b125              CBZ      r5,|L68.78|
;;;1439     {
;;;1440       /* Set the COM Bit */
;;;1441       TIMx->CR2 |= TIM_CR2_CCUS;
000044  88a0              LDRH     r0,[r4,#4]
000046  f0400004          ORR      r0,r0,#4
00004a  80a0              STRH     r0,[r4,#4]
00004c  e004              B        |L68.88|
                  |L68.78|
;;;1442     }
;;;1443     else
;;;1444     {
;;;1445       /* Reset the COM Bit */
;;;1446       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
00004e  88a0              LDRH     r0,[r4,#4]
000050  f64f71fb          MOV      r1,#0xfffb
000054  4008              ANDS     r0,r0,r1
000056  80a0              STRH     r0,[r4,#4]
                  |L68.88|
;;;1447     }
;;;1448   }
000058  bd70              POP      {r4-r6,pc}
;;;1449   
                          ENDP

00005a  0000              DCW      0x0000
                  |L68.92|
                          DCD      0x40012c00
                  |L68.96|
                          DCD      0x40013400
                  |L68.100|
                          DCD      0x40014000
                  |L68.104|
                          DCD      0x40014400
                  |L68.108|
                          DCD      0x40014800

                          AREA ||i.TIM_SelectHallSensor||, CODE, READONLY, ALIGN=2

                  TIM_SelectHallSensor PROC
;;;2143     */
;;;2144   void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;2145   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2146     /* Check the parameters */
;;;2147     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000006  491b              LDR      r1,|L69.116|
000008  428c              CMP      r4,r1
00000a  d017              BEQ      |L69.60|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d014              BEQ      |L69.60|
000012  4919              LDR      r1,|L69.120|
000014  428c              CMP      r4,r1
000016  d011              BEQ      |L69.60|
000018  4918              LDR      r1,|L69.124|
00001a  428c              CMP      r4,r1
00001c  d00e              BEQ      |L69.60|
00001e  4918              LDR      r1,|L69.128|
000020  428c              CMP      r4,r1
000022  d00b              BEQ      |L69.60|
000024  4917              LDR      r1,|L69.132|
000026  428c              CMP      r4,r1
000028  d008              BEQ      |L69.60|
00002a  4917              LDR      r1,|L69.136|
00002c  428c              CMP      r4,r1
00002e  d005              BEQ      |L69.60|
000030  4916              LDR      r1,|L69.140|
000032  428c              CMP      r4,r1
000034  d002              BEQ      |L69.60|
000036  4916              LDR      r1,|L69.144|
000038  428c              CMP      r4,r1
00003a  d101              BNE      |L69.64|
                  |L69.60|
00003c  2101              MOVS     r1,#1
00003e  e000              B        |L69.66|
                  |L69.64|
000040  2100              MOVS     r1,#0
                  |L69.66|
000042  4608              MOV      r0,r1
000044  f7fffffe          BL       assert_param
;;;2148     assert_param(IS_FUNCTIONAL_STATE(NewState));
000048  b10d              CBZ      r5,|L69.78|
00004a  2d01              CMP      r5,#1
00004c  d101              BNE      |L69.82|
                  |L69.78|
00004e  2101              MOVS     r1,#1
000050  e000              B        |L69.84|
                  |L69.82|
000052  2100              MOVS     r1,#0
                  |L69.84|
000054  4608              MOV      r0,r1
000056  f7fffffe          BL       assert_param
;;;2149     if (NewState != DISABLE)
00005a  b125              CBZ      r5,|L69.102|
;;;2150     {
;;;2151       /* Set the TI1S Bit */
;;;2152       TIMx->CR2 |= TIM_CR2_TI1S;
00005c  88a0              LDRH     r0,[r4,#4]
00005e  f0400080          ORR      r0,r0,#0x80
000062  80a0              STRH     r0,[r4,#4]
000064  e004              B        |L69.112|
                  |L69.102|
;;;2153     }
;;;2154     else
;;;2155     {
;;;2156       /* Reset the TI1S Bit */
;;;2157       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
000066  88a0              LDRH     r0,[r4,#4]
000068  f64f717f          MOV      r1,#0xff7f
00006c  4008              ANDS     r0,r0,r1
00006e  80a0              STRH     r0,[r4,#4]
                  |L69.112|
;;;2158     }
;;;2159   }
000070  bd70              POP      {r4-r6,pc}
;;;2160   
                          ENDP

000072  0000              DCW      0x0000
                  |L69.116|
                          DCD      0x40012c00
                  |L69.120|
                          DCD      0x40000400
                  |L69.124|
                          DCD      0x40000800
                  |L69.128|
                          DCD      0x40000c00
                  |L69.132|
                          DCD      0x40013400
                  |L69.136|
                          DCD      0x40014c00
                  |L69.140|
                          DCD      0x40001800
                  |L69.144|
                          DCD      0x40014000

                          AREA ||i.TIM_SelectInputTrigger||, CODE, READONLY, ALIGN=2

                  TIM_SelectInputTrigger PROC
;;;1228     */
;;;1229   void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
000000  b570              PUSH     {r4-r6,lr}
;;;1230   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1231     uint16_t tmpsmcr = 0;
000006  2600              MOVS     r6,#0
;;;1232     /* Check the parameters */
;;;1233     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000008  491e              LDR      r1,|L70.132|
00000a  428c              CMP      r4,r1
00000c  d017              BEQ      |L70.62|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d014              BEQ      |L70.62|
000014  491c              LDR      r1,|L70.136|
000016  428c              CMP      r4,r1
000018  d011              BEQ      |L70.62|
00001a  491c              LDR      r1,|L70.140|
00001c  428c              CMP      r4,r1
00001e  d00e              BEQ      |L70.62|
000020  491b              LDR      r1,|L70.144|
000022  428c              CMP      r4,r1
000024  d00b              BEQ      |L70.62|
000026  491b              LDR      r1,|L70.148|
000028  428c              CMP      r4,r1
00002a  d008              BEQ      |L70.62|
00002c  491a              LDR      r1,|L70.152|
00002e  428c              CMP      r4,r1
000030  d005              BEQ      |L70.62|
000032  491a              LDR      r1,|L70.156|
000034  428c              CMP      r4,r1
000036  d002              BEQ      |L70.62|
000038  4919              LDR      r1,|L70.160|
00003a  428c              CMP      r4,r1
00003c  d101              BNE      |L70.66|
                  |L70.62|
00003e  2101              MOVS     r1,#1
000040  e000              B        |L70.68|
                  |L70.66|
000042  2100              MOVS     r1,#0
                  |L70.68|
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       assert_param
;;;1234     assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
00004a  b16d              CBZ      r5,|L70.104|
00004c  2d10              CMP      r5,#0x10
00004e  d00b              BEQ      |L70.104|
000050  2d20              CMP      r5,#0x20
000052  d009              BEQ      |L70.104|
000054  2d30              CMP      r5,#0x30
000056  d007              BEQ      |L70.104|
000058  2d40              CMP      r5,#0x40
00005a  d005              BEQ      |L70.104|
00005c  2d50              CMP      r5,#0x50
00005e  d003              BEQ      |L70.104|
000060  2d60              CMP      r5,#0x60
000062  d001              BEQ      |L70.104|
000064  2d70              CMP      r5,#0x70
000066  d101              BNE      |L70.108|
                  |L70.104|
000068  2101              MOVS     r1,#1
00006a  e000              B        |L70.110|
                  |L70.108|
00006c  2100              MOVS     r1,#0
                  |L70.110|
00006e  4608              MOV      r0,r1
000070  f7fffffe          BL       assert_param
;;;1235     /* Get the TIMx SMCR register value */
;;;1236     tmpsmcr = TIMx->SMCR;
000074  8926              LDRH     r6,[r4,#8]
;;;1237     /* Reset the TS Bits */
;;;1238     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
000076  f64f708f          MOV      r0,#0xff8f
00007a  4006              ANDS     r6,r6,r0
;;;1239     /* Set the Input Trigger source */
;;;1240     tmpsmcr |= TIM_InputTriggerSource;
00007c  432e              ORRS     r6,r6,r5
;;;1241     /* Write to TIMx SMCR */
;;;1242     TIMx->SMCR = tmpsmcr;
00007e  8126              STRH     r6,[r4,#8]
;;;1243   }
000080  bd70              POP      {r4-r6,pc}
;;;1244   
                          ENDP

000082  0000              DCW      0x0000
                  |L70.132|
                          DCD      0x40012c00
                  |L70.136|
                          DCD      0x40000400
                  |L70.140|
                          DCD      0x40000800
                  |L70.144|
                          DCD      0x40000c00
                  |L70.148|
                          DCD      0x40013400
                  |L70.152|
                          DCD      0x40014c00
                  |L70.156|
                          DCD      0x40001800
                  |L70.160|
                          DCD      0x40014000

                          AREA ||i.TIM_SelectMasterSlaveMode||, CODE, READONLY, ALIGN=2

                  TIM_SelectMasterSlaveMode PROC
;;;2245     */
;;;2246   void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
000000  b570              PUSH     {r4-r6,lr}
;;;2247   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2248     /* Check the parameters */
;;;2249     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000006  4919              LDR      r1,|L71.108|
000008  428c              CMP      r4,r1
00000a  d017              BEQ      |L71.60|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d014              BEQ      |L71.60|
000012  4917              LDR      r1,|L71.112|
000014  428c              CMP      r4,r1
000016  d011              BEQ      |L71.60|
000018  4916              LDR      r1,|L71.116|
00001a  428c              CMP      r4,r1
00001c  d00e              BEQ      |L71.60|
00001e  4916              LDR      r1,|L71.120|
000020  428c              CMP      r4,r1
000022  d00b              BEQ      |L71.60|
000024  4915              LDR      r1,|L71.124|
000026  428c              CMP      r4,r1
000028  d008              BEQ      |L71.60|
00002a  4915              LDR      r1,|L71.128|
00002c  428c              CMP      r4,r1
00002e  d005              BEQ      |L71.60|
000030  4914              LDR      r1,|L71.132|
000032  428c              CMP      r4,r1
000034  d002              BEQ      |L71.60|
000036  4914              LDR      r1,|L71.136|
000038  428c              CMP      r4,r1
00003a  d101              BNE      |L71.64|
                  |L71.60|
00003c  2101              MOVS     r1,#1
00003e  e000              B        |L71.66|
                  |L71.64|
000040  2100              MOVS     r1,#0
                  |L71.66|
000042  4608              MOV      r0,r1
000044  f7fffffe          BL       assert_param
;;;2250     assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
000048  2d80              CMP      r5,#0x80
00004a  d000              BEQ      |L71.78|
00004c  b90d              CBNZ     r5,|L71.82|
                  |L71.78|
00004e  2101              MOVS     r1,#1
000050  e000              B        |L71.84|
                  |L71.82|
000052  2100              MOVS     r1,#0
                  |L71.84|
000054  4608              MOV      r0,r1
000056  f7fffffe          BL       assert_param
;;;2251     /* Reset the MSM Bit */
;;;2252     TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
00005a  8920              LDRH     r0,[r4,#8]
00005c  f64f717f          MOV      r1,#0xff7f
000060  4008              ANDS     r0,r0,r1
000062  8120              STRH     r0,[r4,#8]
;;;2253     
;;;2254     /* Set or Reset the MSM Bit */
;;;2255     TIMx->SMCR |= TIM_MasterSlaveMode;
000064  8920              LDRH     r0,[r4,#8]
000066  4328              ORRS     r0,r0,r5
000068  8120              STRH     r0,[r4,#8]
;;;2256   }
00006a  bd70              POP      {r4-r6,pc}
;;;2257   
                          ENDP

                  |L71.108|
                          DCD      0x40012c00
                  |L71.112|
                          DCD      0x40000400
                  |L71.116|
                          DCD      0x40000800
                  |L71.120|
                          DCD      0x40000c00
                  |L71.124|
                          DCD      0x40013400
                  |L71.128|
                          DCD      0x40014c00
                  |L71.132|
                          DCD      0x40001800
                  |L71.136|
                          DCD      0x40014000

                          AREA ||i.TIM_SelectOCxM||, CODE, READONLY, ALIGN=2

                  TIM_SelectOCxM PROC
;;;2044     */
;;;2045   void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2046   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;2047     uint32_t tmp = 0;
00000a  2600              MOVS     r6,#0
;;;2048     uint16_t tmp1 = 0;
00000c  46b0              MOV      r8,r6
;;;2049   
;;;2050     /* Check the parameters */
;;;2051     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
00000e  493e              LDR      r1,|L72.264|
000010  428c              CMP      r4,r1
000012  d029              BEQ      |L72.104|
000014  f1b44f80          CMP      r4,#0x40000000
000018  d026              BEQ      |L72.104|
00001a  493c              LDR      r1,|L72.268|
00001c  428c              CMP      r4,r1
00001e  d023              BEQ      |L72.104|
000020  493b              LDR      r1,|L72.272|
000022  428c              CMP      r4,r1
000024  d020              BEQ      |L72.104|
000026  493b              LDR      r1,|L72.276|
000028  428c              CMP      r4,r1
00002a  d01d              BEQ      |L72.104|
00002c  493a              LDR      r1,|L72.280|
00002e  428c              CMP      r4,r1
000030  d01a              BEQ      |L72.104|
000032  493a              LDR      r1,|L72.284|
000034  428c              CMP      r4,r1
000036  d017              BEQ      |L72.104|
000038  4939              LDR      r1,|L72.288|
00003a  428c              CMP      r4,r1
00003c  d014              BEQ      |L72.104|
00003e  4939              LDR      r1,|L72.292|
000040  428c              CMP      r4,r1
000042  d011              BEQ      |L72.104|
000044  4938              LDR      r1,|L72.296|
000046  428c              CMP      r4,r1
000048  d00e              BEQ      |L72.104|
00004a  4938              LDR      r1,|L72.300|
00004c  428c              CMP      r4,r1
00004e  d00b              BEQ      |L72.104|
000050  4937              LDR      r1,|L72.304|
000052  428c              CMP      r4,r1
000054  d008              BEQ      |L72.104|
000056  4937              LDR      r1,|L72.308|
000058  428c              CMP      r4,r1
00005a  d005              BEQ      |L72.104|
00005c  4936              LDR      r1,|L72.312|
00005e  428c              CMP      r4,r1
000060  d002              BEQ      |L72.104|
000062  4936              LDR      r1,|L72.316|
000064  428c              CMP      r4,r1
000066  d101              BNE      |L72.108|
                  |L72.104|
000068  2101              MOVS     r1,#1
00006a  e000              B        |L72.110|
                  |L72.108|
00006c  2100              MOVS     r1,#0
                  |L72.110|
00006e  4608              MOV      r0,r1
000070  f7fffffe          BL       assert_param
;;;2052     assert_param(IS_TIM_CHANNEL(TIM_Channel));
000074  b12f              CBZ      r7,|L72.130|
000076  2f04              CMP      r7,#4
000078  d003              BEQ      |L72.130|
00007a  2f08              CMP      r7,#8
00007c  d001              BEQ      |L72.130|
00007e  2f0c              CMP      r7,#0xc
000080  d101              BNE      |L72.134|
                  |L72.130|
000082  2101              MOVS     r1,#1
000084  e000              B        |L72.136|
                  |L72.134|
000086  2100              MOVS     r1,#0
                  |L72.136|
000088  4608              MOV      r0,r1
00008a  f7fffffe          BL       assert_param
;;;2053     assert_param(IS_TIM_OCM(TIM_OCMode));
00008e  b16d              CBZ      r5,|L72.172|
000090  2d10              CMP      r5,#0x10
000092  d00b              BEQ      |L72.172|
000094  2d20              CMP      r5,#0x20
000096  d009              BEQ      |L72.172|
000098  2d30              CMP      r5,#0x30
00009a  d007              BEQ      |L72.172|
00009c  2d60              CMP      r5,#0x60
00009e  d005              BEQ      |L72.172|
0000a0  2d70              CMP      r5,#0x70
0000a2  d003              BEQ      |L72.172|
0000a4  2d50              CMP      r5,#0x50
0000a6  d001              BEQ      |L72.172|
0000a8  2d40              CMP      r5,#0x40
0000aa  d101              BNE      |L72.176|
                  |L72.172|
0000ac  2101              MOVS     r1,#1
0000ae  e000              B        |L72.178|
                  |L72.176|
0000b0  2100              MOVS     r1,#0
                  |L72.178|
0000b2  4608              MOV      r0,r1
0000b4  f7fffffe          BL       assert_param
;;;2054   
;;;2055     tmp = (uint32_t) TIMx;
0000b8  4626              MOV      r6,r4
;;;2056     tmp += CCMR_Offset;
0000ba  3618              ADDS     r6,r6,#0x18
;;;2057   
;;;2058     tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
0000bc  2001              MOVS     r0,#1
0000be  40b8              LSLS     r0,r0,r7
0000c0  fa1ff880          UXTH     r8,r0
;;;2059   
;;;2060     /* Disable the Channel: Reset the CCxE Bit */
;;;2061     TIMx->CCER &= (uint16_t) ~tmp1;
0000c4  8c20              LDRH     r0,[r4,#0x20]
0000c6  ea200008          BIC      r0,r0,r8
0000ca  8420              STRH     r0,[r4,#0x20]
;;;2062   
;;;2063     if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
0000cc  b10f              CBZ      r7,|L72.210|
0000ce  2f08              CMP      r7,#8
0000d0  d109              BNE      |L72.230|
                  |L72.210|
;;;2064     {
;;;2065       tmp += (TIM_Channel>>1);
0000d2  eb060667          ADD      r6,r6,r7,ASR #1
;;;2066   
;;;2067       /* Reset the OCxM bits in the CCMRx register */
;;;2068       *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
0000d6  6830              LDR      r0,[r6,#0]
0000d8  f0200070          BIC      r0,r0,#0x70
0000dc  6030              STR      r0,[r6,#0]
;;;2069      
;;;2070       /* Configure the OCxM bits in the CCMRx register */
;;;2071       *(__IO uint32_t *) tmp |= TIM_OCMode;
0000de  6830              LDR      r0,[r6,#0]
0000e0  4328              ORRS     r0,r0,r5
0000e2  6030              STR      r0,[r6,#0]
0000e4  e00e              B        |L72.260|
                  |L72.230|
;;;2072     }
;;;2073     else
;;;2074     {
;;;2075       tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
0000e6  1f38              SUBS     r0,r7,#4
0000e8  f3c0004e          UBFX     r0,r0,#1,#15
0000ec  4406              ADD      r6,r6,r0
;;;2076   
;;;2077       /* Reset the OCxM bits in the CCMRx register */
;;;2078       *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
0000ee  6830              LDR      r0,[r6,#0]
0000f0  f42040e0          BIC      r0,r0,#0x7000
0000f4  6030              STR      r0,[r6,#0]
;;;2079       
;;;2080       /* Configure the OCxM bits in the CCMRx register */
;;;2081       *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
0000f6  6830              LDR      r0,[r6,#0]
0000f8  f64f71ff          MOV      r1,#0xffff
0000fc  ea012105          AND      r1,r1,r5,LSL #8
000100  4308              ORRS     r0,r0,r1
000102  6030              STR      r0,[r6,#0]
                  |L72.260|
;;;2082     }
;;;2083   }
000104  e8bd81f0          POP      {r4-r8,pc}
;;;2084   
                          ENDP

                  |L72.264|
                          DCD      0x40012c00
                  |L72.268|
                          DCD      0x40000400
                  |L72.272|
                          DCD      0x40000800
                  |L72.276|
                          DCD      0x40000c00
                  |L72.280|
                          DCD      0x40013400
                  |L72.284|
                          DCD      0x40014c00
                  |L72.288|
                          DCD      0x40015000
                  |L72.292|
                          DCD      0x40015400
                  |L72.296|
                          DCD      0x40001800
                  |L72.300|
                          DCD      0x40001c00
                  |L72.304|
                          DCD      0x40002000
                  |L72.308|
                          DCD      0x40014000
                  |L72.312|
                          DCD      0x40014400
                  |L72.316|
                          DCD      0x40014800

                          AREA ||i.TIM_SelectOnePulseMode||, CODE, READONLY, ALIGN=2

                  TIM_SelectOnePulseMode PROC
;;;2169     */
;;;2170   void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
000000  b570              PUSH     {r4-r6,lr}
;;;2171   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2172     /* Check the parameters */
;;;2173     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000006  4925              LDR      r1,|L73.156|
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L73.108|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d02c              BEQ      |L73.108|
000012  4923              LDR      r1,|L73.160|
000014  428c              CMP      r4,r1
000016  d029              BEQ      |L73.108|
000018  4922              LDR      r1,|L73.164|
00001a  428c              CMP      r4,r1
00001c  d026              BEQ      |L73.108|
00001e  4922              LDR      r1,|L73.168|
000020  428c              CMP      r4,r1
000022  d023              BEQ      |L73.108|
000024  4921              LDR      r1,|L73.172|
000026  428c              CMP      r4,r1
000028  d020              BEQ      |L73.108|
00002a  4921              LDR      r1,|L73.176|
00002c  428c              CMP      r4,r1
00002e  d01d              BEQ      |L73.108|
000030  4920              LDR      r1,|L73.180|
000032  428c              CMP      r4,r1
000034  d01a              BEQ      |L73.108|
000036  4920              LDR      r1,|L73.184|
000038  428c              CMP      r4,r1
00003a  d017              BEQ      |L73.108|
00003c  491f              LDR      r1,|L73.188|
00003e  428c              CMP      r4,r1
000040  d014              BEQ      |L73.108|
000042  491f              LDR      r1,|L73.192|
000044  428c              CMP      r4,r1
000046  d011              BEQ      |L73.108|
000048  491e              LDR      r1,|L73.196|
00004a  428c              CMP      r4,r1
00004c  d00e              BEQ      |L73.108|
00004e  491e              LDR      r1,|L73.200|
000050  428c              CMP      r4,r1
000052  d00b              BEQ      |L73.108|
000054  491d              LDR      r1,|L73.204|
000056  428c              CMP      r4,r1
000058  d008              BEQ      |L73.108|
00005a  491d              LDR      r1,|L73.208|
00005c  428c              CMP      r4,r1
00005e  d005              BEQ      |L73.108|
000060  491c              LDR      r1,|L73.212|
000062  428c              CMP      r4,r1
000064  d002              BEQ      |L73.108|
000066  491c              LDR      r1,|L73.216|
000068  428c              CMP      r4,r1
00006a  d101              BNE      |L73.112|
                  |L73.108|
00006c  2101              MOVS     r1,#1
00006e  e000              B        |L73.114|
                  |L73.112|
000070  2100              MOVS     r1,#0
                  |L73.114|
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       assert_param
;;;2174     assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
000078  2d08              CMP      r5,#8
00007a  d000              BEQ      |L73.126|
00007c  b90d              CBNZ     r5,|L73.130|
                  |L73.126|
00007e  2101              MOVS     r1,#1
000080  e000              B        |L73.132|
                  |L73.130|
000082  2100              MOVS     r1,#0
                  |L73.132|
000084  4608              MOV      r0,r1
000086  f7fffffe          BL       assert_param
;;;2175     /* Reset the OPM Bit */
;;;2176     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
00008a  8820              LDRH     r0,[r4,#0]
00008c  f64f71f7          MOV      r1,#0xfff7
000090  4008              ANDS     r0,r0,r1
000092  8020              STRH     r0,[r4,#0]
;;;2177     /* Configure the OPM Mode */
;;;2178     TIMx->CR1 |= TIM_OPMode;
000094  8820              LDRH     r0,[r4,#0]
000096  4328              ORRS     r0,r0,r5
000098  8020              STRH     r0,[r4,#0]
;;;2179   }
00009a  bd70              POP      {r4-r6,pc}
;;;2180   
                          ENDP

                  |L73.156|
                          DCD      0x40012c00
                  |L73.160|
                          DCD      0x40000400
                  |L73.164|
                          DCD      0x40000800
                  |L73.168|
                          DCD      0x40000c00
                  |L73.172|
                          DCD      0x40001000
                  |L73.176|
                          DCD      0x40001400
                  |L73.180|
                          DCD      0x40013400
                  |L73.184|
                          DCD      0x40014c00
                  |L73.188|
                          DCD      0x40015000
                  |L73.192|
                          DCD      0x40015400
                  |L73.196|
                          DCD      0x40001800
                  |L73.200|
                          DCD      0x40001c00
                  |L73.204|
                          DCD      0x40002000
                  |L73.208|
                          DCD      0x40014000
                  |L73.212|
                          DCD      0x40014400
                  |L73.216|
                          DCD      0x40014800

                          AREA ||i.TIM_SelectOutputTrigger||, CODE, READONLY, ALIGN=2

                  TIM_SelectOutputTrigger PROC
;;;2201     */
;;;2202   void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
000000  b570              PUSH     {r4-r6,lr}
;;;2203   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2204     /* Check the parameters */
;;;2205     assert_param(IS_TIM_LIST7_PERIPH(TIMx));
000006  4922              LDR      r1,|L74.144|
000008  428c              CMP      r4,r1
00000a  d01d              BEQ      |L74.72|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d01a              BEQ      |L74.72|
000012  4920              LDR      r1,|L74.148|
000014  428c              CMP      r4,r1
000016  d017              BEQ      |L74.72|
000018  491f              LDR      r1,|L74.152|
00001a  428c              CMP      r4,r1
00001c  d014              BEQ      |L74.72|
00001e  491f              LDR      r1,|L74.156|
000020  428c              CMP      r4,r1
000022  d011              BEQ      |L74.72|
000024  491e              LDR      r1,|L74.160|
000026  428c              CMP      r4,r1
000028  d00e              BEQ      |L74.72|
00002a  491e              LDR      r1,|L74.164|
00002c  428c              CMP      r4,r1
00002e  d00b              BEQ      |L74.72|
000030  491d              LDR      r1,|L74.168|
000032  428c              CMP      r4,r1
000034  d008              BEQ      |L74.72|
000036  491d              LDR      r1,|L74.172|
000038  428c              CMP      r4,r1
00003a  d005              BEQ      |L74.72|
00003c  491c              LDR      r1,|L74.176|
00003e  428c              CMP      r4,r1
000040  d002              BEQ      |L74.72|
000042  491c              LDR      r1,|L74.180|
000044  428c              CMP      r4,r1
000046  d101              BNE      |L74.76|
                  |L74.72|
000048  2101              MOVS     r1,#1
00004a  e000              B        |L74.78|
                  |L74.76|
00004c  2100              MOVS     r1,#0
                  |L74.78|
00004e  4608              MOV      r0,r1
000050  f7fffffe          BL       assert_param
;;;2206     assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
000054  b16d              CBZ      r5,|L74.114|
000056  2d10              CMP      r5,#0x10
000058  d00b              BEQ      |L74.114|
00005a  2d20              CMP      r5,#0x20
00005c  d009              BEQ      |L74.114|
00005e  2d30              CMP      r5,#0x30
000060  d007              BEQ      |L74.114|
000062  2d40              CMP      r5,#0x40
000064  d005              BEQ      |L74.114|
000066  2d50              CMP      r5,#0x50
000068  d003              BEQ      |L74.114|
00006a  2d60              CMP      r5,#0x60
00006c  d001              BEQ      |L74.114|
00006e  2d70              CMP      r5,#0x70
000070  d101              BNE      |L74.118|
                  |L74.114|
000072  2101              MOVS     r1,#1
000074  e000              B        |L74.120|
                  |L74.118|
000076  2100              MOVS     r1,#0
                  |L74.120|
000078  4608              MOV      r0,r1
00007a  f7fffffe          BL       assert_param
;;;2207     /* Reset the MMS Bits */
;;;2208     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
00007e  88a0              LDRH     r0,[r4,#4]
000080  f64f718f          MOV      r1,#0xff8f
000084  4008              ANDS     r0,r0,r1
000086  80a0              STRH     r0,[r4,#4]
;;;2209     /* Select the TRGO source */
;;;2210     TIMx->CR2 |=  TIM_TRGOSource;
000088  88a0              LDRH     r0,[r4,#4]
00008a  4328              ORRS     r0,r0,r5
00008c  80a0              STRH     r0,[r4,#4]
;;;2211   }
00008e  bd70              POP      {r4-r6,pc}
;;;2212   
                          ENDP

                  |L74.144|
                          DCD      0x40012c00
                  |L74.148|
                          DCD      0x40000400
                  |L74.152|
                          DCD      0x40000800
                  |L74.156|
                          DCD      0x40000c00
                  |L74.160|
                          DCD      0x40001000
                  |L74.164|
                          DCD      0x40001400
                  |L74.168|
                          DCD      0x40013400
                  |L74.172|
                          DCD      0x40014c00
                  |L74.176|
                          DCD      0x40001800
                  |L74.180|
                          DCD      0x40014000

                          AREA ||i.TIM_SelectSlaveMode||, CODE, READONLY, ALIGN=2

                  TIM_SelectSlaveMode PROC
;;;2224     */
;;;2225   void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
000000  b570              PUSH     {r4-r6,lr}
;;;2226   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2227     /* Check the parameters */
;;;2228     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000006  491c              LDR      r1,|L75.120|
000008  428c              CMP      r4,r1
00000a  d017              BEQ      |L75.60|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d014              BEQ      |L75.60|
000012  491a              LDR      r1,|L75.124|
000014  428c              CMP      r4,r1
000016  d011              BEQ      |L75.60|
000018  4919              LDR      r1,|L75.128|
00001a  428c              CMP      r4,r1
00001c  d00e              BEQ      |L75.60|
00001e  4919              LDR      r1,|L75.132|
000020  428c              CMP      r4,r1
000022  d00b              BEQ      |L75.60|
000024  4918              LDR      r1,|L75.136|
000026  428c              CMP      r4,r1
000028  d008              BEQ      |L75.60|
00002a  4918              LDR      r1,|L75.140|
00002c  428c              CMP      r4,r1
00002e  d005              BEQ      |L75.60|
000030  4917              LDR      r1,|L75.144|
000032  428c              CMP      r4,r1
000034  d002              BEQ      |L75.60|
000036  4917              LDR      r1,|L75.148|
000038  428c              CMP      r4,r1
00003a  d101              BNE      |L75.64|
                  |L75.60|
00003c  2101              MOVS     r1,#1
00003e  e000              B        |L75.66|
                  |L75.64|
000040  2100              MOVS     r1,#0
                  |L75.66|
000042  4608              MOV      r0,r1
000044  f7fffffe          BL       assert_param
;;;2229     assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
000048  2d04              CMP      r5,#4
00004a  d005              BEQ      |L75.88|
00004c  2d05              CMP      r5,#5
00004e  d003              BEQ      |L75.88|
000050  2d06              CMP      r5,#6
000052  d001              BEQ      |L75.88|
000054  2d07              CMP      r5,#7
000056  d101              BNE      |L75.92|
                  |L75.88|
000058  2101              MOVS     r1,#1
00005a  e000              B        |L75.94|
                  |L75.92|
00005c  2100              MOVS     r1,#0
                  |L75.94|
00005e  4608              MOV      r0,r1
000060  f7fffffe          BL       assert_param
;;;2230    /* Reset the SMS Bits */
;;;2231     TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
000064  8920              LDRH     r0,[r4,#8]
000066  f64f71f8          MOV      r1,#0xfff8
00006a  4008              ANDS     r0,r0,r1
00006c  8120              STRH     r0,[r4,#8]
;;;2232     /* Select the Slave Mode */
;;;2233     TIMx->SMCR |= TIM_SlaveMode;
00006e  8920              LDRH     r0,[r4,#8]
000070  4328              ORRS     r0,r0,r5
000072  8120              STRH     r0,[r4,#8]
;;;2234   }
000074  bd70              POP      {r4-r6,pc}
;;;2235   
                          ENDP

000076  0000              DCW      0x0000
                  |L75.120|
                          DCD      0x40012c00
                  |L75.124|
                          DCD      0x40000400
                  |L75.128|
                          DCD      0x40000800
                  |L75.132|
                          DCD      0x40000c00
                  |L75.136|
                          DCD      0x40013400
                  |L75.140|
                          DCD      0x40014c00
                  |L75.144|
                          DCD      0x40001800
                  |L75.148|
                          DCD      0x40014000

                          AREA ||i.TIM_SetAutoreload||, CODE, READONLY, ALIGN=2

                  TIM_SetAutoreload PROC
;;;2277     */
;;;2278   void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
000000  b570              PUSH     {r4-r6,lr}
;;;2279   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2280     /* Check the parameters */
;;;2281     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000006  491d              LDR      r1,|L76.124|
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L76.108|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d02c              BEQ      |L76.108|
000012  491b              LDR      r1,|L76.128|
000014  428c              CMP      r4,r1
000016  d029              BEQ      |L76.108|
000018  491a              LDR      r1,|L76.132|
00001a  428c              CMP      r4,r1
00001c  d026              BEQ      |L76.108|
00001e  491a              LDR      r1,|L76.136|
000020  428c              CMP      r4,r1
000022  d023              BEQ      |L76.108|
000024  4919              LDR      r1,|L76.140|
000026  428c              CMP      r4,r1
000028  d020              BEQ      |L76.108|
00002a  4919              LDR      r1,|L76.144|
00002c  428c              CMP      r4,r1
00002e  d01d              BEQ      |L76.108|
000030  4918              LDR      r1,|L76.148|
000032  428c              CMP      r4,r1
000034  d01a              BEQ      |L76.108|
000036  4918              LDR      r1,|L76.152|
000038  428c              CMP      r4,r1
00003a  d017              BEQ      |L76.108|
00003c  4917              LDR      r1,|L76.156|
00003e  428c              CMP      r4,r1
000040  d014              BEQ      |L76.108|
000042  4917              LDR      r1,|L76.160|
000044  428c              CMP      r4,r1
000046  d011              BEQ      |L76.108|
000048  4916              LDR      r1,|L76.164|
00004a  428c              CMP      r4,r1
00004c  d00e              BEQ      |L76.108|
00004e  4916              LDR      r1,|L76.168|
000050  428c              CMP      r4,r1
000052  d00b              BEQ      |L76.108|
000054  4915              LDR      r1,|L76.172|
000056  428c              CMP      r4,r1
000058  d008              BEQ      |L76.108|
00005a  4915              LDR      r1,|L76.176|
00005c  428c              CMP      r4,r1
00005e  d005              BEQ      |L76.108|
000060  4914              LDR      r1,|L76.180|
000062  428c              CMP      r4,r1
000064  d002              BEQ      |L76.108|
000066  4914              LDR      r1,|L76.184|
000068  428c              CMP      r4,r1
00006a  d101              BNE      |L76.112|
                  |L76.108|
00006c  2101              MOVS     r1,#1
00006e  e000              B        |L76.114|
                  |L76.112|
000070  2100              MOVS     r1,#0
                  |L76.114|
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       assert_param
;;;2282     /* Set the Autoreload Register value */
;;;2283     TIMx->ARR = Autoreload;
000078  85a5              STRH     r5,[r4,#0x2c]
;;;2284   }
00007a  bd70              POP      {r4-r6,pc}
;;;2285   
                          ENDP

                  |L76.124|
                          DCD      0x40012c00
                  |L76.128|
                          DCD      0x40000400
                  |L76.132|
                          DCD      0x40000800
                  |L76.136|
                          DCD      0x40000c00
                  |L76.140|
                          DCD      0x40001000
                  |L76.144|
                          DCD      0x40001400
                  |L76.148|
                          DCD      0x40013400
                  |L76.152|
                          DCD      0x40014c00
                  |L76.156|
                          DCD      0x40015000
                  |L76.160|
                          DCD      0x40015400
                  |L76.164|
                          DCD      0x40001800
                  |L76.168|
                          DCD      0x40001c00
                  |L76.172|
                          DCD      0x40002000
                  |L76.176|
                          DCD      0x40014000
                  |L76.180|
                          DCD      0x40014400
                  |L76.184|
                          DCD      0x40014800

                          AREA ||i.TIM_SetClockDivision||, CODE, READONLY, ALIGN=2

                  TIM_SetClockDivision PROC
;;;2440     */
;;;2441   void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
000000  b570              PUSH     {r4-r6,lr}
;;;2442   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2443     /* Check the parameters */
;;;2444     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
000006  4924              LDR      r1,|L77.152|
000008  428c              CMP      r4,r1
00000a  d029              BEQ      |L77.96|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d026              BEQ      |L77.96|
000012  4922              LDR      r1,|L77.156|
000014  428c              CMP      r4,r1
000016  d023              BEQ      |L77.96|
000018  4921              LDR      r1,|L77.160|
00001a  428c              CMP      r4,r1
00001c  d020              BEQ      |L77.96|
00001e  4921              LDR      r1,|L77.164|
000020  428c              CMP      r4,r1
000022  d01d              BEQ      |L77.96|
000024  4920              LDR      r1,|L77.168|
000026  428c              CMP      r4,r1
000028  d01a              BEQ      |L77.96|
00002a  4920              LDR      r1,|L77.172|
00002c  428c              CMP      r4,r1
00002e  d017              BEQ      |L77.96|
000030  491f              LDR      r1,|L77.176|
000032  428c              CMP      r4,r1
000034  d014              BEQ      |L77.96|
000036  491f              LDR      r1,|L77.180|
000038  428c              CMP      r4,r1
00003a  d011              BEQ      |L77.96|
00003c  491e              LDR      r1,|L77.184|
00003e  428c              CMP      r4,r1
000040  d00e              BEQ      |L77.96|
000042  491e              LDR      r1,|L77.188|
000044  428c              CMP      r4,r1
000046  d00b              BEQ      |L77.96|
000048  491d              LDR      r1,|L77.192|
00004a  428c              CMP      r4,r1
00004c  d008              BEQ      |L77.96|
00004e  491d              LDR      r1,|L77.196|
000050  428c              CMP      r4,r1
000052  d005              BEQ      |L77.96|
000054  491c              LDR      r1,|L77.200|
000056  428c              CMP      r4,r1
000058  d002              BEQ      |L77.96|
00005a  491c              LDR      r1,|L77.204|
00005c  428c              CMP      r4,r1
00005e  d101              BNE      |L77.100|
                  |L77.96|
000060  2101              MOVS     r1,#1
000062  e000              B        |L77.102|
                  |L77.100|
000064  2100              MOVS     r1,#0
                  |L77.102|
000066  4608              MOV      r0,r1
000068  f7fffffe          BL       assert_param
;;;2445     assert_param(IS_TIM_CKD_DIV(TIM_CKD));
00006c  b12d              CBZ      r5,|L77.122|
00006e  f5b57f80          CMP      r5,#0x100
000072  d002              BEQ      |L77.122|
000074  f5b57f00          CMP      r5,#0x200
000078  d101              BNE      |L77.126|
                  |L77.122|
00007a  2101              MOVS     r1,#1
00007c  e000              B        |L77.128|
                  |L77.126|
00007e  2100              MOVS     r1,#0
                  |L77.128|
000080  4608              MOV      r0,r1
000082  f7fffffe          BL       assert_param
;;;2446     /* Reset the CKD Bits */
;;;2447     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
000086  8820              LDRH     r0,[r4,#0]
000088  f64f41ff          MOV      r1,#0xfcff
00008c  4008              ANDS     r0,r0,r1
00008e  8020              STRH     r0,[r4,#0]
;;;2448     /* Set the CKD value */
;;;2449     TIMx->CR1 |= TIM_CKD;
000090  8820              LDRH     r0,[r4,#0]
000092  4328              ORRS     r0,r0,r5
000094  8020              STRH     r0,[r4,#0]
;;;2450   }
000096  bd70              POP      {r4-r6,pc}
;;;2451   
                          ENDP

                  |L77.152|
                          DCD      0x40012c00
                  |L77.156|
                          DCD      0x40000400
                  |L77.160|
                          DCD      0x40000800
                  |L77.164|
                          DCD      0x40000c00
                  |L77.168|
                          DCD      0x40013400
                  |L77.172|
                          DCD      0x40014c00
                  |L77.176|
                          DCD      0x40015000
                  |L77.180|
                          DCD      0x40015400
                  |L77.184|
                          DCD      0x40001800
                  |L77.188|
                          DCD      0x40001c00
                  |L77.192|
                          DCD      0x40002000
                  |L77.196|
                          DCD      0x40014000
                  |L77.200|
                          DCD      0x40014400
                  |L77.204|
                          DCD      0x40014800

                          AREA ||i.TIM_SetCompare1||, CODE, READONLY, ALIGN=2

                  TIM_SetCompare1 PROC
;;;2291     */
;;;2292   void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
000000  b570              PUSH     {r4-r6,lr}
;;;2293   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2294     /* Check the parameters */
;;;2295     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
000006  491a              LDR      r1,|L78.112|
000008  428c              CMP      r4,r1
00000a  d029              BEQ      |L78.96|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d026              BEQ      |L78.96|
000012  4918              LDR      r1,|L78.116|
000014  428c              CMP      r4,r1
000016  d023              BEQ      |L78.96|
000018  4917              LDR      r1,|L78.120|
00001a  428c              CMP      r4,r1
00001c  d020              BEQ      |L78.96|
00001e  4917              LDR      r1,|L78.124|
000020  428c              CMP      r4,r1
000022  d01d              BEQ      |L78.96|
000024  4916              LDR      r1,|L78.128|
000026  428c              CMP      r4,r1
000028  d01a              BEQ      |L78.96|
00002a  4916              LDR      r1,|L78.132|
00002c  428c              CMP      r4,r1
00002e  d017              BEQ      |L78.96|
000030  4915              LDR      r1,|L78.136|
000032  428c              CMP      r4,r1
000034  d014              BEQ      |L78.96|
000036  4915              LDR      r1,|L78.140|
000038  428c              CMP      r4,r1
00003a  d011              BEQ      |L78.96|
00003c  4914              LDR      r1,|L78.144|
00003e  428c              CMP      r4,r1
000040  d00e              BEQ      |L78.96|
000042  4914              LDR      r1,|L78.148|
000044  428c              CMP      r4,r1
000046  d00b              BEQ      |L78.96|
000048  4913              LDR      r1,|L78.152|
00004a  428c              CMP      r4,r1
00004c  d008              BEQ      |L78.96|
00004e  4913              LDR      r1,|L78.156|
000050  428c              CMP      r4,r1
000052  d005              BEQ      |L78.96|
000054  4912              LDR      r1,|L78.160|
000056  428c              CMP      r4,r1
000058  d002              BEQ      |L78.96|
00005a  4912              LDR      r1,|L78.164|
00005c  428c              CMP      r4,r1
00005e  d101              BNE      |L78.100|
                  |L78.96|
000060  2101              MOVS     r1,#1
000062  e000              B        |L78.102|
                  |L78.100|
000064  2100              MOVS     r1,#0
                  |L78.102|
000066  4608              MOV      r0,r1
000068  f7fffffe          BL       assert_param
;;;2296     /* Set the Capture Compare1 Register value */
;;;2297     TIMx->CCR1 = Compare1;
00006c  86a5              STRH     r5,[r4,#0x34]
;;;2298   }
00006e  bd70              POP      {r4-r6,pc}
;;;2299   
                          ENDP

                  |L78.112|
                          DCD      0x40012c00
                  |L78.116|
                          DCD      0x40000400
                  |L78.120|
                          DCD      0x40000800
                  |L78.124|
                          DCD      0x40000c00
                  |L78.128|
                          DCD      0x40013400
                  |L78.132|
                          DCD      0x40014c00
                  |L78.136|
                          DCD      0x40015000
                  |L78.140|
                          DCD      0x40015400
                  |L78.144|
                          DCD      0x40001800
                  |L78.148|
                          DCD      0x40001c00
                  |L78.152|
                          DCD      0x40002000
                  |L78.156|
                          DCD      0x40014000
                  |L78.160|
                          DCD      0x40014400
                  |L78.164|
                          DCD      0x40014800

                          AREA ||i.TIM_SetCompare2||, CODE, READONLY, ALIGN=2

                  TIM_SetCompare2 PROC
;;;2305     */
;;;2306   void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
000000  b570              PUSH     {r4-r6,lr}
;;;2307   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2308     /* Check the parameters */
;;;2309     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000006  4911              LDR      r1,|L79.76|
000008  428c              CMP      r4,r1
00000a  d017              BEQ      |L79.60|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d014              BEQ      |L79.60|
000012  490f              LDR      r1,|L79.80|
000014  428c              CMP      r4,r1
000016  d011              BEQ      |L79.60|
000018  490e              LDR      r1,|L79.84|
00001a  428c              CMP      r4,r1
00001c  d00e              BEQ      |L79.60|
00001e  490e              LDR      r1,|L79.88|
000020  428c              CMP      r4,r1
000022  d00b              BEQ      |L79.60|
000024  490d              LDR      r1,|L79.92|
000026  428c              CMP      r4,r1
000028  d008              BEQ      |L79.60|
00002a  490d              LDR      r1,|L79.96|
00002c  428c              CMP      r4,r1
00002e  d005              BEQ      |L79.60|
000030  490c              LDR      r1,|L79.100|
000032  428c              CMP      r4,r1
000034  d002              BEQ      |L79.60|
000036  490c              LDR      r1,|L79.104|
000038  428c              CMP      r4,r1
00003a  d101              BNE      |L79.64|
                  |L79.60|
00003c  2101              MOVS     r1,#1
00003e  e000              B        |L79.66|
                  |L79.64|
000040  2100              MOVS     r1,#0
                  |L79.66|
000042  4608              MOV      r0,r1
000044  f7fffffe          BL       assert_param
;;;2310     /* Set the Capture Compare2 Register value */
;;;2311     TIMx->CCR2 = Compare2;
000048  8725              STRH     r5,[r4,#0x38]
;;;2312   }
00004a  bd70              POP      {r4-r6,pc}
;;;2313   
                          ENDP

                  |L79.76|
                          DCD      0x40012c00
                  |L79.80|
                          DCD      0x40000400
                  |L79.84|
                          DCD      0x40000800
                  |L79.88|
                          DCD      0x40000c00
                  |L79.92|
                          DCD      0x40013400
                  |L79.96|
                          DCD      0x40014c00
                  |L79.100|
                          DCD      0x40001800
                  |L79.104|
                          DCD      0x40014000

                          AREA ||i.TIM_SetCompare3||, CODE, READONLY, ALIGN=2

                  TIM_SetCompare3 PROC
;;;2319     */
;;;2320   void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
000000  b570              PUSH     {r4-r6,lr}
;;;2321   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2322     /* Check the parameters */
;;;2323     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000006  490d              LDR      r1,|L80.60|
000008  428c              CMP      r4,r1
00000a  d00e              BEQ      |L80.42|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d00b              BEQ      |L80.42|
000012  490b              LDR      r1,|L80.64|
000014  428c              CMP      r4,r1
000016  d008              BEQ      |L80.42|
000018  490a              LDR      r1,|L80.68|
00001a  428c              CMP      r4,r1
00001c  d005              BEQ      |L80.42|
00001e  490a              LDR      r1,|L80.72|
000020  428c              CMP      r4,r1
000022  d002              BEQ      |L80.42|
000024  4909              LDR      r1,|L80.76|
000026  428c              CMP      r4,r1
000028  d101              BNE      |L80.46|
                  |L80.42|
00002a  2101              MOVS     r1,#1
00002c  e000              B        |L80.48|
                  |L80.46|
00002e  2100              MOVS     r1,#0
                  |L80.48|
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       assert_param
;;;2324     /* Set the Capture Compare3 Register value */
;;;2325     TIMx->CCR3 = Compare3;
000036  87a5              STRH     r5,[r4,#0x3c]
;;;2326   }
000038  bd70              POP      {r4-r6,pc}
;;;2327   
                          ENDP

00003a  0000              DCW      0x0000
                  |L80.60|
                          DCD      0x40012c00
                  |L80.64|
                          DCD      0x40000400
                  |L80.68|
                          DCD      0x40000800
                  |L80.72|
                          DCD      0x40000c00
                  |L80.76|
                          DCD      0x40013400

                          AREA ||i.TIM_SetCompare4||, CODE, READONLY, ALIGN=2

                  TIM_SetCompare4 PROC
;;;2333     */
;;;2334   void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
000000  b570              PUSH     {r4-r6,lr}
;;;2335   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2336     /* Check the parameters */
;;;2337     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000006  490d              LDR      r1,|L81.60|
000008  428c              CMP      r4,r1
00000a  d00e              BEQ      |L81.42|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d00b              BEQ      |L81.42|
000012  490b              LDR      r1,|L81.64|
000014  428c              CMP      r4,r1
000016  d008              BEQ      |L81.42|
000018  490a              LDR      r1,|L81.68|
00001a  428c              CMP      r4,r1
00001c  d005              BEQ      |L81.42|
00001e  490a              LDR      r1,|L81.72|
000020  428c              CMP      r4,r1
000022  d002              BEQ      |L81.42|
000024  4909              LDR      r1,|L81.76|
000026  428c              CMP      r4,r1
000028  d101              BNE      |L81.46|
                  |L81.42|
00002a  2101              MOVS     r1,#1
00002c  e000              B        |L81.48|
                  |L81.46|
00002e  2100              MOVS     r1,#0
                  |L81.48|
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       assert_param
;;;2338     /* Set the Capture Compare4 Register value */
;;;2339     TIMx->CCR4 = Compare4;
000036  f8a45040          STRH     r5,[r4,#0x40]
;;;2340   }
00003a  bd70              POP      {r4-r6,pc}
;;;2341   
                          ENDP

                  |L81.60|
                          DCD      0x40012c00
                  |L81.64|
                          DCD      0x40000400
                  |L81.68|
                          DCD      0x40000800
                  |L81.72|
                          DCD      0x40000c00
                  |L81.76|
                          DCD      0x40013400

                          AREA ||i.TIM_SetCounter||, CODE, READONLY, ALIGN=2

                  TIM_SetCounter PROC
;;;2263     */
;;;2264   void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
000000  b570              PUSH     {r4-r6,lr}
;;;2265   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2266     /* Check the parameters */
;;;2267     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000006  491d              LDR      r1,|L82.124|
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L82.108|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d02c              BEQ      |L82.108|
000012  491b              LDR      r1,|L82.128|
000014  428c              CMP      r4,r1
000016  d029              BEQ      |L82.108|
000018  491a              LDR      r1,|L82.132|
00001a  428c              CMP      r4,r1
00001c  d026              BEQ      |L82.108|
00001e  491a              LDR      r1,|L82.136|
000020  428c              CMP      r4,r1
000022  d023              BEQ      |L82.108|
000024  4919              LDR      r1,|L82.140|
000026  428c              CMP      r4,r1
000028  d020              BEQ      |L82.108|
00002a  4919              LDR      r1,|L82.144|
00002c  428c              CMP      r4,r1
00002e  d01d              BEQ      |L82.108|
000030  4918              LDR      r1,|L82.148|
000032  428c              CMP      r4,r1
000034  d01a              BEQ      |L82.108|
000036  4918              LDR      r1,|L82.152|
000038  428c              CMP      r4,r1
00003a  d017              BEQ      |L82.108|
00003c  4917              LDR      r1,|L82.156|
00003e  428c              CMP      r4,r1
000040  d014              BEQ      |L82.108|
000042  4917              LDR      r1,|L82.160|
000044  428c              CMP      r4,r1
000046  d011              BEQ      |L82.108|
000048  4916              LDR      r1,|L82.164|
00004a  428c              CMP      r4,r1
00004c  d00e              BEQ      |L82.108|
00004e  4916              LDR      r1,|L82.168|
000050  428c              CMP      r4,r1
000052  d00b              BEQ      |L82.108|
000054  4915              LDR      r1,|L82.172|
000056  428c              CMP      r4,r1
000058  d008              BEQ      |L82.108|
00005a  4915              LDR      r1,|L82.176|
00005c  428c              CMP      r4,r1
00005e  d005              BEQ      |L82.108|
000060  4914              LDR      r1,|L82.180|
000062  428c              CMP      r4,r1
000064  d002              BEQ      |L82.108|
000066  4914              LDR      r1,|L82.184|
000068  428c              CMP      r4,r1
00006a  d101              BNE      |L82.112|
                  |L82.108|
00006c  2101              MOVS     r1,#1
00006e  e000              B        |L82.114|
                  |L82.112|
000070  2100              MOVS     r1,#0
                  |L82.114|
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       assert_param
;;;2268     /* Set the Counter Register value */
;;;2269     TIMx->CNT = Counter;
000078  84a5              STRH     r5,[r4,#0x24]
;;;2270   }
00007a  bd70              POP      {r4-r6,pc}
;;;2271   
                          ENDP

                  |L82.124|
                          DCD      0x40012c00
                  |L82.128|
                          DCD      0x40000400
                  |L82.132|
                          DCD      0x40000800
                  |L82.136|
                          DCD      0x40000c00
                  |L82.140|
                          DCD      0x40001000
                  |L82.144|
                          DCD      0x40001400
                  |L82.148|
                          DCD      0x40013400
                  |L82.152|
                          DCD      0x40014c00
                  |L82.156|
                          DCD      0x40015000
                  |L82.160|
                          DCD      0x40015400
                  |L82.164|
                          DCD      0x40001800
                  |L82.168|
                          DCD      0x40001c00
                  |L82.172|
                          DCD      0x40002000
                  |L82.176|
                          DCD      0x40014000
                  |L82.180|
                          DCD      0x40014400
                  |L82.184|
                          DCD      0x40014800

                          AREA ||i.TIM_SetIC1Prescaler||, CODE, READONLY, ALIGN=2

                  TIM_SetIC1Prescaler PROC
;;;2352     */
;;;2353   void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  b570              PUSH     {r4-r6,lr}
;;;2354   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2355     /* Check the parameters */
;;;2356     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
000006  4924              LDR      r1,|L83.152|
000008  428c              CMP      r4,r1
00000a  d029              BEQ      |L83.96|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d026              BEQ      |L83.96|
000012  4922              LDR      r1,|L83.156|
000014  428c              CMP      r4,r1
000016  d023              BEQ      |L83.96|
000018  4921              LDR      r1,|L83.160|
00001a  428c              CMP      r4,r1
00001c  d020              BEQ      |L83.96|
00001e  4921              LDR      r1,|L83.164|
000020  428c              CMP      r4,r1
000022  d01d              BEQ      |L83.96|
000024  4920              LDR      r1,|L83.168|
000026  428c              CMP      r4,r1
000028  d01a              BEQ      |L83.96|
00002a  4920              LDR      r1,|L83.172|
00002c  428c              CMP      r4,r1
00002e  d017              BEQ      |L83.96|
000030  491f              LDR      r1,|L83.176|
000032  428c              CMP      r4,r1
000034  d014              BEQ      |L83.96|
000036  491f              LDR      r1,|L83.180|
000038  428c              CMP      r4,r1
00003a  d011              BEQ      |L83.96|
00003c  491e              LDR      r1,|L83.184|
00003e  428c              CMP      r4,r1
000040  d00e              BEQ      |L83.96|
000042  491e              LDR      r1,|L83.188|
000044  428c              CMP      r4,r1
000046  d00b              BEQ      |L83.96|
000048  491d              LDR      r1,|L83.192|
00004a  428c              CMP      r4,r1
00004c  d008              BEQ      |L83.96|
00004e  491d              LDR      r1,|L83.196|
000050  428c              CMP      r4,r1
000052  d005              BEQ      |L83.96|
000054  491c              LDR      r1,|L83.200|
000056  428c              CMP      r4,r1
000058  d002              BEQ      |L83.96|
00005a  491c              LDR      r1,|L83.204|
00005c  428c              CMP      r4,r1
00005e  d101              BNE      |L83.100|
                  |L83.96|
000060  2101              MOVS     r1,#1
000062  e000              B        |L83.102|
                  |L83.100|
000064  2100              MOVS     r1,#0
                  |L83.102|
000066  4608              MOV      r0,r1
000068  f7fffffe          BL       assert_param
;;;2357     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
00006c  b12d              CBZ      r5,|L83.122|
00006e  2d04              CMP      r5,#4
000070  d003              BEQ      |L83.122|
000072  2d08              CMP      r5,#8
000074  d001              BEQ      |L83.122|
000076  2d0c              CMP      r5,#0xc
000078  d101              BNE      |L83.126|
                  |L83.122|
00007a  2101              MOVS     r1,#1
00007c  e000              B        |L83.128|
                  |L83.126|
00007e  2100              MOVS     r1,#0
                  |L83.128|
000080  4608              MOV      r0,r1
000082  f7fffffe          BL       assert_param
;;;2358     /* Reset the IC1PSC Bits */
;;;2359     TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
000086  8b20              LDRH     r0,[r4,#0x18]
000088  f64f71f3          MOV      r1,#0xfff3
00008c  4008              ANDS     r0,r0,r1
00008e  8320              STRH     r0,[r4,#0x18]
;;;2360     /* Set the IC1PSC value */
;;;2361     TIMx->CCMR1 |= TIM_ICPSC;
000090  8b20              LDRH     r0,[r4,#0x18]
000092  4328              ORRS     r0,r0,r5
000094  8320              STRH     r0,[r4,#0x18]
;;;2362   }
000096  bd70              POP      {r4-r6,pc}
;;;2363   
                          ENDP

                  |L83.152|
                          DCD      0x40012c00
                  |L83.156|
                          DCD      0x40000400
                  |L83.160|
                          DCD      0x40000800
                  |L83.164|
                          DCD      0x40000c00
                  |L83.168|
                          DCD      0x40013400
                  |L83.172|
                          DCD      0x40014c00
                  |L83.176|
                          DCD      0x40015000
                  |L83.180|
                          DCD      0x40015400
                  |L83.184|
                          DCD      0x40001800
                  |L83.188|
                          DCD      0x40001c00
                  |L83.192|
                          DCD      0x40002000
                  |L83.196|
                          DCD      0x40014000
                  |L83.200|
                          DCD      0x40014400
                  |L83.204|
                          DCD      0x40014800

                          AREA ||i.TIM_SetIC2Prescaler||, CODE, READONLY, ALIGN=2

                  TIM_SetIC2Prescaler PROC
;;;2374     */
;;;2375   void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  b570              PUSH     {r4-r6,lr}
;;;2376   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2377     /* Check the parameters */
;;;2378     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000006  491d              LDR      r1,|L84.124|
000008  428c              CMP      r4,r1
00000a  d017              BEQ      |L84.60|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d014              BEQ      |L84.60|
000012  491b              LDR      r1,|L84.128|
000014  428c              CMP      r4,r1
000016  d011              BEQ      |L84.60|
000018  491a              LDR      r1,|L84.132|
00001a  428c              CMP      r4,r1
00001c  d00e              BEQ      |L84.60|
00001e  491a              LDR      r1,|L84.136|
000020  428c              CMP      r4,r1
000022  d00b              BEQ      |L84.60|
000024  4919              LDR      r1,|L84.140|
000026  428c              CMP      r4,r1
000028  d008              BEQ      |L84.60|
00002a  4919              LDR      r1,|L84.144|
00002c  428c              CMP      r4,r1
00002e  d005              BEQ      |L84.60|
000030  4918              LDR      r1,|L84.148|
000032  428c              CMP      r4,r1
000034  d002              BEQ      |L84.60|
000036  4918              LDR      r1,|L84.152|
000038  428c              CMP      r4,r1
00003a  d101              BNE      |L84.64|
                  |L84.60|
00003c  2101              MOVS     r1,#1
00003e  e000              B        |L84.66|
                  |L84.64|
000040  2100              MOVS     r1,#0
                  |L84.66|
000042  4608              MOV      r0,r1
000044  f7fffffe          BL       assert_param
;;;2379     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
000048  b12d              CBZ      r5,|L84.86|
00004a  2d04              CMP      r5,#4
00004c  d003              BEQ      |L84.86|
00004e  2d08              CMP      r5,#8
000050  d001              BEQ      |L84.86|
000052  2d0c              CMP      r5,#0xc
000054  d101              BNE      |L84.90|
                  |L84.86|
000056  2101              MOVS     r1,#1
000058  e000              B        |L84.92|
                  |L84.90|
00005a  2100              MOVS     r1,#0
                  |L84.92|
00005c  4608              MOV      r0,r1
00005e  f7fffffe          BL       assert_param
;;;2380     /* Reset the IC2PSC Bits */
;;;2381     TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
000062  8b20              LDRH     r0,[r4,#0x18]
000064  f24f31ff          MOV      r1,#0xf3ff
000068  4008              ANDS     r0,r0,r1
00006a  8320              STRH     r0,[r4,#0x18]
;;;2382     /* Set the IC2PSC value */
;;;2383     TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
00006c  8b20              LDRH     r0,[r4,#0x18]
00006e  f64f71ff          MOV      r1,#0xffff
000072  ea012105          AND      r1,r1,r5,LSL #8
000076  4308              ORRS     r0,r0,r1
000078  8320              STRH     r0,[r4,#0x18]
;;;2384   }
00007a  bd70              POP      {r4-r6,pc}
;;;2385   
                          ENDP

                  |L84.124|
                          DCD      0x40012c00
                  |L84.128|
                          DCD      0x40000400
                  |L84.132|
                          DCD      0x40000800
                  |L84.136|
                          DCD      0x40000c00
                  |L84.140|
                          DCD      0x40013400
                  |L84.144|
                          DCD      0x40014c00
                  |L84.148|
                          DCD      0x40001800
                  |L84.152|
                          DCD      0x40014000

                          AREA ||i.TIM_SetIC3Prescaler||, CODE, READONLY, ALIGN=2

                  TIM_SetIC3Prescaler PROC
;;;2396     */
;;;2397   void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  b570              PUSH     {r4-r6,lr}
;;;2398   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2399     /* Check the parameters */
;;;2400     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000006  4917              LDR      r1,|L85.100|
000008  428c              CMP      r4,r1
00000a  d00e              BEQ      |L85.42|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d00b              BEQ      |L85.42|
000012  4915              LDR      r1,|L85.104|
000014  428c              CMP      r4,r1
000016  d008              BEQ      |L85.42|
000018  4914              LDR      r1,|L85.108|
00001a  428c              CMP      r4,r1
00001c  d005              BEQ      |L85.42|
00001e  4914              LDR      r1,|L85.112|
000020  428c              CMP      r4,r1
000022  d002              BEQ      |L85.42|
000024  4913              LDR      r1,|L85.116|
000026  428c              CMP      r4,r1
000028  d101              BNE      |L85.46|
                  |L85.42|
00002a  2101              MOVS     r1,#1
00002c  e000              B        |L85.48|
                  |L85.46|
00002e  2100              MOVS     r1,#0
                  |L85.48|
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       assert_param
;;;2401     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
000036  b12d              CBZ      r5,|L85.68|
000038  2d04              CMP      r5,#4
00003a  d003              BEQ      |L85.68|
00003c  2d08              CMP      r5,#8
00003e  d001              BEQ      |L85.68|
000040  2d0c              CMP      r5,#0xc
000042  d101              BNE      |L85.72|
                  |L85.68|
000044  2101              MOVS     r1,#1
000046  e000              B        |L85.74|
                  |L85.72|
000048  2100              MOVS     r1,#0
                  |L85.74|
00004a  4608              MOV      r0,r1
00004c  f7fffffe          BL       assert_param
;;;2402     /* Reset the IC3PSC Bits */
;;;2403     TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
000050  8ba0              LDRH     r0,[r4,#0x1c]
000052  f64f71f3          MOV      r1,#0xfff3
000056  4008              ANDS     r0,r0,r1
000058  83a0              STRH     r0,[r4,#0x1c]
;;;2404     /* Set the IC3PSC value */
;;;2405     TIMx->CCMR2 |= TIM_ICPSC;
00005a  8ba0              LDRH     r0,[r4,#0x1c]
00005c  4328              ORRS     r0,r0,r5
00005e  83a0              STRH     r0,[r4,#0x1c]
;;;2406   }
000060  bd70              POP      {r4-r6,pc}
;;;2407   
                          ENDP

000062  0000              DCW      0x0000
                  |L85.100|
                          DCD      0x40012c00
                  |L85.104|
                          DCD      0x40000400
                  |L85.108|
                          DCD      0x40000800
                  |L85.112|
                          DCD      0x40000c00
                  |L85.116|
                          DCD      0x40013400

                          AREA ||i.TIM_SetIC4Prescaler||, CODE, READONLY, ALIGN=2

                  TIM_SetIC4Prescaler PROC
;;;2418     */
;;;2419   void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  b570              PUSH     {r4-r6,lr}
;;;2420   {  
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2421     /* Check the parameters */
;;;2422     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000006  4919              LDR      r1,|L86.108|
000008  428c              CMP      r4,r1
00000a  d00e              BEQ      |L86.42|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d00b              BEQ      |L86.42|
000012  4917              LDR      r1,|L86.112|
000014  428c              CMP      r4,r1
000016  d008              BEQ      |L86.42|
000018  4916              LDR      r1,|L86.116|
00001a  428c              CMP      r4,r1
00001c  d005              BEQ      |L86.42|
00001e  4916              LDR      r1,|L86.120|
000020  428c              CMP      r4,r1
000022  d002              BEQ      |L86.42|
000024  4915              LDR      r1,|L86.124|
000026  428c              CMP      r4,r1
000028  d101              BNE      |L86.46|
                  |L86.42|
00002a  2101              MOVS     r1,#1
00002c  e000              B        |L86.48|
                  |L86.46|
00002e  2100              MOVS     r1,#0
                  |L86.48|
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       assert_param
;;;2423     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
000036  b12d              CBZ      r5,|L86.68|
000038  2d04              CMP      r5,#4
00003a  d003              BEQ      |L86.68|
00003c  2d08              CMP      r5,#8
00003e  d001              BEQ      |L86.68|
000040  2d0c              CMP      r5,#0xc
000042  d101              BNE      |L86.72|
                  |L86.68|
000044  2101              MOVS     r1,#1
000046  e000              B        |L86.74|
                  |L86.72|
000048  2100              MOVS     r1,#0
                  |L86.74|
00004a  4608              MOV      r0,r1
00004c  f7fffffe          BL       assert_param
;;;2424     /* Reset the IC4PSC Bits */
;;;2425     TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
000050  8ba0              LDRH     r0,[r4,#0x1c]
000052  f24f31ff          MOV      r1,#0xf3ff
000056  4008              ANDS     r0,r0,r1
000058  83a0              STRH     r0,[r4,#0x1c]
;;;2426     /* Set the IC4PSC value */
;;;2427     TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
00005a  8ba0              LDRH     r0,[r4,#0x1c]
00005c  f64f71ff          MOV      r1,#0xffff
000060  ea012105          AND      r1,r1,r5,LSL #8
000064  4308              ORRS     r0,r0,r1
000066  83a0              STRH     r0,[r4,#0x1c]
;;;2428   }
000068  bd70              POP      {r4-r6,pc}
;;;2429   
                          ENDP

00006a  0000              DCW      0x0000
                  |L86.108|
                          DCD      0x40012c00
                  |L86.112|
                          DCD      0x40000400
                  |L86.116|
                          DCD      0x40000800
                  |L86.120|
                          DCD      0x40000c00
                  |L86.124|
                          DCD      0x40013400

                          AREA ||i.TIM_TIxExternalClockConfig||, CODE, READONLY, ALIGN=2

                  TIM_TIxExternalClockConfig PROC
;;;1034     */
;;;1035   void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1036                                   uint16_t TIM_ICPolarity, uint16_t ICFilter)
;;;1037   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;1038     /* Check the parameters */
;;;1039     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
00000c  492b              LDR      r1,|L87.188|
00000e  428c              CMP      r4,r1
000010  d017              BEQ      |L87.66|
000012  f1b44f80          CMP      r4,#0x40000000
000016  d014              BEQ      |L87.66|
000018  4929              LDR      r1,|L87.192|
00001a  428c              CMP      r4,r1
00001c  d011              BEQ      |L87.66|
00001e  4929              LDR      r1,|L87.196|
000020  428c              CMP      r4,r1
000022  d00e              BEQ      |L87.66|
000024  4928              LDR      r1,|L87.200|
000026  428c              CMP      r4,r1
000028  d00b              BEQ      |L87.66|
00002a  4928              LDR      r1,|L87.204|
00002c  428c              CMP      r4,r1
00002e  d008              BEQ      |L87.66|
000030  4927              LDR      r1,|L87.208|
000032  428c              CMP      r4,r1
000034  d005              BEQ      |L87.66|
000036  4927              LDR      r1,|L87.212|
000038  428c              CMP      r4,r1
00003a  d002              BEQ      |L87.66|
00003c  4926              LDR      r1,|L87.216|
00003e  428c              CMP      r4,r1
000040  d101              BNE      |L87.70|
                  |L87.66|
000042  2101              MOVS     r1,#1
000044  e000              B        |L87.72|
                  |L87.70|
000046  2100              MOVS     r1,#0
                  |L87.72|
000048  4608              MOV      r0,r1
00004a  f7fffffe          BL       assert_param
;;;1040     assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
00004e  2d50              CMP      r5,#0x50
000050  d003              BEQ      |L87.90|
000052  2d60              CMP      r5,#0x60
000054  d001              BEQ      |L87.90|
000056  2d40              CMP      r5,#0x40
000058  d101              BNE      |L87.94|
                  |L87.90|
00005a  2101              MOVS     r1,#1
00005c  e000              B        |L87.96|
                  |L87.94|
00005e  2100              MOVS     r1,#0
                  |L87.96|
000060  4608              MOV      r0,r1
000062  f7fffffe          BL       assert_param
;;;1041     assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
000066  b10e              CBZ      r6,|L87.108|
000068  2e02              CMP      r6,#2
00006a  d101              BNE      |L87.112|
                  |L87.108|
00006c  2101              MOVS     r1,#1
00006e  e000              B        |L87.114|
                  |L87.112|
000070  2100              MOVS     r1,#0
                  |L87.114|
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       assert_param
;;;1042     assert_param(IS_TIM_IC_FILTER(ICFilter));
000078  2f0f              CMP      r7,#0xf
00007a  dc01              BGT      |L87.128|
00007c  2101              MOVS     r1,#1
00007e  e000              B        |L87.130|
                  |L87.128|
000080  2100              MOVS     r1,#0
                  |L87.130|
000082  4608              MOV      r0,r1
000084  f7fffffe          BL       assert_param
;;;1043     /* Configure the Timer Input Clock Source */
;;;1044     if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
000088  2d60              CMP      r5,#0x60
00008a  d106              BNE      |L87.154|
;;;1045     {
;;;1046       TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
00008c  463b              MOV      r3,r7
00008e  2201              MOVS     r2,#1
000090  4631              MOV      r1,r6
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       TI2_Config
000098  e005              B        |L87.166|
                  |L87.154|
;;;1047     }
;;;1048     else
;;;1049     {
;;;1050       TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
00009a  463b              MOV      r3,r7
00009c  2201              MOVS     r2,#1
00009e  4631              MOV      r1,r6
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       TI1_Config
                  |L87.166|
;;;1051     }
;;;1052     /* Select the Trigger source */
;;;1053     TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
0000a6  4629              MOV      r1,r5
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       TIM_SelectInputTrigger
;;;1054     /* Select the External clock mode1 */
;;;1055     TIMx->SMCR |= TIM_SlaveMode_External1;
0000ae  8920              LDRH     r0,[r4,#8]
0000b0  f0400007          ORR      r0,r0,#7
0000b4  8120              STRH     r0,[r4,#8]
;;;1056   }
0000b6  e8bd81f0          POP      {r4-r8,pc}
;;;1057   
                          ENDP

0000ba  0000              DCW      0x0000
                  |L87.188|
                          DCD      0x40012c00
                  |L87.192|
                          DCD      0x40000400
                  |L87.196|
                          DCD      0x40000800
                  |L87.200|
                          DCD      0x40000c00
                  |L87.204|
                          DCD      0x40013400
                  |L87.208|
                          DCD      0x40014c00
                  |L87.212|
                          DCD      0x40001800
                  |L87.216|
                          DCD      0x40014000

                          AREA ||i.TIM_TimeBaseInit||, CODE, READONLY, ALIGN=2

                  TIM_TimeBaseInit PROC
;;;225      */
;;;226    void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;227    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;228      uint16_t tmpcr1 = 0;
000006  2600              MOVS     r6,#0
;;;229    
;;;230      /* Check the parameters */
;;;231      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
000008  494c              LDR      r1,|L88.316|
00000a  428c              CMP      r4,r1
00000c  d02f              BEQ      |L88.110|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d02c              BEQ      |L88.110|
000014  494a              LDR      r1,|L88.320|
000016  428c              CMP      r4,r1
000018  d029              BEQ      |L88.110|
00001a  494a              LDR      r1,|L88.324|
00001c  428c              CMP      r4,r1
00001e  d026              BEQ      |L88.110|
000020  4949              LDR      r1,|L88.328|
000022  428c              CMP      r4,r1
000024  d023              BEQ      |L88.110|
000026  4949              LDR      r1,|L88.332|
000028  428c              CMP      r4,r1
00002a  d020              BEQ      |L88.110|
00002c  4948              LDR      r1,|L88.336|
00002e  428c              CMP      r4,r1
000030  d01d              BEQ      |L88.110|
000032  4948              LDR      r1,|L88.340|
000034  428c              CMP      r4,r1
000036  d01a              BEQ      |L88.110|
000038  4947              LDR      r1,|L88.344|
00003a  428c              CMP      r4,r1
00003c  d017              BEQ      |L88.110|
00003e  4947              LDR      r1,|L88.348|
000040  428c              CMP      r4,r1
000042  d014              BEQ      |L88.110|
000044  4946              LDR      r1,|L88.352|
000046  428c              CMP      r4,r1
000048  d011              BEQ      |L88.110|
00004a  4946              LDR      r1,|L88.356|
00004c  428c              CMP      r4,r1
00004e  d00e              BEQ      |L88.110|
000050  4945              LDR      r1,|L88.360|
000052  428c              CMP      r4,r1
000054  d00b              BEQ      |L88.110|
000056  4945              LDR      r1,|L88.364|
000058  428c              CMP      r4,r1
00005a  d008              BEQ      |L88.110|
00005c  4944              LDR      r1,|L88.368|
00005e  428c              CMP      r4,r1
000060  d005              BEQ      |L88.110|
000062  4944              LDR      r1,|L88.372|
000064  428c              CMP      r4,r1
000066  d002              BEQ      |L88.110|
000068  4943              LDR      r1,|L88.376|
00006a  428c              CMP      r4,r1
00006c  d101              BNE      |L88.114|
                  |L88.110|
00006e  2101              MOVS     r1,#1
000070  e000              B        |L88.116|
                  |L88.114|
000072  2100              MOVS     r1,#0
                  |L88.116|
000074  4608              MOV      r0,r1
000076  f7fffffe          BL       assert_param
;;;232      assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
00007a  8869              LDRH     r1,[r5,#2]
00007c  b159              CBZ      r1,|L88.150|
00007e  8869              LDRH     r1,[r5,#2]
000080  2910              CMP      r1,#0x10
000082  d008              BEQ      |L88.150|
000084  8869              LDRH     r1,[r5,#2]
000086  2920              CMP      r1,#0x20
000088  d005              BEQ      |L88.150|
00008a  8869              LDRH     r1,[r5,#2]
00008c  2940              CMP      r1,#0x40
00008e  d002              BEQ      |L88.150|
000090  8869              LDRH     r1,[r5,#2]
000092  2960              CMP      r1,#0x60
000094  d101              BNE      |L88.154|
                  |L88.150|
000096  2101              MOVS     r1,#1
000098  e000              B        |L88.156|
                  |L88.154|
00009a  2100              MOVS     r1,#0
                  |L88.156|
00009c  4608              MOV      r0,r1
00009e  f7fffffe          BL       assert_param
;;;233      assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
0000a2  88e9              LDRH     r1,[r5,#6]
0000a4  b139              CBZ      r1,|L88.182|
0000a6  88e9              LDRH     r1,[r5,#6]
0000a8  f5b17f80          CMP      r1,#0x100
0000ac  d003              BEQ      |L88.182|
0000ae  88e9              LDRH     r1,[r5,#6]
0000b0  f5b17f00          CMP      r1,#0x200
0000b4  d101              BNE      |L88.186|
                  |L88.182|
0000b6  2101              MOVS     r1,#1
0000b8  e000              B        |L88.188|
                  |L88.186|
0000ba  2100              MOVS     r1,#0
                  |L88.188|
0000bc  4608              MOV      r0,r1
0000be  f7fffffe          BL       assert_param
;;;234    
;;;235      tmpcr1 = TIMx->CR1;  
0000c2  8826              LDRH     r6,[r4,#0]
;;;236    
;;;237      if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
0000c4  481d              LDR      r0,|L88.316|
0000c6  4284              CMP      r4,r0
0000c8  d00e              BEQ      |L88.232|
0000ca  4822              LDR      r0,|L88.340|
0000cc  4284              CMP      r4,r0
0000ce  d00b              BEQ      |L88.232|
0000d0  f1b44f80          CMP      r4,#0x40000000
0000d4  d008              BEQ      |L88.232|
0000d6  481a              LDR      r0,|L88.320|
0000d8  4284              CMP      r4,r0
0000da  d005              BEQ      |L88.232|
;;;238         (TIMx == TIM4) || (TIMx == TIM5)) 
0000dc  4819              LDR      r0,|L88.324|
0000de  4284              CMP      r4,r0
0000e0  d002              BEQ      |L88.232|
0000e2  4819              LDR      r0,|L88.328|
0000e4  4284              CMP      r4,r0
0000e6  d104              BNE      |L88.242|
                  |L88.232|
;;;239      {
;;;240        /* Select the Counter Mode */
;;;241        tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
0000e8  f64f708f          MOV      r0,#0xff8f
0000ec  4006              ANDS     r6,r6,r0
;;;242        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
0000ee  8868              LDRH     r0,[r5,#2]
0000f0  4306              ORRS     r6,r6,r0
                  |L88.242|
;;;243      }
;;;244     
;;;245      if((TIMx != TIM6) && (TIMx != TIM7))
0000f2  4816              LDR      r0,|L88.332|
0000f4  4284              CMP      r4,r0
0000f6  d007              BEQ      |L88.264|
0000f8  4815              LDR      r0,|L88.336|
0000fa  4284              CMP      r4,r0
0000fc  d004              BEQ      |L88.264|
;;;246      {
;;;247        /* Set the clock division */
;;;248        tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
0000fe  f64f40ff          MOV      r0,#0xfcff
000102  4006              ANDS     r6,r6,r0
;;;249        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
000104  88e8              LDRH     r0,[r5,#6]
000106  4306              ORRS     r6,r6,r0
                  |L88.264|
;;;250      }
;;;251    
;;;252      TIMx->CR1 = tmpcr1;
000108  8026              STRH     r6,[r4,#0]
;;;253    
;;;254      /* Set the Autoreload value */
;;;255      TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
00010a  88a8              LDRH     r0,[r5,#4]
00010c  85a0              STRH     r0,[r4,#0x2c]
;;;256     
;;;257      /* Set the Prescaler value */
;;;258      TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
00010e  8828              LDRH     r0,[r5,#0]
000110  8520              STRH     r0,[r4,#0x28]
;;;259        
;;;260      if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
000112  480a              LDR      r0,|L88.316|
000114  4284              CMP      r4,r0
000116  d00b              BEQ      |L88.304|
000118  480e              LDR      r0,|L88.340|
00011a  4284              CMP      r4,r0
00011c  d008              BEQ      |L88.304|
00011e  4814              LDR      r0,|L88.368|
000120  4284              CMP      r4,r0
000122  d005              BEQ      |L88.304|
000124  4813              LDR      r0,|L88.372|
000126  4284              CMP      r4,r0
000128  d002              BEQ      |L88.304|
00012a  4813              LDR      r0,|L88.376|
00012c  4284              CMP      r4,r0
00012e  d101              BNE      |L88.308|
                  |L88.304|
;;;261      {
;;;262        /* Set the Repetition Counter value */
;;;263        TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
000130  7a28              LDRB     r0,[r5,#8]
000132  8620              STRH     r0,[r4,#0x30]
                  |L88.308|
;;;264      }
;;;265    
;;;266      /* Generate an update event to reload the Prescaler and the Repetition counter
;;;267         values immediately */
;;;268      TIMx->EGR = TIM_PSCReloadMode_Immediate;           
000134  2001              MOVS     r0,#1
000136  82a0              STRH     r0,[r4,#0x14]
;;;269    }
000138  bd70              POP      {r4-r6,pc}
;;;270    
                          ENDP

00013a  0000              DCW      0x0000
                  |L88.316|
                          DCD      0x40012c00
                  |L88.320|
                          DCD      0x40000400
                  |L88.324|
                          DCD      0x40000800
                  |L88.328|
                          DCD      0x40000c00
                  |L88.332|
                          DCD      0x40001000
                  |L88.336|
                          DCD      0x40001400
                  |L88.340|
                          DCD      0x40013400
                  |L88.344|
                          DCD      0x40014c00
                  |L88.348|
                          DCD      0x40015000
                  |L88.352|
                          DCD      0x40015400
                  |L88.356|
                          DCD      0x40001800
                  |L88.360|
                          DCD      0x40001c00
                  |L88.364|
                          DCD      0x40002000
                  |L88.368|
                          DCD      0x40014000
                  |L88.372|
                          DCD      0x40014400
                  |L88.376|
                          DCD      0x40014800

                          AREA ||i.TIM_TimeBaseStructInit||, CODE, READONLY, ALIGN=1

                  TIM_TimeBaseStructInit PROC
;;;735      */
;;;736    void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;737    {
;;;738      /* Set the default configuration */
;;;739      TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
000004  8081              STRH     r1,[r0,#4]
;;;740      TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
000006  2100              MOVS     r1,#0
000008  8001              STRH     r1,[r0,#0]
;;;741      TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
00000a  80c1              STRH     r1,[r0,#6]
;;;742      TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
00000c  8041              STRH     r1,[r0,#2]
;;;743      TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
00000e  7201              STRB     r1,[r0,#8]
;;;744    }
000010  4770              BX       lr
;;;745    
                          ENDP


                          AREA ||i.TIM_UpdateDisableConfig||, CODE, READONLY, ALIGN=2

                  TIM_UpdateDisableConfig PROC
;;;2091     */
;;;2092   void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;2093   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2094     /* Check the parameters */
;;;2095     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000006  4927              LDR      r1,|L90.164|
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L90.108|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d02c              BEQ      |L90.108|
000012  4925              LDR      r1,|L90.168|
000014  428c              CMP      r4,r1
000016  d029              BEQ      |L90.108|
000018  4924              LDR      r1,|L90.172|
00001a  428c              CMP      r4,r1
00001c  d026              BEQ      |L90.108|
00001e  4924              LDR      r1,|L90.176|
000020  428c              CMP      r4,r1
000022  d023              BEQ      |L90.108|
000024  4923              LDR      r1,|L90.180|
000026  428c              CMP      r4,r1
000028  d020              BEQ      |L90.108|
00002a  4923              LDR      r1,|L90.184|
00002c  428c              CMP      r4,r1
00002e  d01d              BEQ      |L90.108|
000030  4922              LDR      r1,|L90.188|
000032  428c              CMP      r4,r1
000034  d01a              BEQ      |L90.108|
000036  4922              LDR      r1,|L90.192|
000038  428c              CMP      r4,r1
00003a  d017              BEQ      |L90.108|
00003c  4921              LDR      r1,|L90.196|
00003e  428c              CMP      r4,r1
000040  d014              BEQ      |L90.108|
000042  4921              LDR      r1,|L90.200|
000044  428c              CMP      r4,r1
000046  d011              BEQ      |L90.108|
000048  4920              LDR      r1,|L90.204|
00004a  428c              CMP      r4,r1
00004c  d00e              BEQ      |L90.108|
00004e  4920              LDR      r1,|L90.208|
000050  428c              CMP      r4,r1
000052  d00b              BEQ      |L90.108|
000054  491f              LDR      r1,|L90.212|
000056  428c              CMP      r4,r1
000058  d008              BEQ      |L90.108|
00005a  491f              LDR      r1,|L90.216|
00005c  428c              CMP      r4,r1
00005e  d005              BEQ      |L90.108|
000060  491e              LDR      r1,|L90.220|
000062  428c              CMP      r4,r1
000064  d002              BEQ      |L90.108|
000066  491e              LDR      r1,|L90.224|
000068  428c              CMP      r4,r1
00006a  d101              BNE      |L90.112|
                  |L90.108|
00006c  2101              MOVS     r1,#1
00006e  e000              B        |L90.114|
                  |L90.112|
000070  2100              MOVS     r1,#0
                  |L90.114|
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       assert_param
;;;2096     assert_param(IS_FUNCTIONAL_STATE(NewState));
000078  b10d              CBZ      r5,|L90.126|
00007a  2d01              CMP      r5,#1
00007c  d101              BNE      |L90.130|
                  |L90.126|
00007e  2101              MOVS     r1,#1
000080  e000              B        |L90.132|
                  |L90.130|
000082  2100              MOVS     r1,#0
                  |L90.132|
000084  4608              MOV      r0,r1
000086  f7fffffe          BL       assert_param
;;;2097     if (NewState != DISABLE)
00008a  b125              CBZ      r5,|L90.150|
;;;2098     {
;;;2099       /* Set the Update Disable Bit */
;;;2100       TIMx->CR1 |= TIM_CR1_UDIS;
00008c  8820              LDRH     r0,[r4,#0]
00008e  f0400002          ORR      r0,r0,#2
000092  8020              STRH     r0,[r4,#0]
000094  e004              B        |L90.160|
                  |L90.150|
;;;2101     }
;;;2102     else
;;;2103     {
;;;2104       /* Reset the Update Disable Bit */
;;;2105       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
000096  8820              LDRH     r0,[r4,#0]
000098  f64f71fd          MOV      r1,#0xfffd
00009c  4008              ANDS     r0,r0,r1
00009e  8020              STRH     r0,[r4,#0]
                  |L90.160|
;;;2106     }
;;;2107   }
0000a0  bd70              POP      {r4-r6,pc}
;;;2108   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L90.164|
                          DCD      0x40012c00
                  |L90.168|
                          DCD      0x40000400
                  |L90.172|
                          DCD      0x40000800
                  |L90.176|
                          DCD      0x40000c00
                  |L90.180|
                          DCD      0x40001000
                  |L90.184|
                          DCD      0x40001400
                  |L90.188|
                          DCD      0x40013400
                  |L90.192|
                          DCD      0x40014c00
                  |L90.196|
                          DCD      0x40015000
                  |L90.200|
                          DCD      0x40015400
                  |L90.204|
                          DCD      0x40001800
                  |L90.208|
                          DCD      0x40001c00
                  |L90.212|
                          DCD      0x40002000
                  |L90.216|
                          DCD      0x40014000
                  |L90.220|
                          DCD      0x40014400
                  |L90.224|
                          DCD      0x40014800

                          AREA ||i.TIM_UpdateRequestConfig||, CODE, READONLY, ALIGN=2

                  TIM_UpdateRequestConfig PROC
;;;2119     */
;;;2120   void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
000000  b570              PUSH     {r4-r6,lr}
;;;2121   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2122     /* Check the parameters */
;;;2123     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000006  4927              LDR      r1,|L91.164|
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L91.108|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d02c              BEQ      |L91.108|
000012  4925              LDR      r1,|L91.168|
000014  428c              CMP      r4,r1
000016  d029              BEQ      |L91.108|
000018  4924              LDR      r1,|L91.172|
00001a  428c              CMP      r4,r1
00001c  d026              BEQ      |L91.108|
00001e  4924              LDR      r1,|L91.176|
000020  428c              CMP      r4,r1
000022  d023              BEQ      |L91.108|
000024  4923              LDR      r1,|L91.180|
000026  428c              CMP      r4,r1
000028  d020              BEQ      |L91.108|
00002a  4923              LDR      r1,|L91.184|
00002c  428c              CMP      r4,r1
00002e  d01d              BEQ      |L91.108|
000030  4922              LDR      r1,|L91.188|
000032  428c              CMP      r4,r1
000034  d01a              BEQ      |L91.108|
000036  4922              LDR      r1,|L91.192|
000038  428c              CMP      r4,r1
00003a  d017              BEQ      |L91.108|
00003c  4921              LDR      r1,|L91.196|
00003e  428c              CMP      r4,r1
000040  d014              BEQ      |L91.108|
000042  4921              LDR      r1,|L91.200|
000044  428c              CMP      r4,r1
000046  d011              BEQ      |L91.108|
000048  4920              LDR      r1,|L91.204|
00004a  428c              CMP      r4,r1
00004c  d00e              BEQ      |L91.108|
00004e  4920              LDR      r1,|L91.208|
000050  428c              CMP      r4,r1
000052  d00b              BEQ      |L91.108|
000054  491f              LDR      r1,|L91.212|
000056  428c              CMP      r4,r1
000058  d008              BEQ      |L91.108|
00005a  491f              LDR      r1,|L91.216|
00005c  428c              CMP      r4,r1
00005e  d005              BEQ      |L91.108|
000060  491e              LDR      r1,|L91.220|
000062  428c              CMP      r4,r1
000064  d002              BEQ      |L91.108|
000066  491e              LDR      r1,|L91.224|
000068  428c              CMP      r4,r1
00006a  d101              BNE      |L91.112|
                  |L91.108|
00006c  2101              MOVS     r1,#1
00006e  e000              B        |L91.114|
                  |L91.112|
000070  2100              MOVS     r1,#0
                  |L91.114|
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       assert_param
;;;2124     assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
000078  b10d              CBZ      r5,|L91.126|
00007a  2d01              CMP      r5,#1
00007c  d101              BNE      |L91.130|
                  |L91.126|
00007e  2101              MOVS     r1,#1
000080  e000              B        |L91.132|
                  |L91.130|
000082  2100              MOVS     r1,#0
                  |L91.132|
000084  4608              MOV      r0,r1
000086  f7fffffe          BL       assert_param
;;;2125     if (TIM_UpdateSource != TIM_UpdateSource_Global)
00008a  b125              CBZ      r5,|L91.150|
;;;2126     {
;;;2127       /* Set the URS Bit */
;;;2128       TIMx->CR1 |= TIM_CR1_URS;
00008c  8820              LDRH     r0,[r4,#0]
00008e  f0400004          ORR      r0,r0,#4
000092  8020              STRH     r0,[r4,#0]
000094  e004              B        |L91.160|
                  |L91.150|
;;;2129     }
;;;2130     else
;;;2131     {
;;;2132       /* Reset the URS Bit */
;;;2133       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
000096  8820              LDRH     r0,[r4,#0]
000098  f64f71fb          MOV      r1,#0xfffb
00009c  4008              ANDS     r0,r0,r1
00009e  8020              STRH     r0,[r4,#0]
                  |L91.160|
;;;2134     }
;;;2135   }
0000a0  bd70              POP      {r4-r6,pc}
;;;2136   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L91.164|
                          DCD      0x40012c00
                  |L91.168|
                          DCD      0x40000400
                  |L91.172|
                          DCD      0x40000800
                  |L91.176|
                          DCD      0x40000c00
                  |L91.180|
                          DCD      0x40001000
                  |L91.184|
                          DCD      0x40001400
                  |L91.188|
                          DCD      0x40013400
                  |L91.192|
                          DCD      0x40014c00
                  |L91.196|
                          DCD      0x40015000
                  |L91.200|
                          DCD      0x40015400
                  |L91.204|
                          DCD      0x40001800
                  |L91.208|
                          DCD      0x40001c00
                  |L91.212|
                          DCD      0x40002000
                  |L91.216|
                          DCD      0x40014000
                  |L91.220|
                          DCD      0x40014400
                  |L91.224|
                          DCD      0x40014800
