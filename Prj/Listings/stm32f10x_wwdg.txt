; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f10x_wwdg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f10x_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Board\inc -I..\Chip\Hal_lib\inc -I..\Chip\Startup\inc -I..\coremark -I..\Chip\CMSIS -I.\RTE\_CoreMark -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F10X_MD --omf_browse=.\objects\stm32f10x_wwdg.crf ..\Chip\Hal_lib\stm32f10x_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;206      */
;;;207    void WWDG_ClearFlag(void)
000000  2000              MOVS     r0,#0
;;;208    {
;;;209      WWDG->SR = (uint32_t)RESET;
000002  4901              LDR      r1,|L1.8|
000004  6008              STR      r0,[r1,#0]
;;;210    }
000006  4770              BX       lr
;;;211    
                          ENDP

                  |L1.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;101      */
;;;102    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;105      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f44f6000          MOV      r0,#0x800
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;106    }
000014  bd10              POP      {r4,pc}
;;;107    
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;184      */
;;;185    void WWDG_Enable(uint8_t Counter)
000000  b510              PUSH     {r4,lr}
;;;186    {
000002  4604              MOV      r4,r0
;;;187      /* Check the parameters */
;;;188      assert_param(IS_WWDG_COUNTER(Counter));
000004  2c40              CMP      r4,#0x40
000006  db03              BLT      |L3.16|
000008  2c7f              CMP      r4,#0x7f
00000a  dc01              BGT      |L3.16|
00000c  2101              MOVS     r1,#1
00000e  e000              B        |L3.18|
                  |L3.16|
000010  2100              MOVS     r1,#0
                  |L3.18|
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       assert_param
;;;189      WWDG->CR = CR_WDGA_Set | Counter;
000018  f0440080          ORR      r0,r4,#0x80
00001c  4901              LDR      r1,|L3.36|
00001e  6008              STR      r0,[r1,#0]
;;;190    }
000020  bd10              POP      {r4,pc}
;;;191    
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;158      */
;;;159    void WWDG_EnableIT(void)
000000  2001              MOVS     r0,#1
;;;160    {
;;;161      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L4.8|
000004  6008              STR      r0,[r1,#0]
;;;162    }
000006  4770              BX       lr
;;;163    
                          ENDP

                  |L4.8|
                          DCD      0x420580a4

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;196      */
;;;197    FlagStatus WWDG_GetFlagStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;198    {
;;;199      return (FlagStatus)(WWDG->SR);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;200    }
000006  4770              BX       lr
;;;201    
                          ENDP

                  |L5.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;169      */
;;;170    void WWDG_SetCounter(uint8_t Counter)
000000  b510              PUSH     {r4,lr}
;;;171    {
000002  4604              MOV      r4,r0
;;;172      /* Check the parameters */
;;;173      assert_param(IS_WWDG_COUNTER(Counter));
000004  2c40              CMP      r4,#0x40
000006  db03              BLT      |L6.16|
000008  2c7f              CMP      r4,#0x7f
00000a  dc01              BGT      |L6.16|
00000c  2101              MOVS     r1,#1
00000e  e000              B        |L6.18|
                  |L6.16|
000010  2100              MOVS     r1,#0
                  |L6.18|
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       assert_param
;;;174      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;175         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;176      WWDG->CR = Counter & BIT_Mask;
000018  f004007f          AND      r0,r4,#0x7f
00001c  4901              LDR      r1,|L6.36|
00001e  6008              STR      r0,[r1,#0]
;;;177    }
000020  bd10              POP      {r4,pc}
;;;178    
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;117      */
;;;118    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000000  b570              PUSH     {r4-r6,lr}
;;;119    {
000002  4604              MOV      r4,r0
;;;120      uint32_t tmpreg = 0;
000004  2500              MOVS     r5,#0
;;;121      /* Check the parameters */
;;;122      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
000006  b13c              CBZ      r4,|L7.24|
000008  2c80              CMP      r4,#0x80
00000a  d005              BEQ      |L7.24|
00000c  f5b47f80          CMP      r4,#0x100
000010  d002              BEQ      |L7.24|
000012  f5b47fc0          CMP      r4,#0x180
000016  d101              BNE      |L7.28|
                  |L7.24|
000018  2101              MOVS     r1,#1
00001a  e000              B        |L7.30|
                  |L7.28|
00001c  2100              MOVS     r1,#0
                  |L7.30|
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       assert_param
;;;123      /* Clear WDGTB[1:0] bits */
;;;124      tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
000024  4803              LDR      r0,|L7.52|
000026  6800              LDR      r0,[r0,#0]
000028  f42075c0          BIC      r5,r0,#0x180
;;;125      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;126      tmpreg |= WWDG_Prescaler;
00002c  4325              ORRS     r5,r5,r4
;;;127      /* Store the new value */
;;;128      WWDG->CFR = tmpreg;
00002e  4801              LDR      r0,|L7.52|
000030  6005              STR      r5,[r0,#0]
;;;129    }
000032  bd70              POP      {r4-r6,pc}
;;;130    
                          ENDP

                  |L7.52|
                          DCD      0x40002c04

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;136      */
;;;137    void WWDG_SetWindowValue(uint8_t WindowValue)
000000  b538              PUSH     {r3-r5,lr}
;;;138    {
000002  4604              MOV      r4,r0
;;;139      __IO uint32_t tmpreg = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;140    
;;;141      /* Check the parameters */
;;;142      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
000008  2c7f              CMP      r4,#0x7f
00000a  dc01              BGT      |L8.16|
00000c  2101              MOVS     r1,#1
00000e  e000              B        |L8.18|
                  |L8.16|
000010  2100              MOVS     r1,#0
                  |L8.18|
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       assert_param
;;;143      /* Clear W[6:0] bits */
;;;144    
;;;145      tmpreg = WWDG->CFR & CFR_W_Mask;
000018  4806              LDR      r0,|L8.52|
00001a  6800              LDR      r0,[r0,#0]
00001c  f020007f          BIC      r0,r0,#0x7f
000020  9000              STR      r0,[sp,#0]
;;;146    
;;;147      /* Set W[6:0] bits according to WindowValue value */
;;;148      tmpreg |= WindowValue & (uint32_t) BIT_Mask;
000022  f004007f          AND      r0,r4,#0x7f
000026  9900              LDR      r1,[sp,#0]
000028  4308              ORRS     r0,r0,r1
00002a  9000              STR      r0,[sp,#0]
;;;149    
;;;150      /* Store the new value */
;;;151      WWDG->CFR = tmpreg;
00002c  4901              LDR      r1,|L8.52|
00002e  9800              LDR      r0,[sp,#0]
000030  6008              STR      r0,[r1,#0]
;;;152    }
000032  bd38              POP      {r3-r5,pc}
;;;153    
                          ENDP

                  |L8.52|
                          DCD      0x40002c04
