; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f10x_pwr.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f10x_pwr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Board\inc -I..\Chip\Hal_lib\inc -I..\Chip\Startup\inc -I..\coremark -I..\Chip\CMSIS -I.\RTE\_CoreMark -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F10X_MD --omf_browse=.\objects\stm32f10x_pwr.crf ..\Chip\Hal_lib\stm32f10x_pwr.c]
                          THUMB

                          AREA ||i.PWR_BackupAccessCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupAccessCmd PROC
;;;123      */
;;;124    void PWR_BackupAccessCmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;125    {
000002  4604              MOV      r4,r0
;;;126      /* Check the parameters */
;;;127      assert_param(IS_FUNCTIONAL_STATE(NewState));
000004  b10c              CBZ      r4,|L1.10|
000006  2c01              CMP      r4,#1
000008  d101              BNE      |L1.14|
                  |L1.10|
00000a  2101              MOVS     r1,#1
00000c  e000              B        |L1.16|
                  |L1.14|
00000e  2100              MOVS     r1,#0
                  |L1.16|
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       assert_param
;;;128      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000016  4801              LDR      r0,|L1.28|
000018  6204              STR      r4,[r0,#0x20]
;;;129    }
00001a  bd10              POP      {r4,pc}
;;;130    
                          ENDP

                  |L1.28|
                          DCD      0x420e0000

                          AREA ||i.PWR_ClearFlag||, CODE, READONLY, ALIGN=2

                  PWR_ClearFlag PROC
;;;286      */
;;;287    void PWR_ClearFlag(uint32_t PWR_FLAG)
000000  b510              PUSH     {r4,lr}
;;;288    {
000002  4604              MOV      r4,r0
;;;289      /* Check the parameters */
;;;290      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
000004  2c01              CMP      r4,#1
000006  d001              BEQ      |L2.12|
000008  2c02              CMP      r4,#2
00000a  d101              BNE      |L2.16|
                  |L2.12|
00000c  2101              MOVS     r1,#1
00000e  e000              B        |L2.18|
                  |L2.16|
000010  2100              MOVS     r1,#0
                  |L2.18|
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       assert_param
;;;291             
;;;292      PWR->CR |=  PWR_FLAG << 2;
000018  4803              LDR      r0,|L2.40|
00001a  6800              LDR      r0,[r0,#0]
00001c  ea400084          ORR      r0,r0,r4,LSL #2
000020  4901              LDR      r1,|L2.40|
000022  6008              STR      r0,[r1,#0]
;;;293    }
000024  bd10              POP      {r4,pc}
;;;294    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x40007000

                          AREA ||i.PWR_DeInit||, CODE, READONLY, ALIGN=1

                  PWR_DeInit PROC
;;;111      */
;;;112    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;115      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5080          MOV      r0,#0x10000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;116    }
000014  bd10              POP      {r4,pc}
;;;117    
                          ENDP


                          AREA ||i.PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTANDBYMode PROC
;;;235      */
;;;236    void PWR_EnterSTANDBYMode(void)
000000  480a              LDR      r0,|L4.44|
;;;237    {
;;;238      /* Clear Wake-up flag */
;;;239      PWR->CR |= PWR_CR_CWUF;
000002  6800              LDR      r0,[r0,#0]
000004  f0400004          ORR      r0,r0,#4
000008  4908              LDR      r1,|L4.44|
00000a  6008              STR      r0,[r1,#0]
;;;240      /* Select STANDBY mode */
;;;241      PWR->CR |= PWR_CR_PDDS;
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]
000010  f0400002          ORR      r0,r0,#2
000014  6008              STR      r0,[r1,#0]
;;;242      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;243      SCB->SCR |= SCB_SCR_SLEEPDEEP;
000016  4806              LDR      r0,|L4.48|
000018  6800              LDR      r0,[r0,#0]
00001a  f0400004          ORR      r0,r0,#4
00001e  4904              LDR      r1,|L4.48|
000020  6008              STR      r0,[r1,#0]
;;;244    /* This option is used to ensure that store operations are completed */
;;;245    #if defined ( __CC_ARM   )
;;;246      __force_stores();
000022  bf00              NOP      
000024  bf00              NOP      
;;;247    #endif
;;;248      /* Request Wait For Interrupt */
;;;249      __WFI();
000026  bf30              WFI      
;;;250    }
000028  4770              BX       lr
;;;251    
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      0x40007000
                  |L4.48|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTOPMode PROC
;;;196      */
;;;197    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
000000  b570              PUSH     {r4-r6,lr}
;;;198    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;199      uint32_t tmpreg = 0;
000006  2600              MOVS     r6,#0
;;;200      /* Check the parameters */
;;;201      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
000008  b10c              CBZ      r4,|L5.14|
00000a  2c01              CMP      r4,#1
00000c  d101              BNE      |L5.18|
                  |L5.14|
00000e  2101              MOVS     r1,#1
000010  e000              B        |L5.20|
                  |L5.18|
000012  2100              MOVS     r1,#0
                  |L5.20|
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       assert_param
;;;202      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
00001a  2d01              CMP      r5,#1
00001c  d001              BEQ      |L5.34|
00001e  2d02              CMP      r5,#2
000020  d101              BNE      |L5.38|
                  |L5.34|
000022  2101              MOVS     r1,#1
000024  e000              B        |L5.40|
                  |L5.38|
000026  2100              MOVS     r1,#0
                  |L5.40|
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       assert_param
;;;203      
;;;204      /* Select the regulator state in STOP mode ---------------------------------*/
;;;205      tmpreg = PWR->CR;
00002e  480c              LDR      r0,|L5.96|
000030  6806              LDR      r6,[r0,#0]
;;;206      /* Clear PDDS and LPDS bits */
;;;207      tmpreg &= CR_DS_MASK;
000032  f0260603          BIC      r6,r6,#3
;;;208      /* Set LPDS bit according to PWR_Regulator value */
;;;209      tmpreg |= PWR_Regulator;
000036  4326              ORRS     r6,r6,r4
;;;210      /* Store the new value */
;;;211      PWR->CR = tmpreg;
000038  6006              STR      r6,[r0,#0]
;;;212      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;213      SCB->SCR |= SCB_SCR_SLEEPDEEP;
00003a  480a              LDR      r0,|L5.100|
00003c  6800              LDR      r0,[r0,#0]
00003e  f0400004          ORR      r0,r0,#4
000042  4908              LDR      r1,|L5.100|
000044  6008              STR      r0,[r1,#0]
;;;214      
;;;215      /* Select STOP mode entry --------------------------------------------------*/
;;;216      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
000046  2d01              CMP      r5,#1
000048  d101              BNE      |L5.78|
;;;217      {   
;;;218        /* Request Wait For Interrupt */
;;;219        __WFI();
00004a  bf30              WFI      
00004c  e000              B        |L5.80|
                  |L5.78|
;;;220      }
;;;221      else
;;;222      {
;;;223        /* Request Wait For Event */
;;;224        __WFE();
00004e  bf20              WFE      
                  |L5.80|
;;;225      }
;;;226      
;;;227      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;228      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
000050  4804              LDR      r0,|L5.100|
000052  6800              LDR      r0,[r0,#0]
000054  f0200004          BIC      r0,r0,#4
000058  4902              LDR      r1,|L5.100|
00005a  6008              STR      r0,[r1,#0]
;;;229    }
00005c  bd70              POP      {r4-r6,pc}
;;;230    
                          ENDP

00005e  0000              DCW      0x0000
                  |L5.96|
                          DCD      0x40007000
                  |L5.100|
                          DCD      0xe000ed10

                          AREA ||i.PWR_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  PWR_GetFlagStatus PROC
;;;260      */
;;;261    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;262    {
000002  4604              MOV      r4,r0
;;;263      FlagStatus bitstatus = RESET;
000004  2500              MOVS     r5,#0
;;;264      /* Check the parameters */
;;;265      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
000006  2c01              CMP      r4,#1
000008  d003              BEQ      |L6.18|
00000a  2c02              CMP      r4,#2
00000c  d001              BEQ      |L6.18|
00000e  2c04              CMP      r4,#4
000010  d101              BNE      |L6.22|
                  |L6.18|
000012  2101              MOVS     r1,#1
000014  e000              B        |L6.24|
                  |L6.22|
000016  2100              MOVS     r1,#0
                  |L6.24|
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       assert_param
;;;266      
;;;267      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
00001e  4804              LDR      r0,|L6.48|
000020  6840              LDR      r0,[r0,#4]
000022  4020              ANDS     r0,r0,r4
000024  b108              CBZ      r0,|L6.42|
;;;268      {
;;;269        bitstatus = SET;
000026  2501              MOVS     r5,#1
000028  e000              B        |L6.44|
                  |L6.42|
;;;270      }
;;;271      else
;;;272      {
;;;273        bitstatus = RESET;
00002a  2500              MOVS     r5,#0
                  |L6.44|
;;;274      }
;;;275      /* Return the flag status */
;;;276      return bitstatus;
00002c  4628              MOV      r0,r5
;;;277    }
00002e  bd70              POP      {r4-r6,pc}
;;;278    
                          ENDP

                  |L6.48|
                          DCD      0x40007000

                          AREA ||i.PWR_PVDCmd||, CODE, READONLY, ALIGN=2

                  PWR_PVDCmd PROC
;;;136      */
;;;137    void PWR_PVDCmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;138    {
000002  4604              MOV      r4,r0
;;;139      /* Check the parameters */
;;;140      assert_param(IS_FUNCTIONAL_STATE(NewState));
000004  b10c              CBZ      r4,|L7.10|
000006  2c01              CMP      r4,#1
000008  d101              BNE      |L7.14|
                  |L7.10|
00000a  2101              MOVS     r1,#1
00000c  e000              B        |L7.16|
                  |L7.14|
00000e  2100              MOVS     r1,#0
                  |L7.16|
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       assert_param
;;;141      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
000016  4801              LDR      r0,|L7.28|
000018  6104              STR      r4,[r0,#0x10]
;;;142    }
00001a  bd10              POP      {r4,pc}
;;;143    
                          ENDP

                  |L7.28|
                          DCD      0x420e0000

                          AREA ||i.PWR_PVDLevelConfig||, CODE, READONLY, ALIGN=2

                  PWR_PVDLevelConfig PROC
;;;157      */
;;;158    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000000  b570              PUSH     {r4-r6,lr}
;;;159    {
000002  4604              MOV      r4,r0
;;;160      uint32_t tmpreg = 0;
000004  2500              MOVS     r5,#0
;;;161      /* Check the parameters */
;;;162      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
000006  b16c              CBZ      r4,|L8.36|
000008  2c20              CMP      r4,#0x20
00000a  d00b              BEQ      |L8.36|
00000c  2c40              CMP      r4,#0x40
00000e  d009              BEQ      |L8.36|
000010  2c60              CMP      r4,#0x60
000012  d007              BEQ      |L8.36|
000014  2c80              CMP      r4,#0x80
000016  d005              BEQ      |L8.36|
000018  2ca0              CMP      r4,#0xa0
00001a  d003              BEQ      |L8.36|
00001c  2cc0              CMP      r4,#0xc0
00001e  d001              BEQ      |L8.36|
000020  2ce0              CMP      r4,#0xe0
000022  d101              BNE      |L8.40|
                  |L8.36|
000024  2101              MOVS     r1,#1
000026  e000              B        |L8.42|
                  |L8.40|
000028  2100              MOVS     r1,#0
                  |L8.42|
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       assert_param
;;;163      tmpreg = PWR->CR;
000030  4803              LDR      r0,|L8.64|
000032  6805              LDR      r5,[r0,#0]
;;;164      /* Clear PLS[7:5] bits */
;;;165      tmpreg &= CR_PLS_MASK;
000034  f02505e0          BIC      r5,r5,#0xe0
;;;166      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;167      tmpreg |= PWR_PVDLevel;
000038  4325              ORRS     r5,r5,r4
;;;168      /* Store the new value */
;;;169      PWR->CR = tmpreg;
00003a  6005              STR      r5,[r0,#0]
;;;170    }
00003c  bd70              POP      {r4-r6,pc}
;;;171    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      0x40007000

                          AREA ||i.PWR_WakeUpPinCmd||, CODE, READONLY, ALIGN=2

                  PWR_WakeUpPinCmd PROC
;;;177      */
;;;178    void PWR_WakeUpPinCmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;179    {
000002  4604              MOV      r4,r0
;;;180      /* Check the parameters */
;;;181      assert_param(IS_FUNCTIONAL_STATE(NewState));
000004  b10c              CBZ      r4,|L9.10|
000006  2c01              CMP      r4,#1
000008  d101              BNE      |L9.14|
                  |L9.10|
00000a  2101              MOVS     r1,#1
00000c  e000              B        |L9.16|
                  |L9.14|
00000e  2100              MOVS     r1,#0
                  |L9.16|
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       assert_param
;;;182      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000016  4801              LDR      r0,|L9.28|
000018  6004              STR      r4,[r0,#0]
;;;183    }
00001a  bd10              POP      {r4,pc}
;;;184    
                          ENDP

                  |L9.28|
                          DCD      0x420e00a0
