; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f10x_spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f10x_spi.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Board\inc -I..\Chip\Hal_lib\inc -I..\Chip\Startup\inc -I..\coremark -I..\Chip\CMSIS -I.\RTE\_CoreMark -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F10X_MD --omf_browse=.\objects\stm32f10x_spi.crf ..\Chip\Hal_lib\stm32f10x_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=2

                  I2S_Cmd PROC
;;;450      */
;;;451    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;452    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;453      /* Check the parameters */
;;;454      assert_param(IS_SPI_23_PERIPH(SPIx));
000006  4910              LDR      r1,|L1.72|
000008  428c              CMP      r4,r1
00000a  d002              BEQ      |L1.18|
00000c  490f              LDR      r1,|L1.76|
00000e  428c              CMP      r4,r1
000010  d101              BNE      |L1.22|
                  |L1.18|
000012  2101              MOVS     r1,#1
000014  e000              B        |L1.24|
                  |L1.22|
000016  2100              MOVS     r1,#0
                  |L1.24|
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       assert_param
;;;455      assert_param(IS_FUNCTIONAL_STATE(NewState));
00001e  b10d              CBZ      r5,|L1.36|
000020  2d01              CMP      r5,#1
000022  d101              BNE      |L1.40|
                  |L1.36|
000024  2101              MOVS     r1,#1
000026  e000              B        |L1.42|
                  |L1.40|
000028  2100              MOVS     r1,#0
                  |L1.42|
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       assert_param
;;;456      if (NewState != DISABLE)
000030  b125              CBZ      r5,|L1.60|
;;;457      {
;;;458        /* Enable the selected SPI peripheral (in I2S mode) */
;;;459        SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
000032  8ba0              LDRH     r0,[r4,#0x1c]
000034  f4406080          ORR      r0,r0,#0x400
000038  83a0              STRH     r0,[r4,#0x1c]
00003a  e004              B        |L1.70|
                  |L1.60|
;;;460      }
;;;461      else
;;;462      {
;;;463        /* Disable the selected SPI peripheral (in I2S mode) */
;;;464        SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
00003c  8ba0              LDRH     r0,[r4,#0x1c]
00003e  f64f31ff          MOV      r1,#0xfbff
000042  4008              ANDS     r0,r0,r1
000044  83a0              STRH     r0,[r4,#0x1c]
                  |L1.70|
;;;465      }
;;;466    }
000046  bd70              POP      {r4-r6,pc}
;;;467    
                          ENDP

                  |L1.72|
                          DCD      0x40003800
                  |L1.76|
                          DCD      0x40003c00

                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=2

                  I2S_Init PROC
;;;218      */
;;;219    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;220    {
000004  b085              SUB      sp,sp,#0x14
000006  4605              MOV      r5,r0
000008  460c              MOV      r4,r1
;;;221      uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
00000a  f04f0900          MOV      r9,#0
00000e  2702              MOVS     r7,#2
000010  f04f0800          MOV      r8,#0
000014  f04f0b01          MOV      r11,#1
;;;222      uint32_t tmp = 0;
000018  2600              MOVS     r6,#0
;;;223      RCC_ClocksTypeDef RCC_Clocks;
;;;224      uint32_t sourceclock = 0;
00001a  46b2              MOV      r10,r6
;;;225      
;;;226      /* Check the I2S parameters */
;;;227      assert_param(IS_SPI_23_PERIPH(SPIx));
00001c  4968              LDR      r1,|L2.448|
00001e  428d              CMP      r5,r1
000020  d002              BEQ      |L2.40|
000022  4968              LDR      r1,|L2.452|
000024  428d              CMP      r5,r1
000026  d101              BNE      |L2.44|
                  |L2.40|
000028  2101              MOVS     r1,#1
00002a  e000              B        |L2.46|
                  |L2.44|
00002c  2100              MOVS     r1,#0
                  |L2.46|
00002e  4608              MOV      r0,r1
000030  f7fffffe          BL       assert_param
;;;228      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
000034  8821              LDRH     r1,[r4,#0]
000036  b159              CBZ      r1,|L2.80|
000038  8821              LDRH     r1,[r4,#0]
00003a  f5b17f80          CMP      r1,#0x100
00003e  d007              BEQ      |L2.80|
000040  8821              LDRH     r1,[r4,#0]
000042  f5b17f00          CMP      r1,#0x200
000046  d003              BEQ      |L2.80|
000048  8821              LDRH     r1,[r4,#0]
00004a  f5b17f40          CMP      r1,#0x300
00004e  d101              BNE      |L2.84|
                  |L2.80|
000050  2101              MOVS     r1,#1
000052  e000              B        |L2.86|
                  |L2.84|
000054  2100              MOVS     r1,#0
                  |L2.86|
000056  4608              MOV      r0,r1
000058  f7fffffe          BL       assert_param
;;;229      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
00005c  8861              LDRH     r1,[r4,#2]
00005e  b159              CBZ      r1,|L2.120|
000060  8861              LDRH     r1,[r4,#2]
000062  2910              CMP      r1,#0x10
000064  d008              BEQ      |L2.120|
000066  8861              LDRH     r1,[r4,#2]
000068  2920              CMP      r1,#0x20
00006a  d005              BEQ      |L2.120|
00006c  8861              LDRH     r1,[r4,#2]
00006e  2930              CMP      r1,#0x30
000070  d002              BEQ      |L2.120|
000072  8861              LDRH     r1,[r4,#2]
000074  29b0              CMP      r1,#0xb0
000076  d101              BNE      |L2.124|
                  |L2.120|
000078  2101              MOVS     r1,#1
00007a  e000              B        |L2.126|
                  |L2.124|
00007c  2100              MOVS     r1,#0
                  |L2.126|
00007e  4608              MOV      r0,r1
000080  f7fffffe          BL       assert_param
;;;230      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
000084  88a1              LDRH     r1,[r4,#4]
000086  b141              CBZ      r1,|L2.154|
000088  88a1              LDRH     r1,[r4,#4]
00008a  2901              CMP      r1,#1
00008c  d005              BEQ      |L2.154|
00008e  88a1              LDRH     r1,[r4,#4]
000090  2903              CMP      r1,#3
000092  d002              BEQ      |L2.154|
000094  88a1              LDRH     r1,[r4,#4]
000096  2905              CMP      r1,#5
000098  d101              BNE      |L2.158|
                  |L2.154|
00009a  2101              MOVS     r1,#1
00009c  e000              B        |L2.160|
                  |L2.158|
00009e  2100              MOVS     r1,#0
                  |L2.160|
0000a0  4608              MOV      r0,r1
0000a2  f7fffffe          BL       assert_param
;;;231      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
0000a6  88e1              LDRH     r1,[r4,#6]
0000a8  f5b17f00          CMP      r1,#0x200
0000ac  d001              BEQ      |L2.178|
0000ae  88e1              LDRH     r1,[r4,#6]
0000b0  b909              CBNZ     r1,|L2.182|
                  |L2.178|
0000b2  2101              MOVS     r1,#1
0000b4  e000              B        |L2.184|
                  |L2.182|
0000b6  2100              MOVS     r1,#0
                  |L2.184|
0000b8  4608              MOV      r0,r1
0000ba  f7fffffe          BL       assert_param
;;;232      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
0000be  68a1              LDR      r1,[r4,#8]
0000c0  f5b15ffa          CMP      r1,#0x1f40
0000c4  d303              BCC      |L2.206|
0000c6  4a40              LDR      r2,|L2.456|
0000c8  68a1              LDR      r1,[r4,#8]
0000ca  4291              CMP      r1,r2
0000cc  d902              BLS      |L2.212|
                  |L2.206|
0000ce  68a1              LDR      r1,[r4,#8]
0000d0  2902              CMP      r1,#2
0000d2  d101              BNE      |L2.216|
                  |L2.212|
0000d4  2101              MOVS     r1,#1
0000d6  e000              B        |L2.218|
                  |L2.216|
0000d8  2100              MOVS     r1,#0
                  |L2.218|
0000da  4608              MOV      r0,r1
0000dc  f7fffffe          BL       assert_param
;;;233      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
0000e0  89a1              LDRH     r1,[r4,#0xc]
0000e2  b111              CBZ      r1,|L2.234|
0000e4  89a1              LDRH     r1,[r4,#0xc]
0000e6  2908              CMP      r1,#8
0000e8  d101              BNE      |L2.238|
                  |L2.234|
0000ea  2101              MOVS     r1,#1
0000ec  e000              B        |L2.240|
                  |L2.238|
0000ee  2100              MOVS     r1,#0
                  |L2.240|
0000f0  4608              MOV      r0,r1
0000f2  f7fffffe          BL       assert_param
;;;234    
;;;235    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;236      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;237      SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
0000f6  8ba8              LDRH     r0,[r5,#0x1c]
0000f8  f24f0140          MOV      r1,#0xf040
0000fc  4008              ANDS     r0,r0,r1
0000fe  83a8              STRH     r0,[r5,#0x1c]
;;;238      SPIx->I2SPR = 0x0002;
000100  2002              MOVS     r0,#2
000102  8428              STRH     r0,[r5,#0x20]
;;;239      
;;;240      /* Get the I2SCFGR register value */
;;;241      tmpreg = SPIx->I2SCFGR;
000104  f8b5901c          LDRH     r9,[r5,#0x1c]
;;;242      
;;;243      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;244      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
000108  68a0              LDR      r0,[r4,#8]
00010a  2802              CMP      r0,#2
00010c  d103              BNE      |L2.278|
;;;245      {
;;;246        i2sodd = (uint16_t)0;
00010e  f04f0800          MOV      r8,#0
;;;247        i2sdiv = (uint16_t)2;   
000112  2702              MOVS     r7,#2
000114  e038              B        |L2.392|
                  |L2.278|
;;;248      }
;;;249      /* If the requested audio frequency is not the default, compute the prescaler */
;;;250      else
;;;251      {
;;;252        /* Check the frame length (For the Prescaler computing) */
;;;253        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
000116  88a0              LDRH     r0,[r4,#4]
000118  b910              CBNZ     r0,|L2.288|
;;;254        {
;;;255          /* Packet length is 16 bits */
;;;256          packetlength = 1;
00011a  f04f0b01          MOV      r11,#1
00011e  e001              B        |L2.292|
                  |L2.288|
;;;257        }
;;;258        else
;;;259        {
;;;260          /* Packet length is 32 bits */
;;;261          packetlength = 2;
000120  f04f0b02          MOV      r11,#2
                  |L2.292|
;;;262        }
;;;263    
;;;264        /* Get the I2S clock source mask depending on the peripheral number */
;;;265        if(((uint32_t)SPIx) == SPI2_BASE)
000124  4826              LDR      r0,|L2.448|
000126  4285              CMP      r5,r0
000128  d100              BNE      |L2.300|
;;;266        {
;;;267          /* The mask is relative to I2S2 */
;;;268          tmp = I2S2_CLOCK_SRC;
00012a  e000              B        |L2.302|
                  |L2.300|
;;;269        }
;;;270        else 
;;;271        {
;;;272          /* The mask is relative to I2S3 */      
;;;273          tmp = I2S3_CLOCK_SRC;
00012c  bf00              NOP      
                  |L2.302|
;;;274        }
;;;275    
;;;276        /* Check the I2S clock source configuration depending on the Device:
;;;277           Only Connectivity line devices have the PLL3 VCO clock */
;;;278    #ifdef STM32F10X_CL
;;;279        if((RCC->CFGR2 & tmp) != 0)
;;;280        {
;;;281          /* Get the configuration bits of RCC PLL3 multiplier */
;;;282          tmp = (uint32_t)((RCC->CFGR2 & I2S_MUL_MASK) >> 12);
;;;283    
;;;284          /* Get the value of the PLL3 multiplier */      
;;;285          if((tmp > 5) && (tmp < 15))
;;;286          {
;;;287            /* Multiplier is between 8 and 14 (value 15 is forbidden) */
;;;288            tmp += 2;
;;;289          }
;;;290          else
;;;291          {
;;;292            if (tmp == 15)
;;;293            {
;;;294              /* Multiplier is 20 */
;;;295              tmp = 20;
;;;296            }
;;;297          }      
;;;298          /* Get the PREDIV2 value */
;;;299          sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
;;;300          
;;;301          /* Calculate the Source Clock frequency based on PLL3 and PREDIV2 values */
;;;302          sourceclock = (uint32_t) ((HSE_Value / sourceclock) * tmp * 2); 
;;;303        }
;;;304        else
;;;305        {
;;;306          /* I2S Clock source is System clock: Get System Clock frequency */
;;;307          RCC_GetClocksFreq(&RCC_Clocks);      
;;;308          
;;;309          /* Get the source clock value: based on System Clock value */
;;;310          sourceclock = RCC_Clocks.SYSCLK_Frequency;
;;;311        }        
;;;312    #else /* STM32F10X_HD */
;;;313        /* I2S Clock source is System clock: Get System Clock frequency */
;;;314        RCC_GetClocksFreq(&RCC_Clocks);      
00012e  4668              MOV      r0,sp
000130  f7fffffe          BL       RCC_GetClocksFreq
;;;315          
;;;316        /* Get the source clock value: based on System Clock value */
;;;317        sourceclock = RCC_Clocks.SYSCLK_Frequency;    
000134  f8dda000          LDR      r10,[sp,#0]
;;;318    #endif /* STM32F10X_CL */    
;;;319    
;;;320        /* Compute the Real divider depending on the MCLK output state with a floating point */
;;;321        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
000138  88e0              LDRH     r0,[r4,#6]
00013a  f5b07f00          CMP      r0,#0x200
00013e  d10a              BNE      |L2.342|
;;;322        {
;;;323          /* MCLK output is enabled */
;;;324          tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
000140  ea4f201a          LSR      r0,r10,#8
000144  eb000080          ADD      r0,r0,r0,LSL #2
000148  0040              LSLS     r0,r0,#1
00014a  68a1              LDR      r1,[r4,#8]
00014c  fbb0f0f1          UDIV     r0,r0,r1
000150  1d40              ADDS     r0,r0,#5
000152  b286              UXTH     r6,r0
000154  e00b              B        |L2.366|
                  |L2.342|
;;;325        }
;;;326        else
;;;327        {
;;;328          /* MCLK output is disabled */
;;;329          tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
000156  ea4f104b          LSL      r0,r11,#5
00015a  fbbaf0f0          UDIV     r0,r10,r0
00015e  eb000080          ADD      r0,r0,r0,LSL #2
000162  0040              LSLS     r0,r0,#1
000164  68a1              LDR      r1,[r4,#8]
000166  fbb0f0f1          UDIV     r0,r0,r1
00016a  1d40              ADDS     r0,r0,#5
00016c  b286              UXTH     r6,r0
                  |L2.366|
;;;330        }
;;;331        
;;;332        /* Remove the floating point */
;;;333        tmp = tmp / 10;  
00016e  200a              MOVS     r0,#0xa
000170  fbb6f6f0          UDIV     r6,r6,r0
;;;334          
;;;335        /* Check the parity of the divider */
;;;336        i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
000174  f0060801          AND      r8,r6,#1
;;;337       
;;;338        /* Compute the i2sdiv prescaler */
;;;339        i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
000178  eba60008          SUB      r0,r6,r8
00017c  f3c0074f          UBFX     r7,r0,#1,#16
;;;340       
;;;341        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;342        i2sodd = (uint16_t) (i2sodd << 8);
000180  f64f70ff          MOV      r0,#0xffff
000184  ea002808          AND      r8,r0,r8,LSL #8
                  |L2.392|
;;;343      }
;;;344      
;;;345      /* Test if the divider is 1 or 0 or greater than 0xFF */
;;;346      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
000188  2f02              CMP      r7,#2
00018a  db01              BLT      |L2.400|
00018c  2fff              CMP      r7,#0xff
00018e  dd02              BLE      |L2.406|
                  |L2.400|
;;;347      {
;;;348        /* Set the default values */
;;;349        i2sdiv = 2;
000190  2702              MOVS     r7,#2
;;;350        i2sodd = 0;
000192  f04f0800          MOV      r8,#0
                  |L2.406|
;;;351      }
;;;352    
;;;353      /* Write to SPIx I2SPR register the computed value */
;;;354      SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
000196  88e0              LDRH     r0,[r4,#6]
000198  ea400008          ORR      r0,r0,r8
00019c  4338              ORRS     r0,r0,r7
00019e  8428              STRH     r0,[r5,#0x20]
;;;355     
;;;356      /* Configure the I2S with the SPI_InitStruct values */
;;;357      tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
0001a0  88a0              LDRH     r0,[r4,#4]
0001a2  89a1              LDRH     r1,[r4,#0xc]
0001a4  4308              ORRS     r0,r0,r1
0001a6  8861              LDRH     r1,[r4,#2]
0001a8  4308              ORRS     r0,r0,r1
0001aa  8821              LDRH     r1,[r4,#0]
0001ac  4308              ORRS     r0,r0,r1
0001ae  f4406000          ORR      r0,r0,#0x800
0001b2  ea400909          ORR      r9,r0,r9
;;;358                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;359                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;360     
;;;361      /* Write to SPIx I2SCFGR */  
;;;362      SPIx->I2SCFGR = tmpreg;   
0001b6  f8a5901c          STRH     r9,[r5,#0x1c]
;;;363    }
0001ba  b005              ADD      sp,sp,#0x14
0001bc  e8bd8ff0          POP      {r4-r11,pc}
;;;364    
                          ENDP

                  |L2.448|
                          DCD      0x40003800
                  |L2.452|
                          DCD      0x40003c00
                  |L2.456|
                          DCD      0x0002ee00

                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;397      */
;;;398    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;399    {
;;;400    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;401      /* Initialize the I2S_Mode member */
;;;402      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;403      
;;;404      /* Initialize the I2S_Standard member */
;;;405      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;406      
;;;407      /* Initialize the I2S_DataFormat member */
;;;408      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;409      
;;;410      /* Initialize the I2S_MCLKOutput member */
;;;411      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;412      
;;;413      /* Initialize the I2S_AudioFreq member */
;;;414      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2102              MOVS     r1,#2
00000c  6081              STR      r1,[r0,#8]
;;;415      
;;;416      /* Initialize the I2S_CPOL member */
;;;417      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000e  2100              MOVS     r1,#0
000010  8181              STRH     r1,[r0,#0xc]
;;;418    }
000012  4770              BX       lr
;;;419    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=2

                  SPI_BiDirectionalLineConfig PROC
;;;731      */
;;;732    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
000000  b570              PUSH     {r4-r6,lr}
;;;733    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;734      /* Check the parameters */
;;;735      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000006  4915              LDR      r1,|L4.92|
000008  428c              CMP      r4,r1
00000a  d005              BEQ      |L4.24|
00000c  4914              LDR      r1,|L4.96|
00000e  428c              CMP      r4,r1
000010  d002              BEQ      |L4.24|
000012  4914              LDR      r1,|L4.100|
000014  428c              CMP      r4,r1
000016  d101              BNE      |L4.28|
                  |L4.24|
000018  2101              MOVS     r1,#1
00001a  e000              B        |L4.30|
                  |L4.28|
00001c  2100              MOVS     r1,#0
                  |L4.30|
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       assert_param
;;;736      assert_param(IS_SPI_DIRECTION(SPI_Direction));
000024  f64b71ff          MOV      r1,#0xbfff
000028  428d              CMP      r5,r1
00002a  d002              BEQ      |L4.50|
00002c  f5b54f80          CMP      r5,#0x4000
000030  d101              BNE      |L4.54|
                  |L4.50|
000032  2101              MOVS     r1,#1
000034  e000              B        |L4.56|
                  |L4.54|
000036  2100              MOVS     r1,#0
                  |L4.56|
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       assert_param
;;;737      if (SPI_Direction == SPI_Direction_Tx)
00003e  f5b54f80          CMP      r5,#0x4000
000042  d104              BNE      |L4.78|
;;;738      {
;;;739        /* Set the Tx only mode */
;;;740        SPIx->CR1 |= SPI_Direction_Tx;
000044  8820              LDRH     r0,[r4,#0]
000046  f4404080          ORR      r0,r0,#0x4000
00004a  8020              STRH     r0,[r4,#0]
00004c  e004              B        |L4.88|
                  |L4.78|
;;;741      }
;;;742      else
;;;743      {
;;;744        /* Set the Rx only mode */
;;;745        SPIx->CR1 &= SPI_Direction_Rx;
00004e  8820              LDRH     r0,[r4,#0]
000050  f64b71ff          MOV      r1,#0xbfff
000054  4008              ANDS     r0,r0,r1
000056  8020              STRH     r0,[r4,#0]
                  |L4.88|
;;;746      }
;;;747    }
000058  bd70              POP      {r4-r6,pc}
;;;748    
                          ENDP

00005a  0000              DCW      0x0000
                  |L4.92|
                          DCD      0x40013000
                  |L4.96|
                          DCD      0x40003800
                  |L4.100|
                          DCD      0x40003c00

                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=2

                  SPI_CalculateCRC PROC
;;;662      */
;;;663    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;664    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;665      /* Check the parameters */
;;;666      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000006  4912              LDR      r1,|L5.80|
000008  428c              CMP      r4,r1
00000a  d005              BEQ      |L5.24|
00000c  4911              LDR      r1,|L5.84|
00000e  428c              CMP      r4,r1
000010  d002              BEQ      |L5.24|
000012  4911              LDR      r1,|L5.88|
000014  428c              CMP      r4,r1
000016  d101              BNE      |L5.28|
                  |L5.24|
000018  2101              MOVS     r1,#1
00001a  e000              B        |L5.30|
                  |L5.28|
00001c  2100              MOVS     r1,#0
                  |L5.30|
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       assert_param
;;;667      assert_param(IS_FUNCTIONAL_STATE(NewState));
000024  b10d              CBZ      r5,|L5.42|
000026  2d01              CMP      r5,#1
000028  d101              BNE      |L5.46|
                  |L5.42|
00002a  2101              MOVS     r1,#1
00002c  e000              B        |L5.48|
                  |L5.46|
00002e  2100              MOVS     r1,#0
                  |L5.48|
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       assert_param
;;;668      if (NewState != DISABLE)
000036  b125              CBZ      r5,|L5.66|
;;;669      {
;;;670        /* Enable the selected SPI CRC calculation */
;;;671        SPIx->CR1 |= CR1_CRCEN_Set;
000038  8820              LDRH     r0,[r4,#0]
00003a  f4405000          ORR      r0,r0,#0x2000
00003e  8020              STRH     r0,[r4,#0]
000040  e004              B        |L5.76|
                  |L5.66|
;;;672      }
;;;673      else
;;;674      {
;;;675        /* Disable the selected SPI CRC calculation */
;;;676        SPIx->CR1 &= CR1_CRCEN_Reset;
000042  8820              LDRH     r0,[r4,#0]
000044  f64d71ff          MOV      r1,#0xdfff
000048  4008              ANDS     r0,r0,r1
00004a  8020              STRH     r0,[r4,#0]
                  |L5.76|
;;;677      }
;;;678    }
00004c  bd70              POP      {r4-r6,pc}
;;;679    
                          ENDP

00004e  0000              DCW      0x0000
                  |L5.80|
                          DCD      0x40013000
                  |L5.84|
                          DCD      0x40003800
                  |L5.88|
                          DCD      0x40003c00

                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=2

                  SPI_Cmd PROC
;;;426      */
;;;427    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;428    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;429      /* Check the parameters */
;;;430      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000006  4912              LDR      r1,|L6.80|
000008  428c              CMP      r4,r1
00000a  d005              BEQ      |L6.24|
00000c  4911              LDR      r1,|L6.84|
00000e  428c              CMP      r4,r1
000010  d002              BEQ      |L6.24|
000012  4911              LDR      r1,|L6.88|
000014  428c              CMP      r4,r1
000016  d101              BNE      |L6.28|
                  |L6.24|
000018  2101              MOVS     r1,#1
00001a  e000              B        |L6.30|
                  |L6.28|
00001c  2100              MOVS     r1,#0
                  |L6.30|
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       assert_param
;;;431      assert_param(IS_FUNCTIONAL_STATE(NewState));
000024  b10d              CBZ      r5,|L6.42|
000026  2d01              CMP      r5,#1
000028  d101              BNE      |L6.46|
                  |L6.42|
00002a  2101              MOVS     r1,#1
00002c  e000              B        |L6.48|
                  |L6.46|
00002e  2100              MOVS     r1,#0
                  |L6.48|
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       assert_param
;;;432      if (NewState != DISABLE)
000036  b125              CBZ      r5,|L6.66|
;;;433      {
;;;434        /* Enable the selected SPI peripheral */
;;;435        SPIx->CR1 |= CR1_SPE_Set;
000038  8820              LDRH     r0,[r4,#0]
00003a  f0400040          ORR      r0,r0,#0x40
00003e  8020              STRH     r0,[r4,#0]
000040  e004              B        |L6.76|
                  |L6.66|
;;;436      }
;;;437      else
;;;438      {
;;;439        /* Disable the selected SPI peripheral */
;;;440        SPIx->CR1 &= CR1_SPE_Reset;
000042  8820              LDRH     r0,[r4,#0]
000044  f64f71bf          MOV      r1,#0xffbf
000048  4008              ANDS     r0,r0,r1
00004a  8020              STRH     r0,[r4,#0]
                  |L6.76|
;;;441      }
;;;442    }
00004c  bd70              POP      {r4-r6,pc}
;;;443    
                          ENDP

00004e  0000              DCW      0x0000
                  |L6.80|
                          DCD      0x40013000
                  |L6.84|
                          DCD      0x40003800
                  |L6.88|
                          DCD      0x40003c00

                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=2

                  SPI_DataSizeConfig PROC
;;;630      */
;;;631    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
000000  b570              PUSH     {r4-r6,lr}
;;;632    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;633      /* Check the parameters */
;;;634      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000006  4911              LDR      r1,|L7.76|
000008  428c              CMP      r4,r1
00000a  d005              BEQ      |L7.24|
00000c  4910              LDR      r1,|L7.80|
00000e  428c              CMP      r4,r1
000010  d002              BEQ      |L7.24|
000012  4910              LDR      r1,|L7.84|
000014  428c              CMP      r4,r1
000016  d101              BNE      |L7.28|
                  |L7.24|
000018  2101              MOVS     r1,#1
00001a  e000              B        |L7.30|
                  |L7.28|
00001c  2100              MOVS     r1,#0
                  |L7.30|
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       assert_param
;;;635      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
000024  f5b56f00          CMP      r5,#0x800
000028  d000              BEQ      |L7.44|
00002a  b90d              CBNZ     r5,|L7.48|
                  |L7.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L7.50|
                  |L7.48|
000030  2100              MOVS     r1,#0
                  |L7.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;636      /* Clear DFF bit */
;;;637      SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
000038  8820              LDRH     r0,[r4,#0]
00003a  f24f71ff          MOV      r1,#0xf7ff
00003e  4008              ANDS     r0,r0,r1
000040  8020              STRH     r0,[r4,#0]
;;;638      /* Set new DFF bit value */
;;;639      SPIx->CR1 |= SPI_DataSize;
000042  8820              LDRH     r0,[r4,#0]
000044  4328              ORRS     r0,r0,r5
000046  8020              STRH     r0,[r4,#0]
;;;640    }
000048  bd70              POP      {r4-r6,pc}
;;;641    
                          ENDP

00004a  0000              DCW      0x0000
                  |L7.76|
                          DCD      0x40013000
                  |L7.80|
                          DCD      0x40003800
                  |L7.84|
                          DCD      0x40003c00

                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=2

                  SPI_GetCRC PROC
;;;688      */
;;;689    uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
000000  b570              PUSH     {r4-r6,lr}
;;;690    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;691      uint16_t crcreg = 0;
000006  2600              MOVS     r6,#0
;;;692      /* Check the parameters */
;;;693      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000008  490f              LDR      r1,|L8.72|
00000a  428c              CMP      r4,r1
00000c  d005              BEQ      |L8.26|
00000e  490f              LDR      r1,|L8.76|
000010  428c              CMP      r4,r1
000012  d002              BEQ      |L8.26|
000014  490e              LDR      r1,|L8.80|
000016  428c              CMP      r4,r1
000018  d101              BNE      |L8.30|
                  |L8.26|
00001a  2101              MOVS     r1,#1
00001c  e000              B        |L8.32|
                  |L8.30|
00001e  2100              MOVS     r1,#0
                  |L8.32|
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       assert_param
;;;694      assert_param(IS_SPI_CRC(SPI_CRC));
000026  b10d              CBZ      r5,|L8.44|
000028  2d01              CMP      r5,#1
00002a  d101              BNE      |L8.48|
                  |L8.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L8.50|
                  |L8.48|
000030  2100              MOVS     r1,#0
                  |L8.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;695      if (SPI_CRC != SPI_CRC_Rx)
000038  2d01              CMP      r5,#1
00003a  d001              BEQ      |L8.64|
;;;696      {
;;;697        /* Get the Tx CRC register */
;;;698        crcreg = SPIx->TXCRCR;
00003c  8b26              LDRH     r6,[r4,#0x18]
00003e  e000              B        |L8.66|
                  |L8.64|
;;;699      }
;;;700      else
;;;701      {
;;;702        /* Get the Rx CRC register */
;;;703        crcreg = SPIx->RXCRCR;
000040  8aa6              LDRH     r6,[r4,#0x14]
                  |L8.66|
;;;704      }
;;;705      /* Return the selected CRC register */
;;;706      return crcreg;
000042  4630              MOV      r0,r6
;;;707    }
000044  bd70              POP      {r4-r6,pc}
;;;708    
                          ENDP

000046  0000              DCW      0x0000
                  |L8.72|
                          DCD      0x40013000
                  |L8.76|
                          DCD      0x40003800
                  |L8.80|
                          DCD      0x40003c00

                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=2

                  SPI_GetCRCPolynomial PROC
;;;713      */
;;;714    uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;715    {
000002  4604              MOV      r4,r0
;;;716      /* Check the parameters */
;;;717      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000004  4908              LDR      r1,|L9.40|
000006  428c              CMP      r4,r1
000008  d005              BEQ      |L9.22|
00000a  4908              LDR      r1,|L9.44|
00000c  428c              CMP      r4,r1
00000e  d002              BEQ      |L9.22|
000010  4907              LDR      r1,|L9.48|
000012  428c              CMP      r4,r1
000014  d101              BNE      |L9.26|
                  |L9.22|
000016  2101              MOVS     r1,#1
000018  e000              B        |L9.28|
                  |L9.26|
00001a  2100              MOVS     r1,#0
                  |L9.28|
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       assert_param
;;;718      
;;;719      /* Return the CRC polynomial register */
;;;720      return SPIx->CRCPR;
000022  8a20              LDRH     r0,[r4,#0x10]
;;;721    }
000024  bd10              POP      {r4,pc}
;;;722    
                          ENDP

000026  0000              DCW      0x0000
                  |L9.40|
                          DCD      0x40013000
                  |L9.44|
                          DCD      0x40003800
                  |L9.48|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=2

                  SPI_I2S_ClearFlag PROC
;;;803      */
;;;804    void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;805    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;806      /* Check the parameters */
;;;807      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000006  490d              LDR      r1,|L10.60|
000008  428c              CMP      r4,r1
00000a  d005              BEQ      |L10.24|
00000c  490c              LDR      r1,|L10.64|
00000e  428c              CMP      r4,r1
000010  d002              BEQ      |L10.24|
000012  490c              LDR      r1,|L10.68|
000014  428c              CMP      r4,r1
000016  d101              BNE      |L10.28|
                  |L10.24|
000018  2101              MOVS     r1,#1
00001a  e000              B        |L10.30|
                  |L10.28|
00001c  2100              MOVS     r1,#0
                  |L10.30|
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       assert_param
;;;808      assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
000024  2d10              CMP      r5,#0x10
000026  d101              BNE      |L10.44|
000028  2101              MOVS     r1,#1
00002a  e000              B        |L10.46|
                  |L10.44|
00002c  2100              MOVS     r1,#0
                  |L10.46|
00002e  4608              MOV      r0,r1
000030  f7fffffe          BL       assert_param
;;;809        
;;;810        /* Clear the selected SPI CRC Error (CRCERR) flag */
;;;811        SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
000034  43e8              MVNS     r0,r5
000036  8120              STRH     r0,[r4,#8]
;;;812    }
000038  bd70              POP      {r4-r6,pc}
;;;813    
                          ENDP

00003a  0000              DCW      0x0000
                  |L10.60|
                          DCD      0x40013000
                  |L10.64|
                          DCD      0x40003800
                  |L10.68|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_ClearITPendingBit PROC
;;;882      */
;;;883    void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;884    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;885      uint16_t itpos = 0;
000006  2600              MOVS     r6,#0
;;;886      /* Check the parameters */
;;;887      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000008  490f              LDR      r1,|L11.72|
00000a  428c              CMP      r4,r1
00000c  d005              BEQ      |L11.26|
00000e  490f              LDR      r1,|L11.76|
000010  428c              CMP      r4,r1
000012  d002              BEQ      |L11.26|
000014  490e              LDR      r1,|L11.80|
000016  428c              CMP      r4,r1
000018  d101              BNE      |L11.30|
                  |L11.26|
00001a  2101              MOVS     r1,#1
00001c  e000              B        |L11.32|
                  |L11.30|
00001e  2100              MOVS     r1,#0
                  |L11.32|
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       assert_param
;;;888      assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
000026  2d54              CMP      r5,#0x54
000028  d101              BNE      |L11.46|
00002a  2101              MOVS     r1,#1
00002c  e000              B        |L11.48|
                  |L11.46|
00002e  2100              MOVS     r1,#0
                  |L11.48|
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       assert_param
;;;889    
;;;890      /* Get the SPI IT index */
;;;891      itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000036  f005010f          AND      r1,r5,#0xf
00003a  2001              MOVS     r0,#1
00003c  4088              LSLS     r0,r0,r1
00003e  b286              UXTH     r6,r0
;;;892    
;;;893      /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
;;;894      SPIx->SR = (uint16_t)~itpos;
000040  43f0              MVNS     r0,r6
000042  8120              STRH     r0,[r4,#8]
;;;895    }
000044  bd70              POP      {r4-r6,pc}
;;;896    /**
                          ENDP

000046  0000              DCW      0x0000
                  |L11.72|
                          DCD      0x40013000
                  |L11.76|
                          DCD      0x40003800
                  |L11.80|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DMACmd PROC
;;;520      */
;;;521    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;522    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;523      /* Check the parameters */
;;;524      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000008  4915              LDR      r1,|L12.96|
00000a  428c              CMP      r4,r1
00000c  d005              BEQ      |L12.26|
00000e  4915              LDR      r1,|L12.100|
000010  428c              CMP      r4,r1
000012  d002              BEQ      |L12.26|
000014  4914              LDR      r1,|L12.104|
000016  428c              CMP      r4,r1
000018  d101              BNE      |L12.30|
                  |L12.26|
00001a  2101              MOVS     r1,#1
00001c  e000              B        |L12.32|
                  |L12.30|
00001e  2100              MOVS     r1,#0
                  |L12.32|
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       assert_param
;;;525      assert_param(IS_FUNCTIONAL_STATE(NewState));
000026  b10e              CBZ      r6,|L12.44|
000028  2e01              CMP      r6,#1
00002a  d101              BNE      |L12.48|
                  |L12.44|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L12.50|
                  |L12.48|
000030  2100              MOVS     r1,#0
                  |L12.50|
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       assert_param
;;;526      assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
000038  f64f71fc          MOV      r1,#0xfffc
00003c  4029              ANDS     r1,r1,r5
00003e  b911              CBNZ     r1,|L12.70|
000040  b10d              CBZ      r5,|L12.70|
000042  2101              MOVS     r1,#1
000044  e000              B        |L12.72|
                  |L12.70|
000046  2100              MOVS     r1,#0
                  |L12.72|
000048  4608              MOV      r0,r1
00004a  f7fffffe          BL       assert_param
;;;527      if (NewState != DISABLE)
00004e  b11e              CBZ      r6,|L12.88|
;;;528      {
;;;529        /* Enable the selected SPI/I2S DMA requests */
;;;530        SPIx->CR2 |= SPI_I2S_DMAReq;
000050  88a0              LDRH     r0,[r4,#4]
000052  4328              ORRS     r0,r0,r5
000054  80a0              STRH     r0,[r4,#4]
000056  e002              B        |L12.94|
                  |L12.88|
;;;531      }
;;;532      else
;;;533      {
;;;534        /* Disable the selected SPI/I2S DMA requests */
;;;535        SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
000058  88a0              LDRH     r0,[r4,#4]
00005a  43a8              BICS     r0,r0,r5
00005c  80a0              STRH     r0,[r4,#4]
                  |L12.94|
;;;536      }
;;;537    }
00005e  bd70              POP      {r4-r6,pc}
;;;538    
                          ENDP

                  |L12.96|
                          DCD      0x40013000
                  |L12.100|
                          DCD      0x40003800
                  |L12.104|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;118      */
;;;119    void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;120    {
000002  4604              MOV      r4,r0
;;;121      /* Check the parameters */
;;;122      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000004  4919              LDR      r1,|L13.108|
000006  428c              CMP      r4,r1
000008  d005              BEQ      |L13.22|
00000a  4919              LDR      r1,|L13.112|
00000c  428c              CMP      r4,r1
00000e  d002              BEQ      |L13.22|
000010  4918              LDR      r1,|L13.116|
000012  428c              CMP      r4,r1
000014  d101              BNE      |L13.26|
                  |L13.22|
000016  2101              MOVS     r1,#1
000018  e000              B        |L13.28|
                  |L13.26|
00001a  2100              MOVS     r1,#0
                  |L13.28|
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       assert_param
;;;123    
;;;124      if (SPIx == SPI1)
000022  4812              LDR      r0,|L13.108|
000024  4284              CMP      r4,r0
000026  d108              BNE      |L13.58|
;;;125      {
;;;126        /* Enable SPI1 reset state */
;;;127        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
000028  2101              MOVS     r1,#1
00002a  1480              ASRS     r0,r0,#18
00002c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;128        /* Release SPI1 from reset state */
;;;129        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
000030  2100              MOVS     r1,#0
000032  14a0              ASRS     r0,r4,#18
000034  f7fffffe          BL       RCC_APB2PeriphResetCmd
000038  e016              B        |L13.104|
                  |L13.58|
;;;130      }
;;;131      else if (SPIx == SPI2)
00003a  480d              LDR      r0,|L13.112|
00003c  4284              CMP      r4,r0
00003e  d108              BNE      |L13.82|
;;;132      {
;;;133        /* Enable SPI2 reset state */
;;;134        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
000040  2101              MOVS     r1,#1
000042  1400              ASRS     r0,r0,#16
000044  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;135        /* Release SPI2 from reset state */
;;;136        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
000048  2100              MOVS     r1,#0
00004a  1420              ASRS     r0,r4,#16
00004c  f7fffffe          BL       RCC_APB1PeriphResetCmd
000050  e00a              B        |L13.104|
                  |L13.82|
;;;137      }
;;;138      else
;;;139      {
;;;140        if (SPIx == SPI3)
000052  4808              LDR      r0,|L13.116|
000054  4284              CMP      r4,r0
000056  d107              BNE      |L13.104|
;;;141        {
;;;142          /* Enable SPI3 reset state */
;;;143          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
000058  2101              MOVS     r1,#1
00005a  13c0              ASRS     r0,r0,#15
00005c  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;144          /* Release SPI3 from reset state */
;;;145          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
000060  2100              MOVS     r1,#0
000062  13e0              ASRS     r0,r4,#15
000064  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L13.104|
;;;146        }
;;;147      }
;;;148    }
000068  bd10              POP      {r4,pc}
;;;149    
                          ENDP

00006a  0000              DCW      0x0000
                  |L13.108|
                          DCD      0x40013000
                  |L13.112|
                          DCD      0x40003800
                  |L13.116|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  SPI_I2S_GetFlagStatus PROC
;;;765      */
;;;766    FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;767    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;768      FlagStatus bitstatus = RESET;
000006  2600              MOVS     r6,#0
;;;769      /* Check the parameters */
;;;770      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000008  4916              LDR      r1,|L14.100|
00000a  428d              CMP      r5,r1
00000c  d005              BEQ      |L14.26|
00000e  4916              LDR      r1,|L14.104|
000010  428d              CMP      r5,r1
000012  d002              BEQ      |L14.26|
000014  4915              LDR      r1,|L14.108|
000016  428d              CMP      r5,r1
000018  d101              BNE      |L14.30|
                  |L14.26|
00001a  2101              MOVS     r1,#1
00001c  e000              B        |L14.32|
                  |L14.30|
00001e  2100              MOVS     r1,#0
                  |L14.32|
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       assert_param
;;;771      assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
000026  2c80              CMP      r4,#0x80
000028  d00d              BEQ      |L14.70|
00002a  2c40              CMP      r4,#0x40
00002c  d00b              BEQ      |L14.70|
00002e  2c20              CMP      r4,#0x20
000030  d009              BEQ      |L14.70|
000032  2c10              CMP      r4,#0x10
000034  d007              BEQ      |L14.70|
000036  2c08              CMP      r4,#8
000038  d005              BEQ      |L14.70|
00003a  2c04              CMP      r4,#4
00003c  d003              BEQ      |L14.70|
00003e  2c02              CMP      r4,#2
000040  d001              BEQ      |L14.70|
000042  2c01              CMP      r4,#1
000044  d101              BNE      |L14.74|
                  |L14.70|
000046  2101              MOVS     r1,#1
000048  e000              B        |L14.76|
                  |L14.74|
00004a  2100              MOVS     r1,#0
                  |L14.76|
00004c  4608              MOV      r0,r1
00004e  f7fffffe          BL       assert_param
;;;772      /* Check the status of the specified SPI/I2S flag */
;;;773      if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
000052  8928              LDRH     r0,[r5,#8]
000054  4020              ANDS     r0,r0,r4
000056  b108              CBZ      r0,|L14.92|
;;;774      {
;;;775        /* SPI_I2S_FLAG is set */
;;;776        bitstatus = SET;
000058  2601              MOVS     r6,#1
00005a  e000              B        |L14.94|
                  |L14.92|
;;;777      }
;;;778      else
;;;779      {
;;;780        /* SPI_I2S_FLAG is reset */
;;;781        bitstatus = RESET;
00005c  2600              MOVS     r6,#0
                  |L14.94|
;;;782      }
;;;783      /* Return the SPI_I2S_FLAG status */
;;;784      return  bitstatus;
00005e  4630              MOV      r0,r6
;;;785    }
000060  bd70              POP      {r4-r6,pc}
;;;786    
                          ENDP

000062  0000              DCW      0x0000
                  |L14.100|
                          DCD      0x40013000
                  |L14.104|
                          DCD      0x40003800
                  |L14.108|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=2

                  SPI_I2S_GetITStatus PROC
;;;828      */
;;;829    ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;830    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;831      ITStatus bitstatus = RESET;
000008  2700              MOVS     r7,#0
;;;832      uint16_t itpos = 0, itmask = 0, enablestatus = 0;
00000a  46b8              MOV      r8,r7
00000c  2600              MOVS     r6,#0
00000e  46b1              MOV      r9,r6
;;;833    
;;;834      /* Check the parameters */
;;;835      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000010  491d              LDR      r1,|L15.136|
000012  428d              CMP      r5,r1
000014  d005              BEQ      |L15.34|
000016  491d              LDR      r1,|L15.140|
000018  428d              CMP      r5,r1
00001a  d002              BEQ      |L15.34|
00001c  491c              LDR      r1,|L15.144|
00001e  428d              CMP      r5,r1
000020  d101              BNE      |L15.38|
                  |L15.34|
000022  2101              MOVS     r1,#1
000024  e000              B        |L15.40|
                  |L15.38|
000026  2100              MOVS     r1,#0
                  |L15.40|
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       assert_param
;;;836      assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
00002e  2c60              CMP      r4,#0x60
000030  d009              BEQ      |L15.70|
000032  2c71              CMP      r4,#0x71
000034  d007              BEQ      |L15.70|
000036  2c53              CMP      r4,#0x53
000038  d005              BEQ      |L15.70|
00003a  2c54              CMP      r4,#0x54
00003c  d003              BEQ      |L15.70|
00003e  2c55              CMP      r4,#0x55
000040  d001              BEQ      |L15.70|
000042  2c56              CMP      r4,#0x56
000044  d101              BNE      |L15.74|
                  |L15.70|
000046  2101              MOVS     r1,#1
000048  e000              B        |L15.76|
                  |L15.74|
00004a  2100              MOVS     r1,#0
                  |L15.76|
00004c  4608              MOV      r0,r1
00004e  f7fffffe          BL       assert_param
;;;837    
;;;838      /* Get the SPI/I2S IT index */
;;;839      itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000052  f004010f          AND      r1,r4,#0xf
000056  2001              MOVS     r0,#1
000058  4088              LSLS     r0,r0,r1
00005a  fa1ff880          UXTH     r8,r0
;;;840    
;;;841      /* Get the SPI/I2S IT mask */
;;;842      itmask = SPI_I2S_IT >> 4;
00005e  1126              ASRS     r6,r4,#4
;;;843    
;;;844      /* Set the IT mask */
;;;845      itmask = 0x01 << itmask;
000060  2001              MOVS     r0,#1
000062  40b0              LSLS     r0,r0,r6
000064  b286              UXTH     r6,r0
;;;846    
;;;847      /* Get the SPI_I2S_IT enable bit status */
;;;848      enablestatus = (SPIx->CR2 & itmask) ;
000066  88a8              LDRH     r0,[r5,#4]
000068  ea000906          AND      r9,r0,r6
;;;849    
;;;850      /* Check the status of the specified SPI/I2S interrupt */
;;;851      if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
00006c  8928              LDRH     r0,[r5,#8]
00006e  ea000008          AND      r0,r0,r8
000072  b120              CBZ      r0,|L15.126|
000074  f1b90f00          CMP      r9,#0
000078  d001              BEQ      |L15.126|
;;;852      {
;;;853        /* SPI_I2S_IT is set */
;;;854        bitstatus = SET;
00007a  2701              MOVS     r7,#1
00007c  e000              B        |L15.128|
                  |L15.126|
;;;855      }
;;;856      else
;;;857      {
;;;858        /* SPI_I2S_IT is reset */
;;;859        bitstatus = RESET;
00007e  2700              MOVS     r7,#0
                  |L15.128|
;;;860      }
;;;861      /* Return the SPI_I2S_IT status */
;;;862      return bitstatus;
000080  4638              MOV      r0,r7
;;;863    }
000082  e8bd87f0          POP      {r4-r10,pc}
;;;864    
                          ENDP

000086  0000              DCW      0x0000
                  |L15.136|
                          DCD      0x40013000
                  |L15.140|
                          DCD      0x40003800
                  |L15.144|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=2

                  SPI_I2S_ITConfig PROC
;;;481      */
;;;482    void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;483    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;484      uint16_t itpos = 0, itmask = 0 ;
00000a  f04f0800          MOV      r8,#0
00000e  2700              MOVS     r7,#0
;;;485      /* Check the parameters */
;;;486      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000010  4919              LDR      r1,|L16.120|
000012  428c              CMP      r4,r1
000014  d005              BEQ      |L16.34|
000016  4919              LDR      r1,|L16.124|
000018  428c              CMP      r4,r1
00001a  d002              BEQ      |L16.34|
00001c  4918              LDR      r1,|L16.128|
00001e  428c              CMP      r4,r1
000020  d101              BNE      |L16.38|
                  |L16.34|
000022  2101              MOVS     r1,#1
000024  e000              B        |L16.40|
                  |L16.38|
000026  2100              MOVS     r1,#0
                  |L16.40|
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       assert_param
;;;487      assert_param(IS_FUNCTIONAL_STATE(NewState));
00002e  b10e              CBZ      r6,|L16.52|
000030  2e01              CMP      r6,#1
000032  d101              BNE      |L16.56|
                  |L16.52|
000034  2101              MOVS     r1,#1
000036  e000              B        |L16.58|
                  |L16.56|
000038  2100              MOVS     r1,#0
                  |L16.58|
00003a  4608              MOV      r0,r1
00003c  f7fffffe          BL       assert_param
;;;488      assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
000040  2d71              CMP      r5,#0x71
000042  d003              BEQ      |L16.76|
000044  2d60              CMP      r5,#0x60
000046  d001              BEQ      |L16.76|
000048  2d50              CMP      r5,#0x50
00004a  d101              BNE      |L16.80|
                  |L16.76|
00004c  2101              MOVS     r1,#1
00004e  e000              B        |L16.82|
                  |L16.80|
000050  2100              MOVS     r1,#0
                  |L16.82|
000052  4608              MOV      r0,r1
000054  f7fffffe          BL       assert_param
;;;489    
;;;490      /* Get the SPI/I2S IT index */
;;;491      itpos = SPI_I2S_IT >> 4;
000058  ea4f1825          ASR      r8,r5,#4
;;;492    
;;;493      /* Set the IT mask */
;;;494      itmask = (uint16_t)1 << (uint16_t)itpos;
00005c  2001              MOVS     r0,#1
00005e  fa00f008          LSL      r0,r0,r8
000062  b287              UXTH     r7,r0
;;;495    
;;;496      if (NewState != DISABLE)
000064  b11e              CBZ      r6,|L16.110|
;;;497      {
;;;498        /* Enable the selected SPI/I2S interrupt */
;;;499        SPIx->CR2 |= itmask;
000066  88a0              LDRH     r0,[r4,#4]
000068  4338              ORRS     r0,r0,r7
00006a  80a0              STRH     r0,[r4,#4]
00006c  e002              B        |L16.116|
                  |L16.110|
;;;500      }
;;;501      else
;;;502      {
;;;503        /* Disable the selected SPI/I2S interrupt */
;;;504        SPIx->CR2 &= (uint16_t)~itmask;
00006e  88a0              LDRH     r0,[r4,#4]
000070  43b8              BICS     r0,r0,r7
000072  80a0              STRH     r0,[r4,#4]
                  |L16.116|
;;;505      }
;;;506    }
000074  e8bd81f0          POP      {r4-r8,pc}
;;;507    
                          ENDP

                  |L16.120|
                          DCD      0x40013000
                  |L16.124|
                          DCD      0x40003800
                  |L16.128|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=2

                  SPI_I2S_ReceiveData PROC
;;;562      */
;;;563    uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;564    {
000002  4604              MOV      r4,r0
;;;565      /* Check the parameters */
;;;566      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000004  4908              LDR      r1,|L17.40|
000006  428c              CMP      r4,r1
000008  d005              BEQ      |L17.22|
00000a  4908              LDR      r1,|L17.44|
00000c  428c              CMP      r4,r1
00000e  d002              BEQ      |L17.22|
000010  4907              LDR      r1,|L17.48|
000012  428c              CMP      r4,r1
000014  d101              BNE      |L17.26|
                  |L17.22|
000016  2101              MOVS     r1,#1
000018  e000              B        |L17.28|
                  |L17.26|
00001a  2100              MOVS     r1,#0
                  |L17.28|
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       assert_param
;;;567      
;;;568      /* Return the data in the DR register */
;;;569      return SPIx->DR;
000022  89a0              LDRH     r0,[r4,#0xc]
;;;570    }
000024  bd10              POP      {r4,pc}
;;;571    
                          ENDP

000026  0000              DCW      0x0000
                  |L17.40|
                          DCD      0x40013000
                  |L17.44|
                          DCD      0x40003800
                  |L17.48|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=2

                  SPI_I2S_SendData PROC
;;;546      */
;;;547    void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;548    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;549      /* Check the parameters */
;;;550      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000006  4908              LDR      r1,|L18.40|
000008  428c              CMP      r4,r1
00000a  d005              BEQ      |L18.24|
00000c  4907              LDR      r1,|L18.44|
00000e  428c              CMP      r4,r1
000010  d002              BEQ      |L18.24|
000012  4907              LDR      r1,|L18.48|
000014  428c              CMP      r4,r1
000016  d101              BNE      |L18.28|
                  |L18.24|
000018  2101              MOVS     r1,#1
00001a  e000              B        |L18.30|
                  |L18.28|
00001c  2100              MOVS     r1,#0
                  |L18.30|
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       assert_param
;;;551      
;;;552      /* Write in the DR register the data to be sent */
;;;553      SPIx->DR = Data;
000024  81a5              STRH     r5,[r4,#0xc]
;;;554    }
000026  bd70              POP      {r4-r6,pc}
;;;555    
                          ENDP

                  |L18.40|
                          DCD      0x40013000
                  |L18.44|
                          DCD      0x40003800
                  |L18.48|
                          DCD      0x40003c00

                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=2

                  SPI_Init PROC
;;;157      */
;;;158    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;159    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;160      uint16_t tmpreg = 0;
000006  2600              MOVS     r6,#0
;;;161      
;;;162      /* check the parameters */
;;;163      assert_param(IS_SPI_ALL_PERIPH(SPIx));   
000008  4954              LDR      r1,|L19.348|
00000a  428d              CMP      r5,r1
00000c  d005              BEQ      |L19.26|
00000e  4954              LDR      r1,|L19.352|
000010  428d              CMP      r5,r1
000012  d002              BEQ      |L19.26|
000014  4953              LDR      r1,|L19.356|
000016  428d              CMP      r5,r1
000018  d101              BNE      |L19.30|
                  |L19.26|
00001a  2101              MOVS     r1,#1
00001c  e000              B        |L19.32|
                  |L19.30|
00001e  2100              MOVS     r1,#0
                  |L19.32|
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       assert_param
;;;164      
;;;165      /* Check the SPI parameters */
;;;166      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
000026  8821              LDRH     r1,[r4,#0]
000028  b159              CBZ      r1,|L19.66|
00002a  8821              LDRH     r1,[r4,#0]
00002c  f5b16f80          CMP      r1,#0x400
000030  d007              BEQ      |L19.66|
000032  8821              LDRH     r1,[r4,#0]
000034  f5b14f00          CMP      r1,#0x8000
000038  d003              BEQ      |L19.66|
00003a  8821              LDRH     r1,[r4,#0]
00003c  f5b14f40          CMP      r1,#0xc000
000040  d101              BNE      |L19.70|
                  |L19.66|
000042  2101              MOVS     r1,#1
000044  e000              B        |L19.72|
                  |L19.70|
000046  2100              MOVS     r1,#0
                  |L19.72|
000048  4608              MOV      r0,r1
00004a  f7fffffe          BL       assert_param
;;;167      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
00004e  8861              LDRH     r1,[r4,#2]
000050  f5b17f82          CMP      r1,#0x104
000054  d001              BEQ      |L19.90|
000056  8861              LDRH     r1,[r4,#2]
000058  b909              CBNZ     r1,|L19.94|
                  |L19.90|
00005a  2101              MOVS     r1,#1
00005c  e000              B        |L19.96|
                  |L19.94|
00005e  2100              MOVS     r1,#0
                  |L19.96|
000060  4608              MOV      r0,r1
000062  f7fffffe          BL       assert_param
;;;168      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
000066  88a1              LDRH     r1,[r4,#4]
000068  f5b16f00          CMP      r1,#0x800
00006c  d001              BEQ      |L19.114|
00006e  88a1              LDRH     r1,[r4,#4]
000070  b909              CBNZ     r1,|L19.118|
                  |L19.114|
000072  2101              MOVS     r1,#1
000074  e000              B        |L19.120|
                  |L19.118|
000076  2100              MOVS     r1,#0
                  |L19.120|
000078  4608              MOV      r0,r1
00007a  f7fffffe          BL       assert_param
;;;169      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
00007e  88e1              LDRH     r1,[r4,#6]
000080  b111              CBZ      r1,|L19.136|
000082  88e1              LDRH     r1,[r4,#6]
000084  2902              CMP      r1,#2
000086  d101              BNE      |L19.140|
                  |L19.136|
000088  2101              MOVS     r1,#1
00008a  e000              B        |L19.142|
                  |L19.140|
00008c  2100              MOVS     r1,#0
                  |L19.142|
00008e  4608              MOV      r0,r1
000090  f7fffffe          BL       assert_param
;;;170      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
000094  8921              LDRH     r1,[r4,#8]
000096  b111              CBZ      r1,|L19.158|
000098  8921              LDRH     r1,[r4,#8]
00009a  2901              CMP      r1,#1
00009c  d101              BNE      |L19.162|
                  |L19.158|
00009e  2101              MOVS     r1,#1
0000a0  e000              B        |L19.164|
                  |L19.162|
0000a2  2100              MOVS     r1,#0
                  |L19.164|
0000a4  4608              MOV      r0,r1
0000a6  f7fffffe          BL       assert_param
;;;171      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
0000aa  8961              LDRH     r1,[r4,#0xa]
0000ac  f5b17f00          CMP      r1,#0x200
0000b0  d001              BEQ      |L19.182|
0000b2  8961              LDRH     r1,[r4,#0xa]
0000b4  b909              CBNZ     r1,|L19.186|
                  |L19.182|
0000b6  2101              MOVS     r1,#1
0000b8  e000              B        |L19.188|
                  |L19.186|
0000ba  2100              MOVS     r1,#0
                  |L19.188|
0000bc  4608              MOV      r0,r1
0000be  f7fffffe          BL       assert_param
;;;172      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
0000c2  89a1              LDRH     r1,[r4,#0xc]
0000c4  b1a1              CBZ      r1,|L19.240|
0000c6  89a1              LDRH     r1,[r4,#0xc]
0000c8  2908              CMP      r1,#8
0000ca  d011              BEQ      |L19.240|
0000cc  89a1              LDRH     r1,[r4,#0xc]
0000ce  2910              CMP      r1,#0x10
0000d0  d00e              BEQ      |L19.240|
0000d2  89a1              LDRH     r1,[r4,#0xc]
0000d4  2918              CMP      r1,#0x18
0000d6  d00b              BEQ      |L19.240|
0000d8  89a1              LDRH     r1,[r4,#0xc]
0000da  2920              CMP      r1,#0x20
0000dc  d008              BEQ      |L19.240|
0000de  89a1              LDRH     r1,[r4,#0xc]
0000e0  2928              CMP      r1,#0x28
0000e2  d005              BEQ      |L19.240|
0000e4  89a1              LDRH     r1,[r4,#0xc]
0000e6  2930              CMP      r1,#0x30
0000e8  d002              BEQ      |L19.240|
0000ea  89a1              LDRH     r1,[r4,#0xc]
0000ec  2938              CMP      r1,#0x38
0000ee  d101              BNE      |L19.244|
                  |L19.240|
0000f0  2101              MOVS     r1,#1
0000f2  e000              B        |L19.246|
                  |L19.244|
0000f4  2100              MOVS     r1,#0
                  |L19.246|
0000f6  4608              MOV      r0,r1
0000f8  f7fffffe          BL       assert_param
;;;173      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
0000fc  89e1              LDRH     r1,[r4,#0xe]
0000fe  b111              CBZ      r1,|L19.262|
000100  89e1              LDRH     r1,[r4,#0xe]
000102  2980              CMP      r1,#0x80
000104  d101              BNE      |L19.266|
                  |L19.262|
000106  2101              MOVS     r1,#1
000108  e000              B        |L19.268|
                  |L19.266|
00010a  2100              MOVS     r1,#0
                  |L19.268|
00010c  4608              MOV      r0,r1
00010e  f7fffffe          BL       assert_param
;;;174      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
000112  8a21              LDRH     r1,[r4,#0x10]
000114  2901              CMP      r1,#1
000116  db01              BLT      |L19.284|
000118  2101              MOVS     r1,#1
00011a  e000              B        |L19.286|
                  |L19.284|
00011c  2100              MOVS     r1,#0
                  |L19.286|
00011e  4608              MOV      r0,r1
000120  f7fffffe          BL       assert_param
;;;175    
;;;176    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;177      /* Get the SPIx CR1 value */
;;;178      tmpreg = SPIx->CR1;
000124  882e              LDRH     r6,[r5,#0]
;;;179      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;180      tmpreg &= CR1_CLEAR_Mask;
000126  f4065641          AND      r6,r6,#0x3040
;;;181      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;182         master/salve mode, CPOL and CPHA */
;;;183      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;184      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;185      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;186      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;187      /* Set CPOL bit according to SPI_CPOL value */
;;;188      /* Set CPHA bit according to SPI_CPHA value */
;;;189      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
00012a  8820              LDRH     r0,[r4,#0]
00012c  8861              LDRH     r1,[r4,#2]
00012e  4308              ORRS     r0,r0,r1
000130  88a1              LDRH     r1,[r4,#4]
000132  4308              ORRS     r0,r0,r1
000134  88e1              LDRH     r1,[r4,#6]
000136  4308              ORRS     r0,r0,r1
000138  8921              LDRH     r1,[r4,#8]
00013a  4308              ORRS     r0,r0,r1
00013c  8961              LDRH     r1,[r4,#0xa]
00013e  4308              ORRS     r0,r0,r1
000140  89a1              LDRH     r1,[r4,#0xc]
000142  4308              ORRS     r0,r0,r1
000144  89e1              LDRH     r1,[r4,#0xe]
000146  4308              ORRS     r0,r0,r1
000148  4306              ORRS     r6,r6,r0
;;;190                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;191                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;192                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;193      /* Write to SPIx CR1 */
;;;194      SPIx->CR1 = tmpreg;
00014a  802e              STRH     r6,[r5,#0]
;;;195      
;;;196      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;197      SPIx->I2SCFGR &= SPI_Mode_Select;		
00014c  8ba8              LDRH     r0,[r5,#0x1c]
00014e  f24f71ff          MOV      r1,#0xf7ff
000152  4008              ANDS     r0,r0,r1
000154  83a8              STRH     r0,[r5,#0x1c]
;;;198    
;;;199    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;200      /* Write to SPIx CRCPOLY */
;;;201      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
000156  8a20              LDRH     r0,[r4,#0x10]
000158  8228              STRH     r0,[r5,#0x10]
;;;202    }
00015a  bd70              POP      {r4-r6,pc}
;;;203    
                          ENDP

                  |L19.348|
                          DCD      0x40013000
                  |L19.352|
                          DCD      0x40003800
                  |L19.356|
                          DCD      0x40003c00

                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=2

                  SPI_NSSInternalSoftwareConfig PROC
;;;580      */
;;;581    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
000000  b570              PUSH     {r4-r6,lr}
;;;582    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;583      /* Check the parameters */
;;;584      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000006  4915              LDR      r1,|L20.92|
000008  428c              CMP      r4,r1
00000a  d005              BEQ      |L20.24|
00000c  4914              LDR      r1,|L20.96|
00000e  428c              CMP      r4,r1
000010  d002              BEQ      |L20.24|
000012  4914              LDR      r1,|L20.100|
000014  428c              CMP      r4,r1
000016  d101              BNE      |L20.28|
                  |L20.24|
000018  2101              MOVS     r1,#1
00001a  e000              B        |L20.30|
                  |L20.28|
00001c  2100              MOVS     r1,#0
                  |L20.30|
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       assert_param
;;;585      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
000024  f5b57f80          CMP      r5,#0x100
000028  d003              BEQ      |L20.50|
00002a  f64f61ff          MOV      r1,#0xfeff
00002e  428d              CMP      r5,r1
000030  d101              BNE      |L20.54|
                  |L20.50|
000032  2101              MOVS     r1,#1
000034  e000              B        |L20.56|
                  |L20.54|
000036  2100              MOVS     r1,#0
                  |L20.56|
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       assert_param
;;;586      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
00003e  f64f60ff          MOV      r0,#0xfeff
000042  4285              CMP      r5,r0
000044  d004              BEQ      |L20.80|
;;;587      {
;;;588        /* Set NSS pin internally by software */
;;;589        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
000046  8820              LDRH     r0,[r4,#0]
000048  f4407080          ORR      r0,r0,#0x100
00004c  8020              STRH     r0,[r4,#0]
00004e  e004              B        |L20.90|
                  |L20.80|
;;;590      }
;;;591      else
;;;592      {
;;;593        /* Reset NSS pin internally by software */
;;;594        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000050  8820              LDRH     r0,[r4,#0]
000052  f64f61ff          MOV      r1,#0xfeff
000056  4008              ANDS     r0,r0,r1
000058  8020              STRH     r0,[r4,#0]
                  |L20.90|
;;;595      }
;;;596    }
00005a  bd70              POP      {r4-r6,pc}
;;;597    
                          ENDP

                  |L20.92|
                          DCD      0x40013000
                  |L20.96|
                          DCD      0x40003800
                  |L20.100|
                          DCD      0x40003c00

                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=2

                  SPI_SSOutputCmd PROC
;;;604      */
;;;605    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;606    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;607      /* Check the parameters */
;;;608      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000006  4912              LDR      r1,|L21.80|
000008  428c              CMP      r4,r1
00000a  d005              BEQ      |L21.24|
00000c  4911              LDR      r1,|L21.84|
00000e  428c              CMP      r4,r1
000010  d002              BEQ      |L21.24|
000012  4911              LDR      r1,|L21.88|
000014  428c              CMP      r4,r1
000016  d101              BNE      |L21.28|
                  |L21.24|
000018  2101              MOVS     r1,#1
00001a  e000              B        |L21.30|
                  |L21.28|
00001c  2100              MOVS     r1,#0
                  |L21.30|
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       assert_param
;;;609      assert_param(IS_FUNCTIONAL_STATE(NewState));
000024  b10d              CBZ      r5,|L21.42|
000026  2d01              CMP      r5,#1
000028  d101              BNE      |L21.46|
                  |L21.42|
00002a  2101              MOVS     r1,#1
00002c  e000              B        |L21.48|
                  |L21.46|
00002e  2100              MOVS     r1,#0
                  |L21.48|
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       assert_param
;;;610      if (NewState != DISABLE)
000036  b125              CBZ      r5,|L21.66|
;;;611      {
;;;612        /* Enable the selected SPI SS output */
;;;613        SPIx->CR2 |= CR2_SSOE_Set;
000038  88a0              LDRH     r0,[r4,#4]
00003a  f0400004          ORR      r0,r0,#4
00003e  80a0              STRH     r0,[r4,#4]
000040  e004              B        |L21.76|
                  |L21.66|
;;;614      }
;;;615      else
;;;616      {
;;;617        /* Disable the selected SPI SS output */
;;;618        SPIx->CR2 &= CR2_SSOE_Reset;
000042  88a0              LDRH     r0,[r4,#4]
000044  f64f71fb          MOV      r1,#0xfffb
000048  4008              ANDS     r0,r0,r1
00004a  80a0              STRH     r0,[r4,#4]
                  |L21.76|
;;;619      }
;;;620    }
00004c  bd70              POP      {r4-r6,pc}
;;;621    
                          ENDP

00004e  0000              DCW      0x0000
                  |L21.80|
                          DCD      0x40013000
                  |L21.84|
                          DCD      0x40003800
                  |L21.88|
                          DCD      0x40003c00

                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;369      */
;;;370    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;371    {
;;;372    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;373      /* Initialize the SPI_Direction member */
;;;374      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;375      /* initialize the SPI_Mode member */
;;;376      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;377      /* initialize the SPI_DataSize member */
;;;378      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;379      /* Initialize the SPI_CPOL member */
;;;380      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;381      /* Initialize the SPI_CPHA member */
;;;382      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;383      /* Initialize the SPI_NSS member */
;;;384      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;385      /* Initialize the SPI_BaudRatePrescaler member */
;;;386      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;387      /* Initialize the SPI_FirstBit member */
;;;388      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;389      /* Initialize the SPI_CRCPolynomial member */
;;;390      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;391    }
000016  4770              BX       lr
;;;392    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=2

                  SPI_TransmitCRC PROC
;;;646      */
;;;647    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;648    {
000002  4604              MOV      r4,r0
;;;649      /* Check the parameters */
;;;650      assert_param(IS_SPI_ALL_PERIPH(SPIx));
000004  4909              LDR      r1,|L23.44|
000006  428c              CMP      r4,r1
000008  d005              BEQ      |L23.22|
00000a  4909              LDR      r1,|L23.48|
00000c  428c              CMP      r4,r1
00000e  d002              BEQ      |L23.22|
000010  4908              LDR      r1,|L23.52|
000012  428c              CMP      r4,r1
000014  d101              BNE      |L23.26|
                  |L23.22|
000016  2101              MOVS     r1,#1
000018  e000              B        |L23.28|
                  |L23.26|
00001a  2100              MOVS     r1,#0
                  |L23.28|
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       assert_param
;;;651      
;;;652      /* Enable the selected SPI CRC transmission */
;;;653      SPIx->CR1 |= CR1_CRCNext_Set;
000022  8820              LDRH     r0,[r4,#0]
000024  f4405080          ORR      r0,r0,#0x1000
000028  8020              STRH     r0,[r4,#0]
;;;654    }
00002a  bd10              POP      {r4,pc}
;;;655    
                          ENDP

                  |L23.44|
                          DCD      0x40013000
                  |L23.48|
                          DCD      0x40003800
                  |L23.52|
                          DCD      0x40003c00
