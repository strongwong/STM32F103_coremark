; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f10x_bkp.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Board\inc -I..\Chip\Hal_lib\inc -I..\Chip\Startup\inc -I..\coremark -I..\Chip\CMSIS -I.\RTE\_CoreMark -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F10X_MD --omf_browse=.\objects\stm32f10x_bkp.crf ..\Chip\Hal_lib\stm32f10x_bkp.c]
                          THUMB

                          AREA ||i.BKP_ClearFlag||, CODE, READONLY, ALIGN=2

                  BKP_ClearFlag PROC
;;;268      */
;;;269    void BKP_ClearFlag(void)
000000  4803              LDR      r0,|L1.16|
;;;270    {
;;;271      /* Set CTE bit to clear Tamper Pin Event flag */
;;;272      BKP->CSR |= BKP_CSR_CTE;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L1.16|
00000a  8008              STRH     r0,[r1,#0]
;;;273    }
00000c  4770              BX       lr
;;;274    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40006c34

                          AREA ||i.BKP_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  BKP_ClearITPendingBit PROC
;;;289      */
;;;290    void BKP_ClearITPendingBit(void)
000000  4803              LDR      r0,|L2.16|
;;;291    {
;;;292      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;293      BKP->CSR |= BKP_CSR_CTI;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L2.16|
00000a  8008              STRH     r0,[r1,#0]
;;;294    }
00000c  4770              BX       lr
;;;295    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40006c34

                          AREA ||i.BKP_DeInit||, CODE, READONLY, ALIGN=1

                  BKP_DeInit PROC
;;;119      */
;;;120    void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122      RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;123      RCC_BackupResetCmd(DISABLE);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       RCC_BackupResetCmd
;;;124    }
00000e  bd10              POP      {r4,pc}
;;;125    
                          ENDP


                          AREA ||i.BKP_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetFlagStatus PROC
;;;258      */
;;;259    FlagStatus BKP_GetFlagStatus(void)
000000  4801              LDR      r0,|L4.8|
;;;260    {
;;;261      return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;262    }
000006  4770              BX       lr
;;;263    
                          ENDP

                  |L4.8|
                          DCD      0x420d86a0

                          AREA ||i.BKP_GetITStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetITStatus PROC
;;;279      */
;;;280    ITStatus BKP_GetITStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;281    {
;;;282      return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;283    }
000006  4770              BX       lr
;;;284    
                          ENDP

                  |L5.8|
                          DCD      0x420d86a4

                          AREA ||i.BKP_ITConfig||, CODE, READONLY, ALIGN=2

                  BKP_ITConfig PROC
;;;159      */
;;;160    void BKP_ITConfig(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;161    {
000002  4604              MOV      r4,r0
;;;162      /* Check the parameters */
;;;163      assert_param(IS_FUNCTIONAL_STATE(NewState));
000004  b10c              CBZ      r4,|L6.10|
000006  2c01              CMP      r4,#1
000008  d101              BNE      |L6.14|
                  |L6.10|
00000a  2101              MOVS     r1,#1
00000c  e000              B        |L6.16|
                  |L6.14|
00000e  2100              MOVS     r1,#0
                  |L6.16|
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       assert_param
;;;164      *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
000016  4801              LDR      r0,|L6.28|
000018  6004              STR      r4,[r0,#0]
;;;165    }
00001a  bd10              POP      {r4,pc}
;;;166    
                          ENDP

                  |L6.28|
                          DCD      0x420d8688

                          AREA ||i.BKP_RTCOutputConfig||, CODE, READONLY, ALIGN=2

                  BKP_RTCOutputConfig PROC
;;;179      */
;;;180    void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
000000  b570              PUSH     {r4-r6,lr}
;;;181    {
000002  4604              MOV      r4,r0
;;;182      uint16_t tmpreg = 0;
000004  2500              MOVS     r5,#0
;;;183      /* Check the parameters */
;;;184      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
000006  b13c              CBZ      r4,|L7.24|
000008  2c80              CMP      r4,#0x80
00000a  d005              BEQ      |L7.24|
00000c  f5b47f80          CMP      r4,#0x100
000010  d002              BEQ      |L7.24|
000012  f5b47f40          CMP      r4,#0x300
000016  d101              BNE      |L7.28|
                  |L7.24|
000018  2101              MOVS     r1,#1
00001a  e000              B        |L7.30|
                  |L7.28|
00001c  2100              MOVS     r1,#0
                  |L7.30|
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       assert_param
;;;185      tmpreg = BKP->RTCCR;
000024  4804              LDR      r0,|L7.56|
000026  8805              LDRH     r5,[r0,#0]
;;;186      /* Clear CCO, ASOE and ASOS bits */
;;;187      tmpreg &= RTCCR_MASK;
000028  f64f407f          MOV      r0,#0xfc7f
00002c  4005              ANDS     r5,r5,r0
;;;188      
;;;189      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;190      tmpreg |= BKP_RTCOutputSource;
00002e  4325              ORRS     r5,r5,r4
;;;191      /* Store the new value */
;;;192      BKP->RTCCR = tmpreg;
000030  4801              LDR      r0,|L7.56|
000032  8005              STRH     r5,[r0,#0]
;;;193    }
000034  bd70              POP      {r4-r6,pc}
;;;194    
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      0x40006c2c

                          AREA ||i.BKP_ReadBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_ReadBackupRegister PROC
;;;240      */
;;;241    uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
000000  b538              PUSH     {r3-r5,lr}
;;;242    {
000002  4604              MOV      r4,r0
;;;243      __IO uint32_t tmp = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;244    
;;;245      /* Check the parameters */
;;;246      assert_param(IS_BKP_DR(BKP_DR));
000008  2c04              CMP      r4,#4
00000a  d051              BEQ      |L8.176|
00000c  2c08              CMP      r4,#8
00000e  d04f              BEQ      |L8.176|
000010  2c0c              CMP      r4,#0xc
000012  d04d              BEQ      |L8.176|
000014  2c10              CMP      r4,#0x10
000016  d04b              BEQ      |L8.176|
000018  2c14              CMP      r4,#0x14
00001a  d049              BEQ      |L8.176|
00001c  2c18              CMP      r4,#0x18
00001e  d047              BEQ      |L8.176|
000020  2c1c              CMP      r4,#0x1c
000022  d045              BEQ      |L8.176|
000024  2c20              CMP      r4,#0x20
000026  d043              BEQ      |L8.176|
000028  2c24              CMP      r4,#0x24
00002a  d041              BEQ      |L8.176|
00002c  2c28              CMP      r4,#0x28
00002e  d03f              BEQ      |L8.176|
000030  2c40              CMP      r4,#0x40
000032  d03d              BEQ      |L8.176|
000034  2c44              CMP      r4,#0x44
000036  d03b              BEQ      |L8.176|
000038  2c48              CMP      r4,#0x48
00003a  d039              BEQ      |L8.176|
00003c  2c4c              CMP      r4,#0x4c
00003e  d037              BEQ      |L8.176|
000040  2c50              CMP      r4,#0x50
000042  d035              BEQ      |L8.176|
000044  2c54              CMP      r4,#0x54
000046  d033              BEQ      |L8.176|
000048  2c58              CMP      r4,#0x58
00004a  d031              BEQ      |L8.176|
00004c  2c5c              CMP      r4,#0x5c
00004e  d02f              BEQ      |L8.176|
000050  2c60              CMP      r4,#0x60
000052  d02d              BEQ      |L8.176|
000054  2c64              CMP      r4,#0x64
000056  d02b              BEQ      |L8.176|
000058  2c68              CMP      r4,#0x68
00005a  d029              BEQ      |L8.176|
00005c  2c6c              CMP      r4,#0x6c
00005e  d027              BEQ      |L8.176|
000060  2c70              CMP      r4,#0x70
000062  d025              BEQ      |L8.176|
000064  2c74              CMP      r4,#0x74
000066  d023              BEQ      |L8.176|
000068  2c78              CMP      r4,#0x78
00006a  d021              BEQ      |L8.176|
00006c  2c7c              CMP      r4,#0x7c
00006e  d01f              BEQ      |L8.176|
000070  2c80              CMP      r4,#0x80
000072  d01d              BEQ      |L8.176|
000074  2c84              CMP      r4,#0x84
000076  d01b              BEQ      |L8.176|
000078  2c88              CMP      r4,#0x88
00007a  d019              BEQ      |L8.176|
00007c  2c8c              CMP      r4,#0x8c
00007e  d017              BEQ      |L8.176|
000080  2c90              CMP      r4,#0x90
000082  d015              BEQ      |L8.176|
000084  2c94              CMP      r4,#0x94
000086  d013              BEQ      |L8.176|
000088  2c98              CMP      r4,#0x98
00008a  d011              BEQ      |L8.176|
00008c  2c9c              CMP      r4,#0x9c
00008e  d00f              BEQ      |L8.176|
000090  2ca0              CMP      r4,#0xa0
000092  d00d              BEQ      |L8.176|
000094  2ca4              CMP      r4,#0xa4
000096  d00b              BEQ      |L8.176|
000098  2ca8              CMP      r4,#0xa8
00009a  d009              BEQ      |L8.176|
00009c  2cac              CMP      r4,#0xac
00009e  d007              BEQ      |L8.176|
0000a0  2cb0              CMP      r4,#0xb0
0000a2  d005              BEQ      |L8.176|
0000a4  2cb4              CMP      r4,#0xb4
0000a6  d003              BEQ      |L8.176|
0000a8  2cb8              CMP      r4,#0xb8
0000aa  d001              BEQ      |L8.176|
0000ac  2cbc              CMP      r4,#0xbc
0000ae  d101              BNE      |L8.180|
                  |L8.176|
0000b0  2101              MOVS     r1,#1
0000b2  e000              B        |L8.182|
                  |L8.180|
0000b4  2100              MOVS     r1,#0
                  |L8.182|
0000b6  4608              MOV      r0,r1
0000b8  f7fffffe          BL       assert_param
;;;247    
;;;248      tmp = (uint32_t)BKP_BASE; 
0000bc  4803              LDR      r0,|L8.204|
0000be  9000              STR      r0,[sp,#0]
;;;249      tmp += BKP_DR;
0000c0  9800              LDR      r0,[sp,#0]
0000c2  4420              ADD      r0,r0,r4
0000c4  9000              STR      r0,[sp,#0]
;;;250    
;;;251      return (*(__IO uint16_t *) tmp);
0000c6  9800              LDR      r0,[sp,#0]
0000c8  8800              LDRH     r0,[r0,#0]
;;;252    }
0000ca  bd38              POP      {r3-r5,pc}
;;;253    
                          ENDP

                  |L8.204|
                          DCD      0x40006c00

                          AREA ||i.BKP_SetRTCCalibrationValue||, CODE, READONLY, ALIGN=2

                  BKP_SetRTCCalibrationValue PROC
;;;200      */
;;;201    void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
000000  b570              PUSH     {r4-r6,lr}
;;;202    {
000002  4604              MOV      r4,r0
;;;203      uint16_t tmpreg = 0;
000004  2500              MOVS     r5,#0
;;;204      /* Check the parameters */
;;;205      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
000006  2c7f              CMP      r4,#0x7f
000008  dc01              BGT      |L9.14|
00000a  2101              MOVS     r1,#1
00000c  e000              B        |L9.16|
                  |L9.14|
00000e  2100              MOVS     r1,#0
                  |L9.16|
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       assert_param
;;;206      tmpreg = BKP->RTCCR;
000016  4804              LDR      r0,|L9.40|
000018  8805              LDRH     r5,[r0,#0]
;;;207      /* Clear CAL[6:0] bits */
;;;208      tmpreg &= RTCCR_CAL_MASK;
00001a  f64f7080          MOV      r0,#0xff80
00001e  4005              ANDS     r5,r5,r0
;;;209      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;210      tmpreg |= CalibrationValue;
000020  4325              ORRS     r5,r5,r4
;;;211      /* Store the new value */
;;;212      BKP->RTCCR = tmpreg;
000022  4801              LDR      r0,|L9.40|
000024  8005              STRH     r5,[r0,#0]
;;;213    }
000026  bd70              POP      {r4-r6,pc}
;;;214    
                          ENDP

                  |L9.40|
                          DCD      0x40006c2c

                          AREA ||i.BKP_TamperPinCmd||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinCmd PROC
;;;146      */
;;;147    void BKP_TamperPinCmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;148    {
000002  4604              MOV      r4,r0
;;;149      /* Check the parameters */
;;;150      assert_param(IS_FUNCTIONAL_STATE(NewState));
000004  b10c              CBZ      r4,|L10.10|
000006  2c01              CMP      r4,#1
000008  d101              BNE      |L10.14|
                  |L10.10|
00000a  2101              MOVS     r1,#1
00000c  e000              B        |L10.16|
                  |L10.14|
00000e  2100              MOVS     r1,#0
                  |L10.16|
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       assert_param
;;;151      *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
000016  4801              LDR      r0,|L10.28|
000018  6004              STR      r4,[r0,#0]
;;;152    }
00001a  bd10              POP      {r4,pc}
;;;153    
                          ENDP

                  |L10.28|
                          DCD      0x420d8600

                          AREA ||i.BKP_TamperPinLevelConfig||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinLevelConfig PROC
;;;133      */
;;;134    void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
000000  b510              PUSH     {r4,lr}
;;;135    {
000002  4604              MOV      r4,r0
;;;136      /* Check the parameters */
;;;137      assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
000004  b10c              CBZ      r4,|L11.10|
000006  2c01              CMP      r4,#1
000008  d101              BNE      |L11.14|
                  |L11.10|
00000a  2101              MOVS     r1,#1
00000c  e000              B        |L11.16|
                  |L11.14|
00000e  2100              MOVS     r1,#0
                  |L11.16|
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       assert_param
;;;138      *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
000016  4801              LDR      r0,|L11.28|
000018  6004              STR      r4,[r0,#0]
;;;139    }
00001a  bd10              POP      {r4,pc}
;;;140    
                          ENDP

                  |L11.28|
                          DCD      0x420d8604

                          AREA ||i.BKP_WriteBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_WriteBackupRegister PROC
;;;221      */
;;;222    void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
000000  b538              PUSH     {r3-r5,lr}
;;;223    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;224      __IO uint32_t tmp = 0;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;225    
;;;226      /* Check the parameters */
;;;227      assert_param(IS_BKP_DR(BKP_DR));
00000a  2c04              CMP      r4,#4
00000c  d051              BEQ      |L12.178|
00000e  2c08              CMP      r4,#8
000010  d04f              BEQ      |L12.178|
000012  2c0c              CMP      r4,#0xc
000014  d04d              BEQ      |L12.178|
000016  2c10              CMP      r4,#0x10
000018  d04b              BEQ      |L12.178|
00001a  2c14              CMP      r4,#0x14
00001c  d049              BEQ      |L12.178|
00001e  2c18              CMP      r4,#0x18
000020  d047              BEQ      |L12.178|
000022  2c1c              CMP      r4,#0x1c
000024  d045              BEQ      |L12.178|
000026  2c20              CMP      r4,#0x20
000028  d043              BEQ      |L12.178|
00002a  2c24              CMP      r4,#0x24
00002c  d041              BEQ      |L12.178|
00002e  2c28              CMP      r4,#0x28
000030  d03f              BEQ      |L12.178|
000032  2c40              CMP      r4,#0x40
000034  d03d              BEQ      |L12.178|
000036  2c44              CMP      r4,#0x44
000038  d03b              BEQ      |L12.178|
00003a  2c48              CMP      r4,#0x48
00003c  d039              BEQ      |L12.178|
00003e  2c4c              CMP      r4,#0x4c
000040  d037              BEQ      |L12.178|
000042  2c50              CMP      r4,#0x50
000044  d035              BEQ      |L12.178|
000046  2c54              CMP      r4,#0x54
000048  d033              BEQ      |L12.178|
00004a  2c58              CMP      r4,#0x58
00004c  d031              BEQ      |L12.178|
00004e  2c5c              CMP      r4,#0x5c
000050  d02f              BEQ      |L12.178|
000052  2c60              CMP      r4,#0x60
000054  d02d              BEQ      |L12.178|
000056  2c64              CMP      r4,#0x64
000058  d02b              BEQ      |L12.178|
00005a  2c68              CMP      r4,#0x68
00005c  d029              BEQ      |L12.178|
00005e  2c6c              CMP      r4,#0x6c
000060  d027              BEQ      |L12.178|
000062  2c70              CMP      r4,#0x70
000064  d025              BEQ      |L12.178|
000066  2c74              CMP      r4,#0x74
000068  d023              BEQ      |L12.178|
00006a  2c78              CMP      r4,#0x78
00006c  d021              BEQ      |L12.178|
00006e  2c7c              CMP      r4,#0x7c
000070  d01f              BEQ      |L12.178|
000072  2c80              CMP      r4,#0x80
000074  d01d              BEQ      |L12.178|
000076  2c84              CMP      r4,#0x84
000078  d01b              BEQ      |L12.178|
00007a  2c88              CMP      r4,#0x88
00007c  d019              BEQ      |L12.178|
00007e  2c8c              CMP      r4,#0x8c
000080  d017              BEQ      |L12.178|
000082  2c90              CMP      r4,#0x90
000084  d015              BEQ      |L12.178|
000086  2c94              CMP      r4,#0x94
000088  d013              BEQ      |L12.178|
00008a  2c98              CMP      r4,#0x98
00008c  d011              BEQ      |L12.178|
00008e  2c9c              CMP      r4,#0x9c
000090  d00f              BEQ      |L12.178|
000092  2ca0              CMP      r4,#0xa0
000094  d00d              BEQ      |L12.178|
000096  2ca4              CMP      r4,#0xa4
000098  d00b              BEQ      |L12.178|
00009a  2ca8              CMP      r4,#0xa8
00009c  d009              BEQ      |L12.178|
00009e  2cac              CMP      r4,#0xac
0000a0  d007              BEQ      |L12.178|
0000a2  2cb0              CMP      r4,#0xb0
0000a4  d005              BEQ      |L12.178|
0000a6  2cb4              CMP      r4,#0xb4
0000a8  d003              BEQ      |L12.178|
0000aa  2cb8              CMP      r4,#0xb8
0000ac  d001              BEQ      |L12.178|
0000ae  2cbc              CMP      r4,#0xbc
0000b0  d101              BNE      |L12.182|
                  |L12.178|
0000b2  2101              MOVS     r1,#1
0000b4  e000              B        |L12.184|
                  |L12.182|
0000b6  2100              MOVS     r1,#0
                  |L12.184|
0000b8  4608              MOV      r0,r1
0000ba  f7fffffe          BL       assert_param
;;;228    
;;;229      tmp = (uint32_t)BKP_BASE; 
0000be  4804              LDR      r0,|L12.208|
0000c0  9000              STR      r0,[sp,#0]
;;;230      tmp += BKP_DR;
0000c2  9800              LDR      r0,[sp,#0]
0000c4  4420              ADD      r0,r0,r4
0000c6  9000              STR      r0,[sp,#0]
;;;231    
;;;232      *(__IO uint32_t *) tmp = Data;
0000c8  9800              LDR      r0,[sp,#0]
0000ca  6005              STR      r5,[r0,#0]
;;;233    }
0000cc  bd38              POP      {r3-r5,pc}
;;;234    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L12.208|
                          DCD      0x40006c00
